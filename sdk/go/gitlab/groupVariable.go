// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package gitlab

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// This resource allows you to create and manage CI/CD variables for your GitLab groups.
// For further information on variables, consult the [gitlab
// documentation](https://docs.gitlab.com/ce/ci/variables/README.html#variables).
type GroupVariable struct {
	s *pulumi.ResourceState
}

// NewGroupVariable registers a new resource with the given unique name, arguments, and options.
func NewGroupVariable(ctx *pulumi.Context,
	name string, args *GroupVariableArgs, opts ...pulumi.ResourceOpt) (*GroupVariable, error) {
	if args == nil || args.Group == nil {
		return nil, errors.New("missing required argument 'Group'")
	}
	if args == nil || args.Key == nil {
		return nil, errors.New("missing required argument 'Key'")
	}
	if args == nil || args.Value == nil {
		return nil, errors.New("missing required argument 'Value'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["group"] = nil
		inputs["key"] = nil
		inputs["protected"] = nil
		inputs["value"] = nil
	} else {
		inputs["group"] = args.Group
		inputs["key"] = args.Key
		inputs["protected"] = args.Protected
		inputs["value"] = args.Value
	}
	s, err := ctx.RegisterResource("gitlab:index/groupVariable:GroupVariable", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &GroupVariable{s: s}, nil
}

// GetGroupVariable gets an existing GroupVariable resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGroupVariable(ctx *pulumi.Context,
	name string, id pulumi.ID, state *GroupVariableState, opts ...pulumi.ResourceOpt) (*GroupVariable, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["group"] = state.Group
		inputs["key"] = state.Key
		inputs["protected"] = state.Protected
		inputs["value"] = state.Value
	}
	s, err := ctx.ReadResource("gitlab:index/groupVariable:GroupVariable", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &GroupVariable{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *GroupVariable) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *GroupVariable) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// The name or id of the group to add the hook to.
func (r *GroupVariable) Group() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["group"])
}

// The name of the variable.
func (r *GroupVariable) Key() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["key"])
}

// If set to `true`, the variable will be passed only to pipelines running on protected branches and tags. Defaults to `false`.
func (r *GroupVariable) Protected() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["protected"])
}

// The value of the variable.
func (r *GroupVariable) Value() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["value"])
}

// Input properties used for looking up and filtering GroupVariable resources.
type GroupVariableState struct {
	// The name or id of the group to add the hook to.
	Group interface{}
	// The name of the variable.
	Key interface{}
	// If set to `true`, the variable will be passed only to pipelines running on protected branches and tags. Defaults to `false`.
	Protected interface{}
	// The value of the variable.
	Value interface{}
}

// The set of arguments for constructing a GroupVariable resource.
type GroupVariableArgs struct {
	// The name or id of the group to add the hook to.
	Group interface{}
	// The name of the variable.
	Key interface{}
	// If set to `true`, the variable will be passed only to pipelines running on protected branches and tags. Defaults to `false`.
	Protected interface{}
	// The value of the variable.
	Value interface{}
}
