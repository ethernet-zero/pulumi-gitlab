// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package gitlab

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// > This content is derived from https://github.com/terraform-providers/terraform-provider-gitlab/blob/master/website/docs/r/user.html.markdown.
type User struct {
	s *pulumi.ResourceState
}

// NewUser registers a new resource with the given unique name, arguments, and options.
func NewUser(ctx *pulumi.Context,
	name string, args *UserArgs, opts ...pulumi.ResourceOpt) (*User, error) {
	if args == nil || args.Email == nil {
		return nil, errors.New("missing required argument 'Email'")
	}
	if args == nil || args.Password == nil {
		return nil, errors.New("missing required argument 'Password'")
	}
	if args == nil || args.Username == nil {
		return nil, errors.New("missing required argument 'Username'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["canCreateGroup"] = nil
		inputs["email"] = nil
		inputs["isAdmin"] = nil
		inputs["isExternal"] = nil
		inputs["name"] = nil
		inputs["password"] = nil
		inputs["projectsLimit"] = nil
		inputs["resetPassword"] = nil
		inputs["skipConfirmation"] = nil
		inputs["username"] = nil
	} else {
		inputs["canCreateGroup"] = args.CanCreateGroup
		inputs["email"] = args.Email
		inputs["isAdmin"] = args.IsAdmin
		inputs["isExternal"] = args.IsExternal
		inputs["name"] = args.Name
		inputs["password"] = args.Password
		inputs["projectsLimit"] = args.ProjectsLimit
		inputs["resetPassword"] = args.ResetPassword
		inputs["skipConfirmation"] = args.SkipConfirmation
		inputs["username"] = args.Username
	}
	s, err := ctx.RegisterResource("gitlab:index/user:User", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &User{s: s}, nil
}

// GetUser gets an existing User resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetUser(ctx *pulumi.Context,
	name string, id pulumi.ID, state *UserState, opts ...pulumi.ResourceOpt) (*User, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["canCreateGroup"] = state.CanCreateGroup
		inputs["email"] = state.Email
		inputs["isAdmin"] = state.IsAdmin
		inputs["isExternal"] = state.IsExternal
		inputs["name"] = state.Name
		inputs["password"] = state.Password
		inputs["projectsLimit"] = state.ProjectsLimit
		inputs["resetPassword"] = state.ResetPassword
		inputs["skipConfirmation"] = state.SkipConfirmation
		inputs["username"] = state.Username
	}
	s, err := ctx.ReadResource("gitlab:index/user:User", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &User{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *User) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *User) ID() pulumi.IDOutput {
	return r.s.ID()
}

// Boolean, defaults to false. Whether to allow the user to create groups.
func (r *User) CanCreateGroup() pulumi.BoolOutput {
	return (pulumi.BoolOutput)(r.s.State["canCreateGroup"])
}

// The e-mail address of the user.
func (r *User) Email() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["email"])
}

// Boolean, defaults to false.  Whether to enable administrative priviledges
// for the user.
func (r *User) IsAdmin() pulumi.BoolOutput {
	return (pulumi.BoolOutput)(r.s.State["isAdmin"])
}

// Boolean, defaults to false. Whether a user has access only to some internal or private projects. External users can only access projects to which they are explicitly granted access.
func (r *User) IsExternal() pulumi.BoolOutput {
	return (pulumi.BoolOutput)(r.s.State["isExternal"])
}

// The name of the user.
func (r *User) Name() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["name"])
}

// The password of the user.
func (r *User) Password() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["password"])
}

// Integer, defaults to 0.  Number of projects user can create.
func (r *User) ProjectsLimit() pulumi.IntOutput {
	return (pulumi.IntOutput)(r.s.State["projectsLimit"])
}

// Boolean, defaults to false. Send user password reset link.
func (r *User) ResetPassword() pulumi.BoolOutput {
	return (pulumi.BoolOutput)(r.s.State["resetPassword"])
}

// Boolean, defaults to true. Whether to skip confirmation.
func (r *User) SkipConfirmation() pulumi.BoolOutput {
	return (pulumi.BoolOutput)(r.s.State["skipConfirmation"])
}

// The username of the user.
func (r *User) Username() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["username"])
}

// Input properties used for looking up and filtering User resources.
type UserState struct {
	// Boolean, defaults to false. Whether to allow the user to create groups.
	CanCreateGroup interface{}
	// The e-mail address of the user.
	Email interface{}
	// Boolean, defaults to false.  Whether to enable administrative priviledges
	// for the user.
	IsAdmin interface{}
	// Boolean, defaults to false. Whether a user has access only to some internal or private projects. External users can only access projects to which they are explicitly granted access.
	IsExternal interface{}
	// The name of the user.
	Name interface{}
	// The password of the user.
	Password interface{}
	// Integer, defaults to 0.  Number of projects user can create.
	ProjectsLimit interface{}
	// Boolean, defaults to false. Send user password reset link.
	ResetPassword interface{}
	// Boolean, defaults to true. Whether to skip confirmation.
	SkipConfirmation interface{}
	// The username of the user.
	Username interface{}
}

// The set of arguments for constructing a User resource.
type UserArgs struct {
	// Boolean, defaults to false. Whether to allow the user to create groups.
	CanCreateGroup interface{}
	// The e-mail address of the user.
	Email interface{}
	// Boolean, defaults to false.  Whether to enable administrative priviledges
	// for the user.
	IsAdmin interface{}
	// Boolean, defaults to false. Whether a user has access only to some internal or private projects. External users can only access projects to which they are explicitly granted access.
	IsExternal interface{}
	// The name of the user.
	Name interface{}
	// The password of the user.
	Password interface{}
	// Integer, defaults to 0.  Number of projects user can create.
	ProjectsLimit interface{}
	// Boolean, defaults to false. Send user password reset link.
	ResetPassword interface{}
	// Boolean, defaults to true. Whether to skip confirmation.
	SkipConfirmation interface{}
	// The username of the user.
	Username interface{}
}
