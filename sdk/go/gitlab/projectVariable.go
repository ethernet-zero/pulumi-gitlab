// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package gitlab

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// This resource allows you to create and manage CI/CD variables for your GitLab projects.
// For further information on variables, consult the [gitlab
// documentation](https://docs.gitlab.com/ce/ci/variables/README.html#variables).
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-gitlab/blob/master/website/docs/r/project_variable.html.markdown.
type ProjectVariable struct {
	s *pulumi.ResourceState
}

// NewProjectVariable registers a new resource with the given unique name, arguments, and options.
func NewProjectVariable(ctx *pulumi.Context,
	name string, args *ProjectVariableArgs, opts ...pulumi.ResourceOpt) (*ProjectVariable, error) {
	if args == nil || args.Key == nil {
		return nil, errors.New("missing required argument 'Key'")
	}
	if args == nil || args.Project == nil {
		return nil, errors.New("missing required argument 'Project'")
	}
	if args == nil || args.Value == nil {
		return nil, errors.New("missing required argument 'Value'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["environmentScope"] = nil
		inputs["key"] = nil
		inputs["masked"] = nil
		inputs["project"] = nil
		inputs["protected"] = nil
		inputs["value"] = nil
		inputs["variableType"] = nil
	} else {
		inputs["environmentScope"] = args.EnvironmentScope
		inputs["key"] = args.Key
		inputs["masked"] = args.Masked
		inputs["project"] = args.Project
		inputs["protected"] = args.Protected
		inputs["value"] = args.Value
		inputs["variableType"] = args.VariableType
	}
	s, err := ctx.RegisterResource("gitlab:index/projectVariable:ProjectVariable", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &ProjectVariable{s: s}, nil
}

// GetProjectVariable gets an existing ProjectVariable resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetProjectVariable(ctx *pulumi.Context,
	name string, id pulumi.ID, state *ProjectVariableState, opts ...pulumi.ResourceOpt) (*ProjectVariable, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["environmentScope"] = state.EnvironmentScope
		inputs["key"] = state.Key
		inputs["masked"] = state.Masked
		inputs["project"] = state.Project
		inputs["protected"] = state.Protected
		inputs["value"] = state.Value
		inputs["variableType"] = state.VariableType
	}
	s, err := ctx.ReadResource("gitlab:index/projectVariable:ProjectVariable", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &ProjectVariable{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *ProjectVariable) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *ProjectVariable) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// The environmentScope of the variable
func (r *ProjectVariable) EnvironmentScope() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["environmentScope"])
}

// The name of the variable.
func (r *ProjectVariable) Key() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["key"])
}

// If set to `true`, the variable will be masked if it would have been written to the logs. Defaults to `false`.
func (r *ProjectVariable) Masked() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["masked"])
}

// The name or id of the project to add the hook to.
func (r *ProjectVariable) Project() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["project"])
}

// If set to `true`, the variable will be passed only to pipelines running on protected branches and tags. Defaults to `false`.
func (r *ProjectVariable) Protected() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["protected"])
}

// The value of the variable.
func (r *ProjectVariable) Value() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["value"])
}

// The type of a variable. Available types are: envVar (default) and file.
func (r *ProjectVariable) VariableType() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["variableType"])
}

// Input properties used for looking up and filtering ProjectVariable resources.
type ProjectVariableState struct {
	// The environmentScope of the variable
	EnvironmentScope interface{}
	// The name of the variable.
	Key interface{}
	// If set to `true`, the variable will be masked if it would have been written to the logs. Defaults to `false`.
	Masked interface{}
	// The name or id of the project to add the hook to.
	Project interface{}
	// If set to `true`, the variable will be passed only to pipelines running on protected branches and tags. Defaults to `false`.
	Protected interface{}
	// The value of the variable.
	Value interface{}
	// The type of a variable. Available types are: envVar (default) and file.
	VariableType interface{}
}

// The set of arguments for constructing a ProjectVariable resource.
type ProjectVariableArgs struct {
	// The environmentScope of the variable
	EnvironmentScope interface{}
	// The name of the variable.
	Key interface{}
	// If set to `true`, the variable will be masked if it would have been written to the logs. Defaults to `false`.
	Masked interface{}
	// The name or id of the project to add the hook to.
	Project interface{}
	// If set to `true`, the variable will be passed only to pipelines running on protected branches and tags. Defaults to `false`.
	Protected interface{}
	// The value of the variable.
	Value interface{}
	// The type of a variable. Available types are: envVar (default) and file.
	VariableType interface{}
}
