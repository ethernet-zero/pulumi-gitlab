// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package gitlab

import (
	"fmt"

	"github.com/blang/semver"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type module struct {
	version semver.Version
}

func (m *module) Version() semver.Version {
	return m.version
}

func (m *module) Construct(ctx *pulumi.Context, name, typ, urn string) (r pulumi.Resource, err error) {
	switch typ {
	case "gitlab:index/branchProtection:BranchProtection":
		r, err = NewBranchProtection(ctx, name, nil, pulumi.URN_(urn))
	case "gitlab:index/deployKey:DeployKey":
		r, err = NewDeployKey(ctx, name, nil, pulumi.URN_(urn))
	case "gitlab:index/deployKeyEnable:DeployKeyEnable":
		r, err = NewDeployKeyEnable(ctx, name, nil, pulumi.URN_(urn))
	case "gitlab:index/deployToken:DeployToken":
		r, err = NewDeployToken(ctx, name, nil, pulumi.URN_(urn))
	case "gitlab:index/group:Group":
		r, err = NewGroup(ctx, name, nil, pulumi.URN_(urn))
	case "gitlab:index/groupCluster:GroupCluster":
		r, err = NewGroupCluster(ctx, name, nil, pulumi.URN_(urn))
	case "gitlab:index/groupLabel:GroupLabel":
		r, err = NewGroupLabel(ctx, name, nil, pulumi.URN_(urn))
	case "gitlab:index/groupLdapLink:GroupLdapLink":
		r, err = NewGroupLdapLink(ctx, name, nil, pulumi.URN_(urn))
	case "gitlab:index/groupMembership:GroupMembership":
		r, err = NewGroupMembership(ctx, name, nil, pulumi.URN_(urn))
	case "gitlab:index/groupShareGroup:GroupShareGroup":
		r, err = NewGroupShareGroup(ctx, name, nil, pulumi.URN_(urn))
	case "gitlab:index/groupVariable:GroupVariable":
		r, err = NewGroupVariable(ctx, name, nil, pulumi.URN_(urn))
	case "gitlab:index/instanceCluster:InstanceCluster":
		r, err = NewInstanceCluster(ctx, name, nil, pulumi.URN_(urn))
	case "gitlab:index/instanceVariable:InstanceVariable":
		r, err = NewInstanceVariable(ctx, name, nil, pulumi.URN_(urn))
	case "gitlab:index/label:Label":
		r, err = NewLabel(ctx, name, nil, pulumi.URN_(urn))
	case "gitlab:index/pipelineSchedule:PipelineSchedule":
		r, err = NewPipelineSchedule(ctx, name, nil, pulumi.URN_(urn))
	case "gitlab:index/pipelineScheduleVariable:PipelineScheduleVariable":
		r, err = NewPipelineScheduleVariable(ctx, name, nil, pulumi.URN_(urn))
	case "gitlab:index/pipelineTrigger:PipelineTrigger":
		r, err = NewPipelineTrigger(ctx, name, nil, pulumi.URN_(urn))
	case "gitlab:index/project:Project":
		r, err = NewProject(ctx, name, nil, pulumi.URN_(urn))
	case "gitlab:index/projectApprovalRule:ProjectApprovalRule":
		r, err = NewProjectApprovalRule(ctx, name, nil, pulumi.URN_(urn))
	case "gitlab:index/projectCluster:ProjectCluster":
		r, err = NewProjectCluster(ctx, name, nil, pulumi.URN_(urn))
	case "gitlab:index/projectHook:ProjectHook":
		r, err = NewProjectHook(ctx, name, nil, pulumi.URN_(urn))
	case "gitlab:index/projectLevelMrApprovals:ProjectLevelMrApprovals":
		r, err = NewProjectLevelMrApprovals(ctx, name, nil, pulumi.URN_(urn))
	case "gitlab:index/projectMembership:ProjectMembership":
		r, err = NewProjectMembership(ctx, name, nil, pulumi.URN_(urn))
	case "gitlab:index/projectMirror:ProjectMirror":
		r, err = NewProjectMirror(ctx, name, nil, pulumi.URN_(urn))
	case "gitlab:index/projectShareGroup:ProjectShareGroup":
		r, err = NewProjectShareGroup(ctx, name, nil, pulumi.URN_(urn))
	case "gitlab:index/projectVariable:ProjectVariable":
		r, err = NewProjectVariable(ctx, name, nil, pulumi.URN_(urn))
	case "gitlab:index/serviceGithub:ServiceGithub":
		r, err = NewServiceGithub(ctx, name, nil, pulumi.URN_(urn))
	case "gitlab:index/serviceJira:ServiceJira":
		r, err = NewServiceJira(ctx, name, nil, pulumi.URN_(urn))
	case "gitlab:index/servicePipelinesEmail:ServicePipelinesEmail":
		r, err = NewServicePipelinesEmail(ctx, name, nil, pulumi.URN_(urn))
	case "gitlab:index/serviceSlack:ServiceSlack":
		r, err = NewServiceSlack(ctx, name, nil, pulumi.URN_(urn))
	case "gitlab:index/tagProtection:TagProtection":
		r, err = NewTagProtection(ctx, name, nil, pulumi.URN_(urn))
	case "gitlab:index/user:User":
		r, err = NewUser(ctx, name, nil, pulumi.URN_(urn))
	default:
		return nil, fmt.Errorf("unknown resource type: %s", typ)
	}

	return
}

type pkg struct {
	version semver.Version
}

func (p *pkg) Version() semver.Version {
	return p.version
}

func (p *pkg) ConstructProvider(ctx *pulumi.Context, name, typ, urn string) (pulumi.ProviderResource, error) {
	if typ != "pulumi:providers:gitlab" {
		return nil, fmt.Errorf("unknown provider type: %s", typ)
	}

	return NewProvider(ctx, name, nil, pulumi.URN_(urn))
}

func init() {
	version, err := PkgVersion()
	if err != nil {
		fmt.Println("failed to determine package version. defaulting to v1: %v", err)
	}
	pulumi.RegisterResourceModule(
		"gitlab",
		"index/branchProtection",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"gitlab",
		"index/deployKey",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"gitlab",
		"index/deployKeyEnable",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"gitlab",
		"index/deployToken",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"gitlab",
		"index/group",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"gitlab",
		"index/groupCluster",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"gitlab",
		"index/groupLabel",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"gitlab",
		"index/groupLdapLink",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"gitlab",
		"index/groupMembership",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"gitlab",
		"index/groupShareGroup",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"gitlab",
		"index/groupVariable",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"gitlab",
		"index/instanceCluster",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"gitlab",
		"index/instanceVariable",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"gitlab",
		"index/label",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"gitlab",
		"index/pipelineSchedule",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"gitlab",
		"index/pipelineScheduleVariable",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"gitlab",
		"index/pipelineTrigger",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"gitlab",
		"index/project",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"gitlab",
		"index/projectApprovalRule",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"gitlab",
		"index/projectCluster",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"gitlab",
		"index/projectHook",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"gitlab",
		"index/projectLevelMrApprovals",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"gitlab",
		"index/projectMembership",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"gitlab",
		"index/projectMirror",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"gitlab",
		"index/projectShareGroup",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"gitlab",
		"index/projectVariable",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"gitlab",
		"index/serviceGithub",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"gitlab",
		"index/serviceJira",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"gitlab",
		"index/servicePipelinesEmail",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"gitlab",
		"index/serviceSlack",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"gitlab",
		"index/tagProtection",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"gitlab",
		"index/user",
		&module{version},
	)
	pulumi.RegisterResourcePackage(
		"gitlab",
		&pkg{version},
	)
}
