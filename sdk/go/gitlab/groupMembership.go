// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package gitlab

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// This resource allows you to add a user to an existing group.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-gitlab/blob/master/website/docs/r/group_membership.html.markdown.
type GroupMembership struct {
	s *pulumi.ResourceState
}

// NewGroupMembership registers a new resource with the given unique name, arguments, and options.
func NewGroupMembership(ctx *pulumi.Context,
	name string, args *GroupMembershipArgs, opts ...pulumi.ResourceOpt) (*GroupMembership, error) {
	if args == nil || args.AccessLevel == nil {
		return nil, errors.New("missing required argument 'AccessLevel'")
	}
	if args == nil || args.GroupId == nil {
		return nil, errors.New("missing required argument 'GroupId'")
	}
	if args == nil || args.UserId == nil {
		return nil, errors.New("missing required argument 'UserId'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["accessLevel"] = nil
		inputs["expiresAt"] = nil
		inputs["groupId"] = nil
		inputs["userId"] = nil
	} else {
		inputs["accessLevel"] = args.AccessLevel
		inputs["expiresAt"] = args.ExpiresAt
		inputs["groupId"] = args.GroupId
		inputs["userId"] = args.UserId
	}
	s, err := ctx.RegisterResource("gitlab:index/groupMembership:GroupMembership", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &GroupMembership{s: s}, nil
}

// GetGroupMembership gets an existing GroupMembership resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGroupMembership(ctx *pulumi.Context,
	name string, id pulumi.ID, state *GroupMembershipState, opts ...pulumi.ResourceOpt) (*GroupMembership, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["accessLevel"] = state.AccessLevel
		inputs["expiresAt"] = state.ExpiresAt
		inputs["groupId"] = state.GroupId
		inputs["userId"] = state.UserId
	}
	s, err := ctx.ReadResource("gitlab:index/groupMembership:GroupMembership", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &GroupMembership{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *GroupMembership) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *GroupMembership) ID() pulumi.IDOutput {
	return r.s.ID()
}

// Acceptable values are: guest, reporter, developer, maintainer, owner.
func (r *GroupMembership) AccessLevel() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["accessLevel"])
}

// Expiration date for the group membership. Format: `YYYY-MM-DD`
func (r *GroupMembership) ExpiresAt() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["expiresAt"])
}

// The id of the group.
func (r *GroupMembership) GroupId() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["groupId"])
}

// The id of the user.
func (r *GroupMembership) UserId() pulumi.IntOutput {
	return (pulumi.IntOutput)(r.s.State["userId"])
}

// Input properties used for looking up and filtering GroupMembership resources.
type GroupMembershipState struct {
	// Acceptable values are: guest, reporter, developer, maintainer, owner.
	AccessLevel interface{}
	// Expiration date for the group membership. Format: `YYYY-MM-DD`
	ExpiresAt interface{}
	// The id of the group.
	GroupId interface{}
	// The id of the user.
	UserId interface{}
}

// The set of arguments for constructing a GroupMembership resource.
type GroupMembershipArgs struct {
	// Acceptable values are: guest, reporter, developer, maintainer, owner.
	AccessLevel interface{}
	// Expiration date for the group membership. Format: `YYYY-MM-DD`
	ExpiresAt interface{}
	// The id of the group.
	GroupId interface{}
	// The id of the user.
	UserId interface{}
}
