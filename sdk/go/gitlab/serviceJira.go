// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package gitlab

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// This resource allows you to manage Jira integration.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-gitlab/blob/master/website/docs/r/service_jira.html.markdown.
type ServiceJira struct {
	s *pulumi.ResourceState
}

// NewServiceJira registers a new resource with the given unique name, arguments, and options.
func NewServiceJira(ctx *pulumi.Context,
	name string, args *ServiceJiraArgs, opts ...pulumi.ResourceOpt) (*ServiceJira, error) {
	if args == nil || args.Password == nil {
		return nil, errors.New("missing required argument 'Password'")
	}
	if args == nil || args.Project == nil {
		return nil, errors.New("missing required argument 'Project'")
	}
	if args == nil || args.Url == nil {
		return nil, errors.New("missing required argument 'Url'")
	}
	if args == nil || args.Username == nil {
		return nil, errors.New("missing required argument 'Username'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["jiraIssueTransitionId"] = nil
		inputs["password"] = nil
		inputs["project"] = nil
		inputs["projectKey"] = nil
		inputs["url"] = nil
		inputs["username"] = nil
	} else {
		inputs["jiraIssueTransitionId"] = args.JiraIssueTransitionId
		inputs["password"] = args.Password
		inputs["project"] = args.Project
		inputs["projectKey"] = args.ProjectKey
		inputs["url"] = args.Url
		inputs["username"] = args.Username
	}
	inputs["active"] = nil
	inputs["createdAt"] = nil
	inputs["title"] = nil
	inputs["updatedAt"] = nil
	s, err := ctx.RegisterResource("gitlab:index/serviceJira:ServiceJira", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &ServiceJira{s: s}, nil
}

// GetServiceJira gets an existing ServiceJira resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetServiceJira(ctx *pulumi.Context,
	name string, id pulumi.ID, state *ServiceJiraState, opts ...pulumi.ResourceOpt) (*ServiceJira, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["active"] = state.Active
		inputs["createdAt"] = state.CreatedAt
		inputs["jiraIssueTransitionId"] = state.JiraIssueTransitionId
		inputs["password"] = state.Password
		inputs["project"] = state.Project
		inputs["projectKey"] = state.ProjectKey
		inputs["title"] = state.Title
		inputs["updatedAt"] = state.UpdatedAt
		inputs["url"] = state.Url
		inputs["username"] = state.Username
	}
	s, err := ctx.ReadResource("gitlab:index/serviceJira:ServiceJira", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &ServiceJira{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *ServiceJira) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *ServiceJira) ID() *pulumi.IDOutput {
	return r.s.ID()
}

func (r *ServiceJira) Active() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["active"])
}

func (r *ServiceJira) CreatedAt() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["createdAt"])
}

// The ID of a transition that moves issues to a closed state. You can find this number under the JIRA workflow administration (Administration > Issues > Workflows) by selecting View under Operations of the desired workflow of your project. By default, this ID is set to 2.
func (r *ServiceJira) JiraIssueTransitionId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["jiraIssueTransitionId"])
}

// The password of the user created to be used with GitLab/JIRA.
func (r *ServiceJira) Password() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["password"])
}

// ID of the project you want to activate integration on.
func (r *ServiceJira) Project() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["project"])
}

// The short identifier for your JIRA project, all uppercase, e.g., PROJ.
func (r *ServiceJira) ProjectKey() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["projectKey"])
}

func (r *ServiceJira) Title() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["title"])
}

func (r *ServiceJira) UpdatedAt() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["updatedAt"])
}

// The URL to the JIRA project which is being linked to this GitLab project. For example, https://jira.example.com.
func (r *ServiceJira) Url() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["url"])
}

// The username of the user created to be used with GitLab/JIRA.
func (r *ServiceJira) Username() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["username"])
}

// Input properties used for looking up and filtering ServiceJira resources.
type ServiceJiraState struct {
	Active interface{}
	CreatedAt interface{}
	// The ID of a transition that moves issues to a closed state. You can find this number under the JIRA workflow administration (Administration > Issues > Workflows) by selecting View under Operations of the desired workflow of your project. By default, this ID is set to 2.
	JiraIssueTransitionId interface{}
	// The password of the user created to be used with GitLab/JIRA.
	Password interface{}
	// ID of the project you want to activate integration on.
	Project interface{}
	// The short identifier for your JIRA project, all uppercase, e.g., PROJ.
	ProjectKey interface{}
	Title interface{}
	UpdatedAt interface{}
	// The URL to the JIRA project which is being linked to this GitLab project. For example, https://jira.example.com.
	Url interface{}
	// The username of the user created to be used with GitLab/JIRA.
	Username interface{}
}

// The set of arguments for constructing a ServiceJira resource.
type ServiceJiraArgs struct {
	// The ID of a transition that moves issues to a closed state. You can find this number under the JIRA workflow administration (Administration > Issues > Workflows) by selecting View under Operations of the desired workflow of your project. By default, this ID is set to 2.
	JiraIssueTransitionId interface{}
	// The password of the user created to be used with GitLab/JIRA.
	Password interface{}
	// ID of the project you want to activate integration on.
	Project interface{}
	// The short identifier for your JIRA project, all uppercase, e.g., PROJ.
	ProjectKey interface{}
	// The URL to the JIRA project which is being linked to this GitLab project. For example, https://jira.example.com.
	Url interface{}
	// The username of the user created to be used with GitLab/JIRA.
	Username interface{}
}
