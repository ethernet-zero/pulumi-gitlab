// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package gitlab

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// This resource allows you to create and manage deploy keys for your GitLab projects.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-gitlab/blob/master/website/docs/r/deploy_key.html.markdown.
type DeployKey struct {
	s *pulumi.ResourceState
}

// NewDeployKey registers a new resource with the given unique name, arguments, and options.
func NewDeployKey(ctx *pulumi.Context,
	name string, args *DeployKeyArgs, opts ...pulumi.ResourceOpt) (*DeployKey, error) {
	if args == nil || args.Key == nil {
		return nil, errors.New("missing required argument 'Key'")
	}
	if args == nil || args.Project == nil {
		return nil, errors.New("missing required argument 'Project'")
	}
	if args == nil || args.Title == nil {
		return nil, errors.New("missing required argument 'Title'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["canPush"] = nil
		inputs["key"] = nil
		inputs["project"] = nil
		inputs["title"] = nil
	} else {
		inputs["canPush"] = args.CanPush
		inputs["key"] = args.Key
		inputs["project"] = args.Project
		inputs["title"] = args.Title
	}
	s, err := ctx.RegisterResource("gitlab:index/deployKey:DeployKey", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &DeployKey{s: s}, nil
}

// GetDeployKey gets an existing DeployKey resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDeployKey(ctx *pulumi.Context,
	name string, id pulumi.ID, state *DeployKeyState, opts ...pulumi.ResourceOpt) (*DeployKey, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["canPush"] = state.CanPush
		inputs["key"] = state.Key
		inputs["project"] = state.Project
		inputs["title"] = state.Title
	}
	s, err := ctx.ReadResource("gitlab:index/deployKey:DeployKey", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &DeployKey{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *DeployKey) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *DeployKey) ID() pulumi.IDOutput {
	return r.s.ID()
}

// Allow this deploy key to be used to push changes to the project.  Defaults to `false`. **NOTE::** this cannot currently be managed.
func (r *DeployKey) CanPush() pulumi.BoolOutput {
	return (pulumi.BoolOutput)(r.s.State["canPush"])
}

// The public ssh key body.
func (r *DeployKey) Key() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["key"])
}

// The name or id of the project to add the deploy key to.
func (r *DeployKey) Project() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["project"])
}

// A title to describe the deploy key with.
func (r *DeployKey) Title() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["title"])
}

// Input properties used for looking up and filtering DeployKey resources.
type DeployKeyState struct {
	// Allow this deploy key to be used to push changes to the project.  Defaults to `false`. **NOTE::** this cannot currently be managed.
	CanPush interface{}
	// The public ssh key body.
	Key interface{}
	// The name or id of the project to add the deploy key to.
	Project interface{}
	// A title to describe the deploy key with.
	Title interface{}
}

// The set of arguments for constructing a DeployKey resource.
type DeployKeyArgs struct {
	// Allow this deploy key to be used to push changes to the project.  Defaults to `false`. **NOTE::** this cannot currently be managed.
	CanPush interface{}
	// The public ssh key body.
	Key interface{}
	// The name or id of the project to add the deploy key to.
	Project interface{}
	// A title to describe the deploy key with.
	Title interface{}
}
