// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package gitlab

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// This resource allows you to create and manage push rules for your GitLab projects.
// For further information on push rules, consult the [gitlab
// documentation](https://docs.gitlab.com/ce/push_rules/push_rules.html#push-rules).
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-gitlab/blob/master/website/docs/r/project_push_rules.html.markdown.
type ProjectPushRules struct {
	s *pulumi.ResourceState
}

// NewProjectPushRules registers a new resource with the given unique name, arguments, and options.
func NewProjectPushRules(ctx *pulumi.Context,
	name string, args *ProjectPushRulesArgs, opts ...pulumi.ResourceOpt) (*ProjectPushRules, error) {
	if args == nil || args.Project == nil {
		return nil, errors.New("missing required argument 'Project'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["authorEmailRegex"] = nil
		inputs["branchNameRegex"] = nil
		inputs["commitMessageRegex"] = nil
		inputs["denyDeleteTag"] = nil
		inputs["fileNameRegex"] = nil
		inputs["maxFileSize"] = nil
		inputs["memberCheck"] = nil
		inputs["preventSecrets"] = nil
		inputs["project"] = nil
	} else {
		inputs["authorEmailRegex"] = args.AuthorEmailRegex
		inputs["branchNameRegex"] = args.BranchNameRegex
		inputs["commitMessageRegex"] = args.CommitMessageRegex
		inputs["denyDeleteTag"] = args.DenyDeleteTag
		inputs["fileNameRegex"] = args.FileNameRegex
		inputs["maxFileSize"] = args.MaxFileSize
		inputs["memberCheck"] = args.MemberCheck
		inputs["preventSecrets"] = args.PreventSecrets
		inputs["project"] = args.Project
	}
	s, err := ctx.RegisterResource("gitlab:index/projectPushRules:ProjectPushRules", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &ProjectPushRules{s: s}, nil
}

// GetProjectPushRules gets an existing ProjectPushRules resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetProjectPushRules(ctx *pulumi.Context,
	name string, id pulumi.ID, state *ProjectPushRulesState, opts ...pulumi.ResourceOpt) (*ProjectPushRules, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["authorEmailRegex"] = state.AuthorEmailRegex
		inputs["branchNameRegex"] = state.BranchNameRegex
		inputs["commitMessageRegex"] = state.CommitMessageRegex
		inputs["denyDeleteTag"] = state.DenyDeleteTag
		inputs["fileNameRegex"] = state.FileNameRegex
		inputs["maxFileSize"] = state.MaxFileSize
		inputs["memberCheck"] = state.MemberCheck
		inputs["preventSecrets"] = state.PreventSecrets
		inputs["project"] = state.Project
	}
	s, err := ctx.ReadResource("gitlab:index/projectPushRules:ProjectPushRules", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &ProjectPushRules{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *ProjectPushRules) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *ProjectPushRules) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// All commit author emails must match this regex, e.g. "@my-company.com$"
func (r *ProjectPushRules) AuthorEmailRegex() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["authorEmailRegex"])
}

// All branch names must match this regex, e.g. "(feature|hotfix)\/*"
func (r *ProjectPushRules) BranchNameRegex() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["branchNameRegex"])
}

// All commit messages must match this regex, e.g. "Fixed \d+\..*"
func (r *ProjectPushRules) CommitMessageRegex() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["commitMessageRegex"])
}

// Deny deleting a tag
func (r *ProjectPushRules) DenyDeleteTag() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["denyDeleteTag"])
}

// All commited filenames must not match this regex, e.g. "(jar|exe)$"
func (r *ProjectPushRules) FileNameRegex() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["fileNameRegex"])
}

// Maximum file size (MB)
func (r *ProjectPushRules) MaxFileSize() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["maxFileSize"])
}

// Restrict commits by author (email) to existing GitLab users
func (r *ProjectPushRules) MemberCheck() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["memberCheck"])
}

// GitLab will reject any files that are likely to contain secrets
func (r *ProjectPushRules) PreventSecrets() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["preventSecrets"])
}

// The name or id of the project to add the push rules to.
func (r *ProjectPushRules) Project() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["project"])
}

// Input properties used for looking up and filtering ProjectPushRules resources.
type ProjectPushRulesState struct {
	// All commit author emails must match this regex, e.g. "@my-company.com$"
	AuthorEmailRegex interface{}
	// All branch names must match this regex, e.g. "(feature|hotfix)\/*"
	BranchNameRegex interface{}
	// All commit messages must match this regex, e.g. "Fixed \d+\..*"
	CommitMessageRegex interface{}
	// Deny deleting a tag
	DenyDeleteTag interface{}
	// All commited filenames must not match this regex, e.g. "(jar|exe)$"
	FileNameRegex interface{}
	// Maximum file size (MB)
	MaxFileSize interface{}
	// Restrict commits by author (email) to existing GitLab users
	MemberCheck interface{}
	// GitLab will reject any files that are likely to contain secrets
	PreventSecrets interface{}
	// The name or id of the project to add the push rules to.
	Project interface{}
}

// The set of arguments for constructing a ProjectPushRules resource.
type ProjectPushRulesArgs struct {
	// All commit author emails must match this regex, e.g. "@my-company.com$"
	AuthorEmailRegex interface{}
	// All branch names must match this regex, e.g. "(feature|hotfix)\/*"
	BranchNameRegex interface{}
	// All commit messages must match this regex, e.g. "Fixed \d+\..*"
	CommitMessageRegex interface{}
	// Deny deleting a tag
	DenyDeleteTag interface{}
	// All commited filenames must not match this regex, e.g. "(jar|exe)$"
	FileNameRegex interface{}
	// Maximum file size (MB)
	MaxFileSize interface{}
	// Restrict commits by author (email) to existing GitLab users
	MemberCheck interface{}
	// GitLab will reject any files that are likely to contain secrets
	PreventSecrets interface{}
	// The name or id of the project to add the push rules to.
	Project interface{}
}
