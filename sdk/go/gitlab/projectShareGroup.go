// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package gitlab

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// This resource allows you to share a project with a group
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-gitlab/blob/master/website/docs/r/project_share_group.html.markdown.
type ProjectShareGroup struct {
	s *pulumi.ResourceState
}

// NewProjectShareGroup registers a new resource with the given unique name, arguments, and options.
func NewProjectShareGroup(ctx *pulumi.Context,
	name string, args *ProjectShareGroupArgs, opts ...pulumi.ResourceOpt) (*ProjectShareGroup, error) {
	if args == nil || args.AccessLevel == nil {
		return nil, errors.New("missing required argument 'AccessLevel'")
	}
	if args == nil || args.GroupId == nil {
		return nil, errors.New("missing required argument 'GroupId'")
	}
	if args == nil || args.ProjectId == nil {
		return nil, errors.New("missing required argument 'ProjectId'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["accessLevel"] = nil
		inputs["groupId"] = nil
		inputs["projectId"] = nil
	} else {
		inputs["accessLevel"] = args.AccessLevel
		inputs["groupId"] = args.GroupId
		inputs["projectId"] = args.ProjectId
	}
	s, err := ctx.RegisterResource("gitlab:index/projectShareGroup:ProjectShareGroup", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &ProjectShareGroup{s: s}, nil
}

// GetProjectShareGroup gets an existing ProjectShareGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetProjectShareGroup(ctx *pulumi.Context,
	name string, id pulumi.ID, state *ProjectShareGroupState, opts ...pulumi.ResourceOpt) (*ProjectShareGroup, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["accessLevel"] = state.AccessLevel
		inputs["groupId"] = state.GroupId
		inputs["projectId"] = state.ProjectId
	}
	s, err := ctx.ReadResource("gitlab:index/projectShareGroup:ProjectShareGroup", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &ProjectShareGroup{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *ProjectShareGroup) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *ProjectShareGroup) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// One of five levels of access to the project.
func (r *ProjectShareGroup) AccessLevel() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["accessLevel"])
}

// The id of the group.
func (r *ProjectShareGroup) GroupId() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["groupId"])
}

// The id of the project.
func (r *ProjectShareGroup) ProjectId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["projectId"])
}

// Input properties used for looking up and filtering ProjectShareGroup resources.
type ProjectShareGroupState struct {
	// One of five levels of access to the project.
	AccessLevel interface{}
	// The id of the group.
	GroupId interface{}
	// The id of the project.
	ProjectId interface{}
}

// The set of arguments for constructing a ProjectShareGroup resource.
type ProjectShareGroupArgs struct {
	// One of five levels of access to the project.
	AccessLevel interface{}
	// The id of the group.
	GroupId interface{}
	// The id of the project.
	ProjectId interface{}
}
