// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package gitlab

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// This resource allows you to create and manage labels for your GitLab groups.
// For further information on labels, consult the [gitlab
// documentation](https://docs.gitlab.com/ee/user/group/labels.htm).
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-gitlab/blob/master/website/docs/r/group_label.html.markdown.
type GroupLabel struct {
	s *pulumi.ResourceState
}

// NewGroupLabel registers a new resource with the given unique name, arguments, and options.
func NewGroupLabel(ctx *pulumi.Context,
	name string, args *GroupLabelArgs, opts ...pulumi.ResourceOpt) (*GroupLabel, error) {
	if args == nil || args.Color == nil {
		return nil, errors.New("missing required argument 'Color'")
	}
	if args == nil || args.Group == nil {
		return nil, errors.New("missing required argument 'Group'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["color"] = nil
		inputs["description"] = nil
		inputs["group"] = nil
		inputs["name"] = nil
	} else {
		inputs["color"] = args.Color
		inputs["description"] = args.Description
		inputs["group"] = args.Group
		inputs["name"] = args.Name
	}
	s, err := ctx.RegisterResource("gitlab:index/groupLabel:GroupLabel", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &GroupLabel{s: s}, nil
}

// GetGroupLabel gets an existing GroupLabel resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGroupLabel(ctx *pulumi.Context,
	name string, id pulumi.ID, state *GroupLabelState, opts ...pulumi.ResourceOpt) (*GroupLabel, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["color"] = state.Color
		inputs["description"] = state.Description
		inputs["group"] = state.Group
		inputs["name"] = state.Name
	}
	s, err := ctx.ReadResource("gitlab:index/groupLabel:GroupLabel", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &GroupLabel{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *GroupLabel) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *GroupLabel) ID() pulumi.IDOutput {
	return r.s.ID()
}

// The color of the label given in 6-digit hex notation with leading '#' sign (e.g. #FFAABB) or one of the [CSS color names](https://developer.mozilla.org/en-US/docs/Web/CSS/color_value#Color_keywords).
func (r *GroupLabel) Color() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["color"])
}

// The description of the label.
func (r *GroupLabel) Description() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["description"])
}

// The name or id of the group to add the label to.
func (r *GroupLabel) Group() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["group"])
}

// The name of the label.
func (r *GroupLabel) Name() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["name"])
}

// Input properties used for looking up and filtering GroupLabel resources.
type GroupLabelState struct {
	// The color of the label given in 6-digit hex notation with leading '#' sign (e.g. #FFAABB) or one of the [CSS color names](https://developer.mozilla.org/en-US/docs/Web/CSS/color_value#Color_keywords).
	Color interface{}
	// The description of the label.
	Description interface{}
	// The name or id of the group to add the label to.
	Group interface{}
	// The name of the label.
	Name interface{}
}

// The set of arguments for constructing a GroupLabel resource.
type GroupLabelArgs struct {
	// The color of the label given in 6-digit hex notation with leading '#' sign (e.g. #FFAABB) or one of the [CSS color names](https://developer.mozilla.org/en-US/docs/Web/CSS/color_value#Color_keywords).
	Color interface{}
	// The description of the label.
	Description interface{}
	// The name or id of the group to add the label to.
	Group interface{}
	// The name of the label.
	Name interface{}
}
