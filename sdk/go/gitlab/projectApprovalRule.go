// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package gitlab

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// ## # gitlab\_project\_approval\_rule
//
// This resource allows you to create and manage multiple approval rules for your GitLab
// projects. For further information on approval rules, consult the [gitlab
// documentation](https://docs.gitlab.com/ee/api/merge_request_approvals.html#project-level-mr-approvals).
//
// > This feature requires a GitLab Starter account or above.
//
// ## Import
//
// GitLab project approval rules can be imported using an id consisting of `project-id:rule-id`, e.g.
//
// ```sh
//  $ pulumi import gitlab:index/projectApprovalRule:ProjectApprovalRule example "12345:6"
// ```
type ProjectApprovalRule struct {
	pulumi.CustomResourceState

	// The number of approvals required for this rule.
	ApprovalsRequired pulumi.IntOutput `pulumi:"approvalsRequired"`
	// A list of group IDs who's members can approve of the merge request
	GroupIds pulumi.IntArrayOutput `pulumi:"groupIds"`
	// The name of the approval rule.
	Name pulumi.StringOutput `pulumi:"name"`
	// The name or id of the project to add the approval rules.
	Project pulumi.StringOutput `pulumi:"project"`
	// A list of specific User IDs to add to the list of approvers.
	UserIds pulumi.IntArrayOutput `pulumi:"userIds"`
}

// NewProjectApprovalRule registers a new resource with the given unique name, arguments, and options.
func NewProjectApprovalRule(ctx *pulumi.Context,
	name string, args *ProjectApprovalRuleArgs, opts ...pulumi.ResourceOption) (*ProjectApprovalRule, error) {
	if args == nil || args.ApprovalsRequired == nil {
		return nil, errors.New("missing required argument 'ApprovalsRequired'")
	}
	if args == nil || args.Project == nil {
		return nil, errors.New("missing required argument 'Project'")
	}
	if args == nil {
		args = &ProjectApprovalRuleArgs{}
	}
	var resource ProjectApprovalRule
	err := ctx.RegisterResource("gitlab:index/projectApprovalRule:ProjectApprovalRule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetProjectApprovalRule gets an existing ProjectApprovalRule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetProjectApprovalRule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ProjectApprovalRuleState, opts ...pulumi.ResourceOption) (*ProjectApprovalRule, error) {
	var resource ProjectApprovalRule
	err := ctx.ReadResource("gitlab:index/projectApprovalRule:ProjectApprovalRule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ProjectApprovalRule resources.
type projectApprovalRuleState struct {
	// The number of approvals required for this rule.
	ApprovalsRequired *int `pulumi:"approvalsRequired"`
	// A list of group IDs who's members can approve of the merge request
	GroupIds []int `pulumi:"groupIds"`
	// The name of the approval rule.
	Name *string `pulumi:"name"`
	// The name or id of the project to add the approval rules.
	Project *string `pulumi:"project"`
	// A list of specific User IDs to add to the list of approvers.
	UserIds []int `pulumi:"userIds"`
}

type ProjectApprovalRuleState struct {
	// The number of approvals required for this rule.
	ApprovalsRequired pulumi.IntPtrInput
	// A list of group IDs who's members can approve of the merge request
	GroupIds pulumi.IntArrayInput
	// The name of the approval rule.
	Name pulumi.StringPtrInput
	// The name or id of the project to add the approval rules.
	Project pulumi.StringPtrInput
	// A list of specific User IDs to add to the list of approvers.
	UserIds pulumi.IntArrayInput
}

func (ProjectApprovalRuleState) ElementType() reflect.Type {
	return reflect.TypeOf((*projectApprovalRuleState)(nil)).Elem()
}

type projectApprovalRuleArgs struct {
	// The number of approvals required for this rule.
	ApprovalsRequired int `pulumi:"approvalsRequired"`
	// A list of group IDs who's members can approve of the merge request
	GroupIds []int `pulumi:"groupIds"`
	// The name of the approval rule.
	Name *string `pulumi:"name"`
	// The name or id of the project to add the approval rules.
	Project string `pulumi:"project"`
	// A list of specific User IDs to add to the list of approvers.
	UserIds []int `pulumi:"userIds"`
}

// The set of arguments for constructing a ProjectApprovalRule resource.
type ProjectApprovalRuleArgs struct {
	// The number of approvals required for this rule.
	ApprovalsRequired pulumi.IntInput
	// A list of group IDs who's members can approve of the merge request
	GroupIds pulumi.IntArrayInput
	// The name of the approval rule.
	Name pulumi.StringPtrInput
	// The name or id of the project to add the approval rules.
	Project pulumi.StringInput
	// A list of specific User IDs to add to the list of approvers.
	UserIds pulumi.IntArrayInput
}

func (ProjectApprovalRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*projectApprovalRuleArgs)(nil)).Elem()
}

type ProjectApprovalRuleInput interface {
	pulumi.Input

	ToProjectApprovalRuleOutput() ProjectApprovalRuleOutput
	ToProjectApprovalRuleOutputWithContext(ctx context.Context) ProjectApprovalRuleOutput
}

func (ProjectApprovalRule) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectApprovalRule)(nil)).Elem()
}

func (i ProjectApprovalRule) ToProjectApprovalRuleOutput() ProjectApprovalRuleOutput {
	return i.ToProjectApprovalRuleOutputWithContext(context.Background())
}

func (i ProjectApprovalRule) ToProjectApprovalRuleOutputWithContext(ctx context.Context) ProjectApprovalRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectApprovalRuleOutput)
}

type ProjectApprovalRuleOutput struct {
	*pulumi.OutputState
}

func (ProjectApprovalRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectApprovalRuleOutput)(nil)).Elem()
}

func (o ProjectApprovalRuleOutput) ToProjectApprovalRuleOutput() ProjectApprovalRuleOutput {
	return o
}

func (o ProjectApprovalRuleOutput) ToProjectApprovalRuleOutputWithContext(ctx context.Context) ProjectApprovalRuleOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(ProjectApprovalRuleOutput{})
}
