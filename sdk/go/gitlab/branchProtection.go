// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package gitlab

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// This resource allows you to protect a specific branch by an access level so that the user with less access level cannot Merge/Push to the branch. GitLab EE features to protect by group or user are not supported.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-gitlab/blob/master/website/docs/r/branch_protection.html.markdown.
type BranchProtection struct {
	s *pulumi.ResourceState
}

// NewBranchProtection registers a new resource with the given unique name, arguments, and options.
func NewBranchProtection(ctx *pulumi.Context,
	name string, args *BranchProtectionArgs, opts ...pulumi.ResourceOpt) (*BranchProtection, error) {
	if args == nil || args.Branch == nil {
		return nil, errors.New("missing required argument 'Branch'")
	}
	if args == nil || args.MergeAccessLevel == nil {
		return nil, errors.New("missing required argument 'MergeAccessLevel'")
	}
	if args == nil || args.Project == nil {
		return nil, errors.New("missing required argument 'Project'")
	}
	if args == nil || args.PushAccessLevel == nil {
		return nil, errors.New("missing required argument 'PushAccessLevel'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["branch"] = nil
		inputs["mergeAccessLevel"] = nil
		inputs["project"] = nil
		inputs["pushAccessLevel"] = nil
	} else {
		inputs["branch"] = args.Branch
		inputs["mergeAccessLevel"] = args.MergeAccessLevel
		inputs["project"] = args.Project
		inputs["pushAccessLevel"] = args.PushAccessLevel
	}
	s, err := ctx.RegisterResource("gitlab:index/branchProtection:BranchProtection", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &BranchProtection{s: s}, nil
}

// GetBranchProtection gets an existing BranchProtection resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBranchProtection(ctx *pulumi.Context,
	name string, id pulumi.ID, state *BranchProtectionState, opts ...pulumi.ResourceOpt) (*BranchProtection, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["branch"] = state.Branch
		inputs["mergeAccessLevel"] = state.MergeAccessLevel
		inputs["project"] = state.Project
		inputs["pushAccessLevel"] = state.PushAccessLevel
	}
	s, err := ctx.ReadResource("gitlab:index/branchProtection:BranchProtection", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &BranchProtection{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *BranchProtection) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *BranchProtection) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// Name of the branch.
func (r *BranchProtection) Branch() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["branch"])
}

// One of five levels of access to the project.
func (r *BranchProtection) MergeAccessLevel() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["mergeAccessLevel"])
}

// The id of the project.
func (r *BranchProtection) Project() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["project"])
}

// One of five levels of access to the project.
func (r *BranchProtection) PushAccessLevel() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["pushAccessLevel"])
}

// Input properties used for looking up and filtering BranchProtection resources.
type BranchProtectionState struct {
	// Name of the branch.
	Branch interface{}
	// One of five levels of access to the project.
	MergeAccessLevel interface{}
	// The id of the project.
	Project interface{}
	// One of five levels of access to the project.
	PushAccessLevel interface{}
}

// The set of arguments for constructing a BranchProtection resource.
type BranchProtectionArgs struct {
	// Name of the branch.
	Branch interface{}
	// One of five levels of access to the project.
	MergeAccessLevel interface{}
	// The id of the project.
	Project interface{}
	// One of five levels of access to the project.
	PushAccessLevel interface{}
}
