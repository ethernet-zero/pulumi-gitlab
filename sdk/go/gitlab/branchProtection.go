// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package gitlab

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## # gitlab\_branch\_protection
//
// This resource allows you to protect a specific branch by an access level so that the user with less access level cannot Merge/Push to the branch.
//
// > The `allowedToPush`, `allowedToMerge` and `codeOwnerApprovalRequired` arguments require a GitLab Premium account or above.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-gitlab/sdk/v4/go/gitlab"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := gitlab.NewBranchProtection(ctx, "branchProtect", &gitlab.BranchProtectionArgs{
// 			AllowedToMerges: BranchProtectionAllowedToMergeArray{
// 				&BranchProtectionAllowedToMergeArgs{
// 					UserId: pulumi.Int(15),
// 				},
// 				&BranchProtectionAllowedToMergeArgs{
// 					UserId: pulumi.Int(37),
// 				},
// 			},
// 			AllowedToPushes: BranchProtectionAllowedToPushArray{
// 				&BranchProtectionAllowedToPushArgs{
// 					UserId: pulumi.Int(5),
// 				},
// 				&BranchProtectionAllowedToPushArgs{
// 					UserId: pulumi.Int(521),
// 				},
// 			},
// 			Branch:                    pulumi.String("BranchProtected"),
// 			CodeOwnerApprovalRequired: pulumi.Bool(true),
// 			MergeAccessLevel:          pulumi.String("developer"),
// 			Project:                   pulumi.String("12345"),
// 			PushAccessLevel:           pulumi.String("developer"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// GitLab project freeze periods can be imported using an id made up of `project_id:branch`, e.g.
//
// ```sh
//  $ pulumi import gitlab:index/branchProtection:BranchProtection BranchProtect "12345:main"
// ```
type BranchProtection struct {
	pulumi.CustomResourceState

	AllowedToMerges BranchProtectionAllowedToMergeArrayOutput `pulumi:"allowedToMerges"`
	AllowedToPushes BranchProtectionAllowedToPushArrayOutput  `pulumi:"allowedToPushes"`
	// Name of the branch.
	Branch pulumi.StringOutput `pulumi:"branch"`
	// The ID of the branch protection (not the branch name).
	BranchProtectionId pulumi.IntOutput `pulumi:"branchProtectionId"`
	// Bool, defaults to false. Can be set to true to require code owner approval before merging.
	CodeOwnerApprovalRequired pulumi.BoolPtrOutput `pulumi:"codeOwnerApprovalRequired"`
	// One of five levels of access to the project. Valid values are: `no one`, `developer`, `maintainer`, `admin`.
	MergeAccessLevel pulumi.StringOutput `pulumi:"mergeAccessLevel"`
	// The id of the project.
	Project pulumi.StringOutput `pulumi:"project"`
	// One of five levels of access to the project. Valid values are: `no one`, `developer`, `maintainer`, `admin`.
	PushAccessLevel pulumi.StringOutput `pulumi:"pushAccessLevel"`
}

// NewBranchProtection registers a new resource with the given unique name, arguments, and options.
func NewBranchProtection(ctx *pulumi.Context,
	name string, args *BranchProtectionArgs, opts ...pulumi.ResourceOption) (*BranchProtection, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Branch == nil {
		return nil, errors.New("invalid value for required argument 'Branch'")
	}
	if args.MergeAccessLevel == nil {
		return nil, errors.New("invalid value for required argument 'MergeAccessLevel'")
	}
	if args.Project == nil {
		return nil, errors.New("invalid value for required argument 'Project'")
	}
	if args.PushAccessLevel == nil {
		return nil, errors.New("invalid value for required argument 'PushAccessLevel'")
	}
	var resource BranchProtection
	err := ctx.RegisterResource("gitlab:index/branchProtection:BranchProtection", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBranchProtection gets an existing BranchProtection resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBranchProtection(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BranchProtectionState, opts ...pulumi.ResourceOption) (*BranchProtection, error) {
	var resource BranchProtection
	err := ctx.ReadResource("gitlab:index/branchProtection:BranchProtection", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering BranchProtection resources.
type branchProtectionState struct {
	AllowedToMerges []BranchProtectionAllowedToMerge `pulumi:"allowedToMerges"`
	AllowedToPushes []BranchProtectionAllowedToPush  `pulumi:"allowedToPushes"`
	// Name of the branch.
	Branch *string `pulumi:"branch"`
	// The ID of the branch protection (not the branch name).
	BranchProtectionId *int `pulumi:"branchProtectionId"`
	// Bool, defaults to false. Can be set to true to require code owner approval before merging.
	CodeOwnerApprovalRequired *bool `pulumi:"codeOwnerApprovalRequired"`
	// One of five levels of access to the project. Valid values are: `no one`, `developer`, `maintainer`, `admin`.
	MergeAccessLevel *string `pulumi:"mergeAccessLevel"`
	// The id of the project.
	Project *string `pulumi:"project"`
	// One of five levels of access to the project. Valid values are: `no one`, `developer`, `maintainer`, `admin`.
	PushAccessLevel *string `pulumi:"pushAccessLevel"`
}

type BranchProtectionState struct {
	AllowedToMerges BranchProtectionAllowedToMergeArrayInput
	AllowedToPushes BranchProtectionAllowedToPushArrayInput
	// Name of the branch.
	Branch pulumi.StringPtrInput
	// The ID of the branch protection (not the branch name).
	BranchProtectionId pulumi.IntPtrInput
	// Bool, defaults to false. Can be set to true to require code owner approval before merging.
	CodeOwnerApprovalRequired pulumi.BoolPtrInput
	// One of five levels of access to the project. Valid values are: `no one`, `developer`, `maintainer`, `admin`.
	MergeAccessLevel pulumi.StringPtrInput
	// The id of the project.
	Project pulumi.StringPtrInput
	// One of five levels of access to the project. Valid values are: `no one`, `developer`, `maintainer`, `admin`.
	PushAccessLevel pulumi.StringPtrInput
}

func (BranchProtectionState) ElementType() reflect.Type {
	return reflect.TypeOf((*branchProtectionState)(nil)).Elem()
}

type branchProtectionArgs struct {
	AllowedToMerges []BranchProtectionAllowedToMerge `pulumi:"allowedToMerges"`
	AllowedToPushes []BranchProtectionAllowedToPush  `pulumi:"allowedToPushes"`
	// Name of the branch.
	Branch string `pulumi:"branch"`
	// Bool, defaults to false. Can be set to true to require code owner approval before merging.
	CodeOwnerApprovalRequired *bool `pulumi:"codeOwnerApprovalRequired"`
	// One of five levels of access to the project. Valid values are: `no one`, `developer`, `maintainer`, `admin`.
	MergeAccessLevel string `pulumi:"mergeAccessLevel"`
	// The id of the project.
	Project string `pulumi:"project"`
	// One of five levels of access to the project. Valid values are: `no one`, `developer`, `maintainer`, `admin`.
	PushAccessLevel string `pulumi:"pushAccessLevel"`
}

// The set of arguments for constructing a BranchProtection resource.
type BranchProtectionArgs struct {
	AllowedToMerges BranchProtectionAllowedToMergeArrayInput
	AllowedToPushes BranchProtectionAllowedToPushArrayInput
	// Name of the branch.
	Branch pulumi.StringInput
	// Bool, defaults to false. Can be set to true to require code owner approval before merging.
	CodeOwnerApprovalRequired pulumi.BoolPtrInput
	// One of five levels of access to the project. Valid values are: `no one`, `developer`, `maintainer`, `admin`.
	MergeAccessLevel pulumi.StringInput
	// The id of the project.
	Project pulumi.StringInput
	// One of five levels of access to the project. Valid values are: `no one`, `developer`, `maintainer`, `admin`.
	PushAccessLevel pulumi.StringInput
}

func (BranchProtectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*branchProtectionArgs)(nil)).Elem()
}

type BranchProtectionInput interface {
	pulumi.Input

	ToBranchProtectionOutput() BranchProtectionOutput
	ToBranchProtectionOutputWithContext(ctx context.Context) BranchProtectionOutput
}

func (*BranchProtection) ElementType() reflect.Type {
	return reflect.TypeOf((*BranchProtection)(nil))
}

func (i *BranchProtection) ToBranchProtectionOutput() BranchProtectionOutput {
	return i.ToBranchProtectionOutputWithContext(context.Background())
}

func (i *BranchProtection) ToBranchProtectionOutputWithContext(ctx context.Context) BranchProtectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BranchProtectionOutput)
}

func (i *BranchProtection) ToBranchProtectionPtrOutput() BranchProtectionPtrOutput {
	return i.ToBranchProtectionPtrOutputWithContext(context.Background())
}

func (i *BranchProtection) ToBranchProtectionPtrOutputWithContext(ctx context.Context) BranchProtectionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BranchProtectionPtrOutput)
}

type BranchProtectionPtrInput interface {
	pulumi.Input

	ToBranchProtectionPtrOutput() BranchProtectionPtrOutput
	ToBranchProtectionPtrOutputWithContext(ctx context.Context) BranchProtectionPtrOutput
}

type branchProtectionPtrType BranchProtectionArgs

func (*branchProtectionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BranchProtection)(nil))
}

func (i *branchProtectionPtrType) ToBranchProtectionPtrOutput() BranchProtectionPtrOutput {
	return i.ToBranchProtectionPtrOutputWithContext(context.Background())
}

func (i *branchProtectionPtrType) ToBranchProtectionPtrOutputWithContext(ctx context.Context) BranchProtectionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BranchProtectionPtrOutput)
}

// BranchProtectionArrayInput is an input type that accepts BranchProtectionArray and BranchProtectionArrayOutput values.
// You can construct a concrete instance of `BranchProtectionArrayInput` via:
//
//          BranchProtectionArray{ BranchProtectionArgs{...} }
type BranchProtectionArrayInput interface {
	pulumi.Input

	ToBranchProtectionArrayOutput() BranchProtectionArrayOutput
	ToBranchProtectionArrayOutputWithContext(context.Context) BranchProtectionArrayOutput
}

type BranchProtectionArray []BranchProtectionInput

func (BranchProtectionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BranchProtection)(nil)).Elem()
}

func (i BranchProtectionArray) ToBranchProtectionArrayOutput() BranchProtectionArrayOutput {
	return i.ToBranchProtectionArrayOutputWithContext(context.Background())
}

func (i BranchProtectionArray) ToBranchProtectionArrayOutputWithContext(ctx context.Context) BranchProtectionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BranchProtectionArrayOutput)
}

// BranchProtectionMapInput is an input type that accepts BranchProtectionMap and BranchProtectionMapOutput values.
// You can construct a concrete instance of `BranchProtectionMapInput` via:
//
//          BranchProtectionMap{ "key": BranchProtectionArgs{...} }
type BranchProtectionMapInput interface {
	pulumi.Input

	ToBranchProtectionMapOutput() BranchProtectionMapOutput
	ToBranchProtectionMapOutputWithContext(context.Context) BranchProtectionMapOutput
}

type BranchProtectionMap map[string]BranchProtectionInput

func (BranchProtectionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BranchProtection)(nil)).Elem()
}

func (i BranchProtectionMap) ToBranchProtectionMapOutput() BranchProtectionMapOutput {
	return i.ToBranchProtectionMapOutputWithContext(context.Background())
}

func (i BranchProtectionMap) ToBranchProtectionMapOutputWithContext(ctx context.Context) BranchProtectionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BranchProtectionMapOutput)
}

type BranchProtectionOutput struct{ *pulumi.OutputState }

func (BranchProtectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BranchProtection)(nil))
}

func (o BranchProtectionOutput) ToBranchProtectionOutput() BranchProtectionOutput {
	return o
}

func (o BranchProtectionOutput) ToBranchProtectionOutputWithContext(ctx context.Context) BranchProtectionOutput {
	return o
}

func (o BranchProtectionOutput) ToBranchProtectionPtrOutput() BranchProtectionPtrOutput {
	return o.ToBranchProtectionPtrOutputWithContext(context.Background())
}

func (o BranchProtectionOutput) ToBranchProtectionPtrOutputWithContext(ctx context.Context) BranchProtectionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BranchProtection) *BranchProtection {
		return &v
	}).(BranchProtectionPtrOutput)
}

type BranchProtectionPtrOutput struct{ *pulumi.OutputState }

func (BranchProtectionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BranchProtection)(nil))
}

func (o BranchProtectionPtrOutput) ToBranchProtectionPtrOutput() BranchProtectionPtrOutput {
	return o
}

func (o BranchProtectionPtrOutput) ToBranchProtectionPtrOutputWithContext(ctx context.Context) BranchProtectionPtrOutput {
	return o
}

func (o BranchProtectionPtrOutput) Elem() BranchProtectionOutput {
	return o.ApplyT(func(v *BranchProtection) BranchProtection {
		if v != nil {
			return *v
		}
		var ret BranchProtection
		return ret
	}).(BranchProtectionOutput)
}

type BranchProtectionArrayOutput struct{ *pulumi.OutputState }

func (BranchProtectionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BranchProtection)(nil))
}

func (o BranchProtectionArrayOutput) ToBranchProtectionArrayOutput() BranchProtectionArrayOutput {
	return o
}

func (o BranchProtectionArrayOutput) ToBranchProtectionArrayOutputWithContext(ctx context.Context) BranchProtectionArrayOutput {
	return o
}

func (o BranchProtectionArrayOutput) Index(i pulumi.IntInput) BranchProtectionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BranchProtection {
		return vs[0].([]BranchProtection)[vs[1].(int)]
	}).(BranchProtectionOutput)
}

type BranchProtectionMapOutput struct{ *pulumi.OutputState }

func (BranchProtectionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]BranchProtection)(nil))
}

func (o BranchProtectionMapOutput) ToBranchProtectionMapOutput() BranchProtectionMapOutput {
	return o
}

func (o BranchProtectionMapOutput) ToBranchProtectionMapOutputWithContext(ctx context.Context) BranchProtectionMapOutput {
	return o
}

func (o BranchProtectionMapOutput) MapIndex(k pulumi.StringInput) BranchProtectionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) BranchProtection {
		return vs[0].(map[string]BranchProtection)[vs[1].(string)]
	}).(BranchProtectionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BranchProtectionInput)(nil)).Elem(), &BranchProtection{})
	pulumi.RegisterInputType(reflect.TypeOf((*BranchProtectionPtrInput)(nil)).Elem(), &BranchProtection{})
	pulumi.RegisterInputType(reflect.TypeOf((*BranchProtectionArrayInput)(nil)).Elem(), BranchProtectionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BranchProtectionMapInput)(nil)).Elem(), BranchProtectionMap{})
	pulumi.RegisterOutputType(BranchProtectionOutput{})
	pulumi.RegisterOutputType(BranchProtectionPtrOutput{})
	pulumi.RegisterOutputType(BranchProtectionArrayOutput{})
	pulumi.RegisterOutputType(BranchProtectionMapOutput{})
}
