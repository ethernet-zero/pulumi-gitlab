// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package gitlab

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// This resource allows you to create and manage CI/CD variables for your GitLab instance.
// For further information on variables, consult the [gitlab
// documentation](https://docs.gitlab.com/ee/api/instance_level_ci_variables.html).
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-gitlab/sdk/v3/go/gitlab/"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := gitlab.NewInstanceVariable(ctx, "example", &gitlab.InstanceVariableArgs{
// 			Key:       pulumi.String("instance_variable_key"),
// 			Masked:    pulumi.Bool(false),
// 			Protected: pulumi.Bool(false),
// 			Value:     pulumi.String("instance_variable_value"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// GitLab instance variables can be imported using an id made up of `variablename`, e.g. console
//
// ```sh
//  $ pulumi import gitlab:index/instanceVariable:InstanceVariable example instance_variable_key
// ```
type InstanceVariable struct {
	pulumi.CustomResourceState

	// The name of the variable.
	Key pulumi.StringOutput `pulumi:"key"`
	// If set to `true`, the value of the variable will be hidden in job logs. The value must meet the [masking requirements](https://docs.gitlab.com/ee/ci/variables/#masked-variable-requirements). Defaults to `false`.
	Masked pulumi.BoolPtrOutput `pulumi:"masked"`
	// If set to `true`, the variable will be passed only to pipelines running on protected branches and tags. Defaults to `false`.
	Protected pulumi.BoolPtrOutput `pulumi:"protected"`
	// The value of the variable.
	Value pulumi.StringOutput `pulumi:"value"`
	// The type of a variable. Available types are: envVar (default) and file.
	VariableType pulumi.StringPtrOutput `pulumi:"variableType"`
}

// NewInstanceVariable registers a new resource with the given unique name, arguments, and options.
func NewInstanceVariable(ctx *pulumi.Context,
	name string, args *InstanceVariableArgs, opts ...pulumi.ResourceOption) (*InstanceVariable, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Key == nil {
		return nil, errors.New("invalid value for required argument 'Key'")
	}
	if args.Value == nil {
		return nil, errors.New("invalid value for required argument 'Value'")
	}
	var resource InstanceVariable
	err := ctx.RegisterResource("gitlab:index/instanceVariable:InstanceVariable", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetInstanceVariable gets an existing InstanceVariable resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetInstanceVariable(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *InstanceVariableState, opts ...pulumi.ResourceOption) (*InstanceVariable, error) {
	var resource InstanceVariable
	err := ctx.ReadResource("gitlab:index/instanceVariable:InstanceVariable", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering InstanceVariable resources.
type instanceVariableState struct {
	// The name of the variable.
	Key *string `pulumi:"key"`
	// If set to `true`, the value of the variable will be hidden in job logs. The value must meet the [masking requirements](https://docs.gitlab.com/ee/ci/variables/#masked-variable-requirements). Defaults to `false`.
	Masked *bool `pulumi:"masked"`
	// If set to `true`, the variable will be passed only to pipelines running on protected branches and tags. Defaults to `false`.
	Protected *bool `pulumi:"protected"`
	// The value of the variable.
	Value *string `pulumi:"value"`
	// The type of a variable. Available types are: envVar (default) and file.
	VariableType *string `pulumi:"variableType"`
}

type InstanceVariableState struct {
	// The name of the variable.
	Key pulumi.StringPtrInput
	// If set to `true`, the value of the variable will be hidden in job logs. The value must meet the [masking requirements](https://docs.gitlab.com/ee/ci/variables/#masked-variable-requirements). Defaults to `false`.
	Masked pulumi.BoolPtrInput
	// If set to `true`, the variable will be passed only to pipelines running on protected branches and tags. Defaults to `false`.
	Protected pulumi.BoolPtrInput
	// The value of the variable.
	Value pulumi.StringPtrInput
	// The type of a variable. Available types are: envVar (default) and file.
	VariableType pulumi.StringPtrInput
}

func (InstanceVariableState) ElementType() reflect.Type {
	return reflect.TypeOf((*instanceVariableState)(nil)).Elem()
}

type instanceVariableArgs struct {
	// The name of the variable.
	Key string `pulumi:"key"`
	// If set to `true`, the value of the variable will be hidden in job logs. The value must meet the [masking requirements](https://docs.gitlab.com/ee/ci/variables/#masked-variable-requirements). Defaults to `false`.
	Masked *bool `pulumi:"masked"`
	// If set to `true`, the variable will be passed only to pipelines running on protected branches and tags. Defaults to `false`.
	Protected *bool `pulumi:"protected"`
	// The value of the variable.
	Value string `pulumi:"value"`
	// The type of a variable. Available types are: envVar (default) and file.
	VariableType *string `pulumi:"variableType"`
}

// The set of arguments for constructing a InstanceVariable resource.
type InstanceVariableArgs struct {
	// The name of the variable.
	Key pulumi.StringInput
	// If set to `true`, the value of the variable will be hidden in job logs. The value must meet the [masking requirements](https://docs.gitlab.com/ee/ci/variables/#masked-variable-requirements). Defaults to `false`.
	Masked pulumi.BoolPtrInput
	// If set to `true`, the variable will be passed only to pipelines running on protected branches and tags. Defaults to `false`.
	Protected pulumi.BoolPtrInput
	// The value of the variable.
	Value pulumi.StringInput
	// The type of a variable. Available types are: envVar (default) and file.
	VariableType pulumi.StringPtrInput
}

func (InstanceVariableArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*instanceVariableArgs)(nil)).Elem()
}

type InstanceVariableInput interface {
	pulumi.Input

	ToInstanceVariableOutput() InstanceVariableOutput
	ToInstanceVariableOutputWithContext(ctx context.Context) InstanceVariableOutput
}

func (*InstanceVariable) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceVariable)(nil))
}

func (i *InstanceVariable) ToInstanceVariableOutput() InstanceVariableOutput {
	return i.ToInstanceVariableOutputWithContext(context.Background())
}

func (i *InstanceVariable) ToInstanceVariableOutputWithContext(ctx context.Context) InstanceVariableOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceVariableOutput)
}

type InstanceVariableOutput struct {
	*pulumi.OutputState
}

func (InstanceVariableOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceVariable)(nil))
}

func (o InstanceVariableOutput) ToInstanceVariableOutput() InstanceVariableOutput {
	return o
}

func (o InstanceVariableOutput) ToInstanceVariableOutputWithContext(ctx context.Context) InstanceVariableOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(InstanceVariableOutput{})
}
