// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package gitlab

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type BranchProtectionAllowedToMerge struct {
	AccessLevel            *string `pulumi:"accessLevel"`
	AccessLevelDescription *string `pulumi:"accessLevelDescription"`
	// The ID of a GitLab group allowed to perform the relevant action. Mutually exclusive with `userId`.
	GroupId *int `pulumi:"groupId"`
	// The ID of a GitLab user allowed to perform the relevant action. Mutually exclusive with `groupId`.
	UserId *int `pulumi:"userId"`
}

// BranchProtectionAllowedToMergeInput is an input type that accepts BranchProtectionAllowedToMergeArgs and BranchProtectionAllowedToMergeOutput values.
// You can construct a concrete instance of `BranchProtectionAllowedToMergeInput` via:
//
//          BranchProtectionAllowedToMergeArgs{...}
type BranchProtectionAllowedToMergeInput interface {
	pulumi.Input

	ToBranchProtectionAllowedToMergeOutput() BranchProtectionAllowedToMergeOutput
	ToBranchProtectionAllowedToMergeOutputWithContext(context.Context) BranchProtectionAllowedToMergeOutput
}

type BranchProtectionAllowedToMergeArgs struct {
	AccessLevel            pulumi.StringPtrInput `pulumi:"accessLevel"`
	AccessLevelDescription pulumi.StringPtrInput `pulumi:"accessLevelDescription"`
	// The ID of a GitLab group allowed to perform the relevant action. Mutually exclusive with `userId`.
	GroupId pulumi.IntPtrInput `pulumi:"groupId"`
	// The ID of a GitLab user allowed to perform the relevant action. Mutually exclusive with `groupId`.
	UserId pulumi.IntPtrInput `pulumi:"userId"`
}

func (BranchProtectionAllowedToMergeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BranchProtectionAllowedToMerge)(nil)).Elem()
}

func (i BranchProtectionAllowedToMergeArgs) ToBranchProtectionAllowedToMergeOutput() BranchProtectionAllowedToMergeOutput {
	return i.ToBranchProtectionAllowedToMergeOutputWithContext(context.Background())
}

func (i BranchProtectionAllowedToMergeArgs) ToBranchProtectionAllowedToMergeOutputWithContext(ctx context.Context) BranchProtectionAllowedToMergeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BranchProtectionAllowedToMergeOutput)
}

// BranchProtectionAllowedToMergeArrayInput is an input type that accepts BranchProtectionAllowedToMergeArray and BranchProtectionAllowedToMergeArrayOutput values.
// You can construct a concrete instance of `BranchProtectionAllowedToMergeArrayInput` via:
//
//          BranchProtectionAllowedToMergeArray{ BranchProtectionAllowedToMergeArgs{...} }
type BranchProtectionAllowedToMergeArrayInput interface {
	pulumi.Input

	ToBranchProtectionAllowedToMergeArrayOutput() BranchProtectionAllowedToMergeArrayOutput
	ToBranchProtectionAllowedToMergeArrayOutputWithContext(context.Context) BranchProtectionAllowedToMergeArrayOutput
}

type BranchProtectionAllowedToMergeArray []BranchProtectionAllowedToMergeInput

func (BranchProtectionAllowedToMergeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BranchProtectionAllowedToMerge)(nil)).Elem()
}

func (i BranchProtectionAllowedToMergeArray) ToBranchProtectionAllowedToMergeArrayOutput() BranchProtectionAllowedToMergeArrayOutput {
	return i.ToBranchProtectionAllowedToMergeArrayOutputWithContext(context.Background())
}

func (i BranchProtectionAllowedToMergeArray) ToBranchProtectionAllowedToMergeArrayOutputWithContext(ctx context.Context) BranchProtectionAllowedToMergeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BranchProtectionAllowedToMergeArrayOutput)
}

type BranchProtectionAllowedToMergeOutput struct{ *pulumi.OutputState }

func (BranchProtectionAllowedToMergeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BranchProtectionAllowedToMerge)(nil)).Elem()
}

func (o BranchProtectionAllowedToMergeOutput) ToBranchProtectionAllowedToMergeOutput() BranchProtectionAllowedToMergeOutput {
	return o
}

func (o BranchProtectionAllowedToMergeOutput) ToBranchProtectionAllowedToMergeOutputWithContext(ctx context.Context) BranchProtectionAllowedToMergeOutput {
	return o
}

func (o BranchProtectionAllowedToMergeOutput) AccessLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BranchProtectionAllowedToMerge) *string { return v.AccessLevel }).(pulumi.StringPtrOutput)
}

func (o BranchProtectionAllowedToMergeOutput) AccessLevelDescription() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BranchProtectionAllowedToMerge) *string { return v.AccessLevelDescription }).(pulumi.StringPtrOutput)
}

// The ID of a GitLab group allowed to perform the relevant action. Mutually exclusive with `userId`.
func (o BranchProtectionAllowedToMergeOutput) GroupId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v BranchProtectionAllowedToMerge) *int { return v.GroupId }).(pulumi.IntPtrOutput)
}

// The ID of a GitLab user allowed to perform the relevant action. Mutually exclusive with `groupId`.
func (o BranchProtectionAllowedToMergeOutput) UserId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v BranchProtectionAllowedToMerge) *int { return v.UserId }).(pulumi.IntPtrOutput)
}

type BranchProtectionAllowedToMergeArrayOutput struct{ *pulumi.OutputState }

func (BranchProtectionAllowedToMergeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BranchProtectionAllowedToMerge)(nil)).Elem()
}

func (o BranchProtectionAllowedToMergeArrayOutput) ToBranchProtectionAllowedToMergeArrayOutput() BranchProtectionAllowedToMergeArrayOutput {
	return o
}

func (o BranchProtectionAllowedToMergeArrayOutput) ToBranchProtectionAllowedToMergeArrayOutputWithContext(ctx context.Context) BranchProtectionAllowedToMergeArrayOutput {
	return o
}

func (o BranchProtectionAllowedToMergeArrayOutput) Index(i pulumi.IntInput) BranchProtectionAllowedToMergeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BranchProtectionAllowedToMerge {
		return vs[0].([]BranchProtectionAllowedToMerge)[vs[1].(int)]
	}).(BranchProtectionAllowedToMergeOutput)
}

type BranchProtectionAllowedToPush struct {
	AccessLevel            *string `pulumi:"accessLevel"`
	AccessLevelDescription *string `pulumi:"accessLevelDescription"`
	// The ID of a GitLab group allowed to perform the relevant action. Mutually exclusive with `userId`.
	GroupId *int `pulumi:"groupId"`
	// The ID of a GitLab user allowed to perform the relevant action. Mutually exclusive with `groupId`.
	UserId *int `pulumi:"userId"`
}

// BranchProtectionAllowedToPushInput is an input type that accepts BranchProtectionAllowedToPushArgs and BranchProtectionAllowedToPushOutput values.
// You can construct a concrete instance of `BranchProtectionAllowedToPushInput` via:
//
//          BranchProtectionAllowedToPushArgs{...}
type BranchProtectionAllowedToPushInput interface {
	pulumi.Input

	ToBranchProtectionAllowedToPushOutput() BranchProtectionAllowedToPushOutput
	ToBranchProtectionAllowedToPushOutputWithContext(context.Context) BranchProtectionAllowedToPushOutput
}

type BranchProtectionAllowedToPushArgs struct {
	AccessLevel            pulumi.StringPtrInput `pulumi:"accessLevel"`
	AccessLevelDescription pulumi.StringPtrInput `pulumi:"accessLevelDescription"`
	// The ID of a GitLab group allowed to perform the relevant action. Mutually exclusive with `userId`.
	GroupId pulumi.IntPtrInput `pulumi:"groupId"`
	// The ID of a GitLab user allowed to perform the relevant action. Mutually exclusive with `groupId`.
	UserId pulumi.IntPtrInput `pulumi:"userId"`
}

func (BranchProtectionAllowedToPushArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BranchProtectionAllowedToPush)(nil)).Elem()
}

func (i BranchProtectionAllowedToPushArgs) ToBranchProtectionAllowedToPushOutput() BranchProtectionAllowedToPushOutput {
	return i.ToBranchProtectionAllowedToPushOutputWithContext(context.Background())
}

func (i BranchProtectionAllowedToPushArgs) ToBranchProtectionAllowedToPushOutputWithContext(ctx context.Context) BranchProtectionAllowedToPushOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BranchProtectionAllowedToPushOutput)
}

// BranchProtectionAllowedToPushArrayInput is an input type that accepts BranchProtectionAllowedToPushArray and BranchProtectionAllowedToPushArrayOutput values.
// You can construct a concrete instance of `BranchProtectionAllowedToPushArrayInput` via:
//
//          BranchProtectionAllowedToPushArray{ BranchProtectionAllowedToPushArgs{...} }
type BranchProtectionAllowedToPushArrayInput interface {
	pulumi.Input

	ToBranchProtectionAllowedToPushArrayOutput() BranchProtectionAllowedToPushArrayOutput
	ToBranchProtectionAllowedToPushArrayOutputWithContext(context.Context) BranchProtectionAllowedToPushArrayOutput
}

type BranchProtectionAllowedToPushArray []BranchProtectionAllowedToPushInput

func (BranchProtectionAllowedToPushArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BranchProtectionAllowedToPush)(nil)).Elem()
}

func (i BranchProtectionAllowedToPushArray) ToBranchProtectionAllowedToPushArrayOutput() BranchProtectionAllowedToPushArrayOutput {
	return i.ToBranchProtectionAllowedToPushArrayOutputWithContext(context.Background())
}

func (i BranchProtectionAllowedToPushArray) ToBranchProtectionAllowedToPushArrayOutputWithContext(ctx context.Context) BranchProtectionAllowedToPushArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BranchProtectionAllowedToPushArrayOutput)
}

type BranchProtectionAllowedToPushOutput struct{ *pulumi.OutputState }

func (BranchProtectionAllowedToPushOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BranchProtectionAllowedToPush)(nil)).Elem()
}

func (o BranchProtectionAllowedToPushOutput) ToBranchProtectionAllowedToPushOutput() BranchProtectionAllowedToPushOutput {
	return o
}

func (o BranchProtectionAllowedToPushOutput) ToBranchProtectionAllowedToPushOutputWithContext(ctx context.Context) BranchProtectionAllowedToPushOutput {
	return o
}

func (o BranchProtectionAllowedToPushOutput) AccessLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BranchProtectionAllowedToPush) *string { return v.AccessLevel }).(pulumi.StringPtrOutput)
}

func (o BranchProtectionAllowedToPushOutput) AccessLevelDescription() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BranchProtectionAllowedToPush) *string { return v.AccessLevelDescription }).(pulumi.StringPtrOutput)
}

// The ID of a GitLab group allowed to perform the relevant action. Mutually exclusive with `userId`.
func (o BranchProtectionAllowedToPushOutput) GroupId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v BranchProtectionAllowedToPush) *int { return v.GroupId }).(pulumi.IntPtrOutput)
}

// The ID of a GitLab user allowed to perform the relevant action. Mutually exclusive with `groupId`.
func (o BranchProtectionAllowedToPushOutput) UserId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v BranchProtectionAllowedToPush) *int { return v.UserId }).(pulumi.IntPtrOutput)
}

type BranchProtectionAllowedToPushArrayOutput struct{ *pulumi.OutputState }

func (BranchProtectionAllowedToPushArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BranchProtectionAllowedToPush)(nil)).Elem()
}

func (o BranchProtectionAllowedToPushArrayOutput) ToBranchProtectionAllowedToPushArrayOutput() BranchProtectionAllowedToPushArrayOutput {
	return o
}

func (o BranchProtectionAllowedToPushArrayOutput) ToBranchProtectionAllowedToPushArrayOutputWithContext(ctx context.Context) BranchProtectionAllowedToPushArrayOutput {
	return o
}

func (o BranchProtectionAllowedToPushArrayOutput) Index(i pulumi.IntInput) BranchProtectionAllowedToPushOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BranchProtectionAllowedToPush {
		return vs[0].([]BranchProtectionAllowedToPush)[vs[1].(int)]
	}).(BranchProtectionAllowedToPushOutput)
}

type ProjectPushRules struct {
	// All commit author emails must match this regex, e.g. `@my-company.com$`.
	AuthorEmailRegex *string `pulumi:"authorEmailRegex"`
	// All branch names must match this regex, e.g. `(feature|hotfix)\/*`.
	BranchNameRegex *string `pulumi:"branchNameRegex"`
	// Users can only push commits to this repository that were committed with one of their own verified emails.
	CommitCommitterCheck *bool `pulumi:"commitCommitterCheck"`
	// No commit message is allowed to match this regex, for example `ssh\:\/\/`.
	CommitMessageNegativeRegex *string `pulumi:"commitMessageNegativeRegex"`
	// All commit messages must match this regex, e.g. `Fixed \d+\..*`.
	CommitMessageRegex *string `pulumi:"commitMessageRegex"`
	// Deny deleting a tag.
	DenyDeleteTag *bool `pulumi:"denyDeleteTag"`
	// All commited filenames must not match this regex, e.g. `(jar|exe)$`.
	FileNameRegex *string `pulumi:"fileNameRegex"`
	// Maximum file size (MB).
	MaxFileSize *int `pulumi:"maxFileSize"`
	// Restrict commits by author (email) to existing GitLab users.
	MemberCheck *bool `pulumi:"memberCheck"`
	// GitLab will reject any files that are likely to contain secrets.
	PreventSecrets *bool `pulumi:"preventSecrets"`
	// Reject commit when it’s not signed through GPG.
	RejectUnsignedCommits *bool `pulumi:"rejectUnsignedCommits"`
}

// ProjectPushRulesInput is an input type that accepts ProjectPushRulesArgs and ProjectPushRulesOutput values.
// You can construct a concrete instance of `ProjectPushRulesInput` via:
//
//          ProjectPushRulesArgs{...}
type ProjectPushRulesInput interface {
	pulumi.Input

	ToProjectPushRulesOutput() ProjectPushRulesOutput
	ToProjectPushRulesOutputWithContext(context.Context) ProjectPushRulesOutput
}

type ProjectPushRulesArgs struct {
	// All commit author emails must match this regex, e.g. `@my-company.com$`.
	AuthorEmailRegex pulumi.StringPtrInput `pulumi:"authorEmailRegex"`
	// All branch names must match this regex, e.g. `(feature|hotfix)\/*`.
	BranchNameRegex pulumi.StringPtrInput `pulumi:"branchNameRegex"`
	// Users can only push commits to this repository that were committed with one of their own verified emails.
	CommitCommitterCheck pulumi.BoolPtrInput `pulumi:"commitCommitterCheck"`
	// No commit message is allowed to match this regex, for example `ssh\:\/\/`.
	CommitMessageNegativeRegex pulumi.StringPtrInput `pulumi:"commitMessageNegativeRegex"`
	// All commit messages must match this regex, e.g. `Fixed \d+\..*`.
	CommitMessageRegex pulumi.StringPtrInput `pulumi:"commitMessageRegex"`
	// Deny deleting a tag.
	DenyDeleteTag pulumi.BoolPtrInput `pulumi:"denyDeleteTag"`
	// All commited filenames must not match this regex, e.g. `(jar|exe)$`.
	FileNameRegex pulumi.StringPtrInput `pulumi:"fileNameRegex"`
	// Maximum file size (MB).
	MaxFileSize pulumi.IntPtrInput `pulumi:"maxFileSize"`
	// Restrict commits by author (email) to existing GitLab users.
	MemberCheck pulumi.BoolPtrInput `pulumi:"memberCheck"`
	// GitLab will reject any files that are likely to contain secrets.
	PreventSecrets pulumi.BoolPtrInput `pulumi:"preventSecrets"`
	// Reject commit when it’s not signed through GPG.
	RejectUnsignedCommits pulumi.BoolPtrInput `pulumi:"rejectUnsignedCommits"`
}

func (ProjectPushRulesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectPushRules)(nil)).Elem()
}

func (i ProjectPushRulesArgs) ToProjectPushRulesOutput() ProjectPushRulesOutput {
	return i.ToProjectPushRulesOutputWithContext(context.Background())
}

func (i ProjectPushRulesArgs) ToProjectPushRulesOutputWithContext(ctx context.Context) ProjectPushRulesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectPushRulesOutput)
}

func (i ProjectPushRulesArgs) ToProjectPushRulesPtrOutput() ProjectPushRulesPtrOutput {
	return i.ToProjectPushRulesPtrOutputWithContext(context.Background())
}

func (i ProjectPushRulesArgs) ToProjectPushRulesPtrOutputWithContext(ctx context.Context) ProjectPushRulesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectPushRulesOutput).ToProjectPushRulesPtrOutputWithContext(ctx)
}

// ProjectPushRulesPtrInput is an input type that accepts ProjectPushRulesArgs, ProjectPushRulesPtr and ProjectPushRulesPtrOutput values.
// You can construct a concrete instance of `ProjectPushRulesPtrInput` via:
//
//          ProjectPushRulesArgs{...}
//
//  or:
//
//          nil
type ProjectPushRulesPtrInput interface {
	pulumi.Input

	ToProjectPushRulesPtrOutput() ProjectPushRulesPtrOutput
	ToProjectPushRulesPtrOutputWithContext(context.Context) ProjectPushRulesPtrOutput
}

type projectPushRulesPtrType ProjectPushRulesArgs

func ProjectPushRulesPtr(v *ProjectPushRulesArgs) ProjectPushRulesPtrInput {
	return (*projectPushRulesPtrType)(v)
}

func (*projectPushRulesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectPushRules)(nil)).Elem()
}

func (i *projectPushRulesPtrType) ToProjectPushRulesPtrOutput() ProjectPushRulesPtrOutput {
	return i.ToProjectPushRulesPtrOutputWithContext(context.Background())
}

func (i *projectPushRulesPtrType) ToProjectPushRulesPtrOutputWithContext(ctx context.Context) ProjectPushRulesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectPushRulesPtrOutput)
}

type ProjectPushRulesOutput struct{ *pulumi.OutputState }

func (ProjectPushRulesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectPushRules)(nil)).Elem()
}

func (o ProjectPushRulesOutput) ToProjectPushRulesOutput() ProjectPushRulesOutput {
	return o
}

func (o ProjectPushRulesOutput) ToProjectPushRulesOutputWithContext(ctx context.Context) ProjectPushRulesOutput {
	return o
}

func (o ProjectPushRulesOutput) ToProjectPushRulesPtrOutput() ProjectPushRulesPtrOutput {
	return o.ToProjectPushRulesPtrOutputWithContext(context.Background())
}

func (o ProjectPushRulesOutput) ToProjectPushRulesPtrOutputWithContext(ctx context.Context) ProjectPushRulesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ProjectPushRules) *ProjectPushRules {
		return &v
	}).(ProjectPushRulesPtrOutput)
}

// All commit author emails must match this regex, e.g. `@my-company.com$`.
func (o ProjectPushRulesOutput) AuthorEmailRegex() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectPushRules) *string { return v.AuthorEmailRegex }).(pulumi.StringPtrOutput)
}

// All branch names must match this regex, e.g. `(feature|hotfix)\/*`.
func (o ProjectPushRulesOutput) BranchNameRegex() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectPushRules) *string { return v.BranchNameRegex }).(pulumi.StringPtrOutput)
}

// Users can only push commits to this repository that were committed with one of their own verified emails.
func (o ProjectPushRulesOutput) CommitCommitterCheck() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ProjectPushRules) *bool { return v.CommitCommitterCheck }).(pulumi.BoolPtrOutput)
}

// No commit message is allowed to match this regex, for example `ssh\:\/\/`.
func (o ProjectPushRulesOutput) CommitMessageNegativeRegex() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectPushRules) *string { return v.CommitMessageNegativeRegex }).(pulumi.StringPtrOutput)
}

// All commit messages must match this regex, e.g. `Fixed \d+\..*`.
func (o ProjectPushRulesOutput) CommitMessageRegex() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectPushRules) *string { return v.CommitMessageRegex }).(pulumi.StringPtrOutput)
}

// Deny deleting a tag.
func (o ProjectPushRulesOutput) DenyDeleteTag() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ProjectPushRules) *bool { return v.DenyDeleteTag }).(pulumi.BoolPtrOutput)
}

// All commited filenames must not match this regex, e.g. `(jar|exe)$`.
func (o ProjectPushRulesOutput) FileNameRegex() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectPushRules) *string { return v.FileNameRegex }).(pulumi.StringPtrOutput)
}

// Maximum file size (MB).
func (o ProjectPushRulesOutput) MaxFileSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ProjectPushRules) *int { return v.MaxFileSize }).(pulumi.IntPtrOutput)
}

// Restrict commits by author (email) to existing GitLab users.
func (o ProjectPushRulesOutput) MemberCheck() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ProjectPushRules) *bool { return v.MemberCheck }).(pulumi.BoolPtrOutput)
}

// GitLab will reject any files that are likely to contain secrets.
func (o ProjectPushRulesOutput) PreventSecrets() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ProjectPushRules) *bool { return v.PreventSecrets }).(pulumi.BoolPtrOutput)
}

// Reject commit when it’s not signed through GPG.
func (o ProjectPushRulesOutput) RejectUnsignedCommits() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ProjectPushRules) *bool { return v.RejectUnsignedCommits }).(pulumi.BoolPtrOutput)
}

type ProjectPushRulesPtrOutput struct{ *pulumi.OutputState }

func (ProjectPushRulesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectPushRules)(nil)).Elem()
}

func (o ProjectPushRulesPtrOutput) ToProjectPushRulesPtrOutput() ProjectPushRulesPtrOutput {
	return o
}

func (o ProjectPushRulesPtrOutput) ToProjectPushRulesPtrOutputWithContext(ctx context.Context) ProjectPushRulesPtrOutput {
	return o
}

func (o ProjectPushRulesPtrOutput) Elem() ProjectPushRulesOutput {
	return o.ApplyT(func(v *ProjectPushRules) ProjectPushRules {
		if v != nil {
			return *v
		}
		var ret ProjectPushRules
		return ret
	}).(ProjectPushRulesOutput)
}

// All commit author emails must match this regex, e.g. `@my-company.com$`.
func (o ProjectPushRulesPtrOutput) AuthorEmailRegex() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectPushRules) *string {
		if v == nil {
			return nil
		}
		return v.AuthorEmailRegex
	}).(pulumi.StringPtrOutput)
}

// All branch names must match this regex, e.g. `(feature|hotfix)\/*`.
func (o ProjectPushRulesPtrOutput) BranchNameRegex() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectPushRules) *string {
		if v == nil {
			return nil
		}
		return v.BranchNameRegex
	}).(pulumi.StringPtrOutput)
}

// Users can only push commits to this repository that were committed with one of their own verified emails.
func (o ProjectPushRulesPtrOutput) CommitCommitterCheck() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ProjectPushRules) *bool {
		if v == nil {
			return nil
		}
		return v.CommitCommitterCheck
	}).(pulumi.BoolPtrOutput)
}

// No commit message is allowed to match this regex, for example `ssh\:\/\/`.
func (o ProjectPushRulesPtrOutput) CommitMessageNegativeRegex() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectPushRules) *string {
		if v == nil {
			return nil
		}
		return v.CommitMessageNegativeRegex
	}).(pulumi.StringPtrOutput)
}

// All commit messages must match this regex, e.g. `Fixed \d+\..*`.
func (o ProjectPushRulesPtrOutput) CommitMessageRegex() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectPushRules) *string {
		if v == nil {
			return nil
		}
		return v.CommitMessageRegex
	}).(pulumi.StringPtrOutput)
}

// Deny deleting a tag.
func (o ProjectPushRulesPtrOutput) DenyDeleteTag() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ProjectPushRules) *bool {
		if v == nil {
			return nil
		}
		return v.DenyDeleteTag
	}).(pulumi.BoolPtrOutput)
}

// All commited filenames must not match this regex, e.g. `(jar|exe)$`.
func (o ProjectPushRulesPtrOutput) FileNameRegex() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectPushRules) *string {
		if v == nil {
			return nil
		}
		return v.FileNameRegex
	}).(pulumi.StringPtrOutput)
}

// Maximum file size (MB).
func (o ProjectPushRulesPtrOutput) MaxFileSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ProjectPushRules) *int {
		if v == nil {
			return nil
		}
		return v.MaxFileSize
	}).(pulumi.IntPtrOutput)
}

// Restrict commits by author (email) to existing GitLab users.
func (o ProjectPushRulesPtrOutput) MemberCheck() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ProjectPushRules) *bool {
		if v == nil {
			return nil
		}
		return v.MemberCheck
	}).(pulumi.BoolPtrOutput)
}

// GitLab will reject any files that are likely to contain secrets.
func (o ProjectPushRulesPtrOutput) PreventSecrets() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ProjectPushRules) *bool {
		if v == nil {
			return nil
		}
		return v.PreventSecrets
	}).(pulumi.BoolPtrOutput)
}

// Reject commit when it’s not signed through GPG.
func (o ProjectPushRulesPtrOutput) RejectUnsignedCommits() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ProjectPushRules) *bool {
		if v == nil {
			return nil
		}
		return v.RejectUnsignedCommits
	}).(pulumi.BoolPtrOutput)
}

type GetGroupMembershipMember struct {
	// Only return members with the desired access level. Acceptable values are: `guest`, `reporter`, `developer`, `maintainer`, `owner`.
	AccessLevel string `pulumi:"accessLevel"`
	// The avatar URL of the user.
	AvatarUrl string `pulumi:"avatarUrl"`
	// Expiration date for the group membership.
	ExpiresAt string `pulumi:"expiresAt"`
	// The unique id assigned to the user by the gitlab server.
	Id int `pulumi:"id"`
	// The name of the user.
	Name string `pulumi:"name"`
	// Whether the user is active or blocked.
	State string `pulumi:"state"`
	// The username of the user.
	Username string `pulumi:"username"`
	// User's website URL.
	WebUrl string `pulumi:"webUrl"`
}

// GetGroupMembershipMemberInput is an input type that accepts GetGroupMembershipMemberArgs and GetGroupMembershipMemberOutput values.
// You can construct a concrete instance of `GetGroupMembershipMemberInput` via:
//
//          GetGroupMembershipMemberArgs{...}
type GetGroupMembershipMemberInput interface {
	pulumi.Input

	ToGetGroupMembershipMemberOutput() GetGroupMembershipMemberOutput
	ToGetGroupMembershipMemberOutputWithContext(context.Context) GetGroupMembershipMemberOutput
}

type GetGroupMembershipMemberArgs struct {
	// Only return members with the desired access level. Acceptable values are: `guest`, `reporter`, `developer`, `maintainer`, `owner`.
	AccessLevel pulumi.StringInput `pulumi:"accessLevel"`
	// The avatar URL of the user.
	AvatarUrl pulumi.StringInput `pulumi:"avatarUrl"`
	// Expiration date for the group membership.
	ExpiresAt pulumi.StringInput `pulumi:"expiresAt"`
	// The unique id assigned to the user by the gitlab server.
	Id pulumi.IntInput `pulumi:"id"`
	// The name of the user.
	Name pulumi.StringInput `pulumi:"name"`
	// Whether the user is active or blocked.
	State pulumi.StringInput `pulumi:"state"`
	// The username of the user.
	Username pulumi.StringInput `pulumi:"username"`
	// User's website URL.
	WebUrl pulumi.StringInput `pulumi:"webUrl"`
}

func (GetGroupMembershipMemberArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGroupMembershipMember)(nil)).Elem()
}

func (i GetGroupMembershipMemberArgs) ToGetGroupMembershipMemberOutput() GetGroupMembershipMemberOutput {
	return i.ToGetGroupMembershipMemberOutputWithContext(context.Background())
}

func (i GetGroupMembershipMemberArgs) ToGetGroupMembershipMemberOutputWithContext(ctx context.Context) GetGroupMembershipMemberOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetGroupMembershipMemberOutput)
}

// GetGroupMembershipMemberArrayInput is an input type that accepts GetGroupMembershipMemberArray and GetGroupMembershipMemberArrayOutput values.
// You can construct a concrete instance of `GetGroupMembershipMemberArrayInput` via:
//
//          GetGroupMembershipMemberArray{ GetGroupMembershipMemberArgs{...} }
type GetGroupMembershipMemberArrayInput interface {
	pulumi.Input

	ToGetGroupMembershipMemberArrayOutput() GetGroupMembershipMemberArrayOutput
	ToGetGroupMembershipMemberArrayOutputWithContext(context.Context) GetGroupMembershipMemberArrayOutput
}

type GetGroupMembershipMemberArray []GetGroupMembershipMemberInput

func (GetGroupMembershipMemberArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetGroupMembershipMember)(nil)).Elem()
}

func (i GetGroupMembershipMemberArray) ToGetGroupMembershipMemberArrayOutput() GetGroupMembershipMemberArrayOutput {
	return i.ToGetGroupMembershipMemberArrayOutputWithContext(context.Background())
}

func (i GetGroupMembershipMemberArray) ToGetGroupMembershipMemberArrayOutputWithContext(ctx context.Context) GetGroupMembershipMemberArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetGroupMembershipMemberArrayOutput)
}

type GetGroupMembershipMemberOutput struct{ *pulumi.OutputState }

func (GetGroupMembershipMemberOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGroupMembershipMember)(nil)).Elem()
}

func (o GetGroupMembershipMemberOutput) ToGetGroupMembershipMemberOutput() GetGroupMembershipMemberOutput {
	return o
}

func (o GetGroupMembershipMemberOutput) ToGetGroupMembershipMemberOutputWithContext(ctx context.Context) GetGroupMembershipMemberOutput {
	return o
}

// Only return members with the desired access level. Acceptable values are: `guest`, `reporter`, `developer`, `maintainer`, `owner`.
func (o GetGroupMembershipMemberOutput) AccessLevel() pulumi.StringOutput {
	return o.ApplyT(func(v GetGroupMembershipMember) string { return v.AccessLevel }).(pulumi.StringOutput)
}

// The avatar URL of the user.
func (o GetGroupMembershipMemberOutput) AvatarUrl() pulumi.StringOutput {
	return o.ApplyT(func(v GetGroupMembershipMember) string { return v.AvatarUrl }).(pulumi.StringOutput)
}

// Expiration date for the group membership.
func (o GetGroupMembershipMemberOutput) ExpiresAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetGroupMembershipMember) string { return v.ExpiresAt }).(pulumi.StringOutput)
}

// The unique id assigned to the user by the gitlab server.
func (o GetGroupMembershipMemberOutput) Id() pulumi.IntOutput {
	return o.ApplyT(func(v GetGroupMembershipMember) int { return v.Id }).(pulumi.IntOutput)
}

// The name of the user.
func (o GetGroupMembershipMemberOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetGroupMembershipMember) string { return v.Name }).(pulumi.StringOutput)
}

// Whether the user is active or blocked.
func (o GetGroupMembershipMemberOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v GetGroupMembershipMember) string { return v.State }).(pulumi.StringOutput)
}

// The username of the user.
func (o GetGroupMembershipMemberOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v GetGroupMembershipMember) string { return v.Username }).(pulumi.StringOutput)
}

// User's website URL.
func (o GetGroupMembershipMemberOutput) WebUrl() pulumi.StringOutput {
	return o.ApplyT(func(v GetGroupMembershipMember) string { return v.WebUrl }).(pulumi.StringOutput)
}

type GetGroupMembershipMemberArrayOutput struct{ *pulumi.OutputState }

func (GetGroupMembershipMemberArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetGroupMembershipMember)(nil)).Elem()
}

func (o GetGroupMembershipMemberArrayOutput) ToGetGroupMembershipMemberArrayOutput() GetGroupMembershipMemberArrayOutput {
	return o
}

func (o GetGroupMembershipMemberArrayOutput) ToGetGroupMembershipMemberArrayOutputWithContext(ctx context.Context) GetGroupMembershipMemberArrayOutput {
	return o
}

func (o GetGroupMembershipMemberArrayOutput) Index(i pulumi.IntInput) GetGroupMembershipMemberOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetGroupMembershipMember {
		return vs[0].([]GetGroupMembershipMember)[vs[1].(int)]
	}).(GetGroupMembershipMemberOutput)
}

type GetProjectPushRules struct {
	// All commit author emails must match this regex, e.g. `@my-company.com$`.
	AuthorEmailRegex string `pulumi:"authorEmailRegex"`
	// All branch names must match this regex, e.g. `(feature|hotfix)\/*`.
	BranchNameRegex string `pulumi:"branchNameRegex"`
	// Users can only push commits to this repository that were committed with one of their own verified emails.
	CommitCommitterCheck bool `pulumi:"commitCommitterCheck"`
	// No commit message is allowed to match this regex, for example `ssh\:\/\/`.
	CommitMessageNegativeRegex string `pulumi:"commitMessageNegativeRegex"`
	// All commit messages must match this regex, e.g. `Fixed \d+\..*`.
	CommitMessageRegex string `pulumi:"commitMessageRegex"`
	// Deny deleting a tag.
	DenyDeleteTag bool `pulumi:"denyDeleteTag"`
	// All commited filenames must not match this regex, e.g. `(jar|exe)$`.
	FileNameRegex string `pulumi:"fileNameRegex"`
	// Maximum file size (MB).
	MaxFileSize int `pulumi:"maxFileSize"`
	// Restrict commits by author (email) to existing GitLab users.
	MemberCheck bool `pulumi:"memberCheck"`
	// GitLab will reject any files that are likely to contain secrets.
	PreventSecrets bool `pulumi:"preventSecrets"`
	// Reject commit when it’s not signed through GPG.
	RejectUnsignedCommits bool `pulumi:"rejectUnsignedCommits"`
}

// GetProjectPushRulesInput is an input type that accepts GetProjectPushRulesArgs and GetProjectPushRulesOutput values.
// You can construct a concrete instance of `GetProjectPushRulesInput` via:
//
//          GetProjectPushRulesArgs{...}
type GetProjectPushRulesInput interface {
	pulumi.Input

	ToGetProjectPushRulesOutput() GetProjectPushRulesOutput
	ToGetProjectPushRulesOutputWithContext(context.Context) GetProjectPushRulesOutput
}

type GetProjectPushRulesArgs struct {
	// All commit author emails must match this regex, e.g. `@my-company.com$`.
	AuthorEmailRegex pulumi.StringInput `pulumi:"authorEmailRegex"`
	// All branch names must match this regex, e.g. `(feature|hotfix)\/*`.
	BranchNameRegex pulumi.StringInput `pulumi:"branchNameRegex"`
	// Users can only push commits to this repository that were committed with one of their own verified emails.
	CommitCommitterCheck pulumi.BoolInput `pulumi:"commitCommitterCheck"`
	// No commit message is allowed to match this regex, for example `ssh\:\/\/`.
	CommitMessageNegativeRegex pulumi.StringInput `pulumi:"commitMessageNegativeRegex"`
	// All commit messages must match this regex, e.g. `Fixed \d+\..*`.
	CommitMessageRegex pulumi.StringInput `pulumi:"commitMessageRegex"`
	// Deny deleting a tag.
	DenyDeleteTag pulumi.BoolInput `pulumi:"denyDeleteTag"`
	// All commited filenames must not match this regex, e.g. `(jar|exe)$`.
	FileNameRegex pulumi.StringInput `pulumi:"fileNameRegex"`
	// Maximum file size (MB).
	MaxFileSize pulumi.IntInput `pulumi:"maxFileSize"`
	// Restrict commits by author (email) to existing GitLab users.
	MemberCheck pulumi.BoolInput `pulumi:"memberCheck"`
	// GitLab will reject any files that are likely to contain secrets.
	PreventSecrets pulumi.BoolInput `pulumi:"preventSecrets"`
	// Reject commit when it’s not signed through GPG.
	RejectUnsignedCommits pulumi.BoolInput `pulumi:"rejectUnsignedCommits"`
}

func (GetProjectPushRulesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProjectPushRules)(nil)).Elem()
}

func (i GetProjectPushRulesArgs) ToGetProjectPushRulesOutput() GetProjectPushRulesOutput {
	return i.ToGetProjectPushRulesOutputWithContext(context.Background())
}

func (i GetProjectPushRulesArgs) ToGetProjectPushRulesOutputWithContext(ctx context.Context) GetProjectPushRulesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetProjectPushRulesOutput)
}

type GetProjectPushRulesOutput struct{ *pulumi.OutputState }

func (GetProjectPushRulesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProjectPushRules)(nil)).Elem()
}

func (o GetProjectPushRulesOutput) ToGetProjectPushRulesOutput() GetProjectPushRulesOutput {
	return o
}

func (o GetProjectPushRulesOutput) ToGetProjectPushRulesOutputWithContext(ctx context.Context) GetProjectPushRulesOutput {
	return o
}

// All commit author emails must match this regex, e.g. `@my-company.com$`.
func (o GetProjectPushRulesOutput) AuthorEmailRegex() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectPushRules) string { return v.AuthorEmailRegex }).(pulumi.StringOutput)
}

// All branch names must match this regex, e.g. `(feature|hotfix)\/*`.
func (o GetProjectPushRulesOutput) BranchNameRegex() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectPushRules) string { return v.BranchNameRegex }).(pulumi.StringOutput)
}

// Users can only push commits to this repository that were committed with one of their own verified emails.
func (o GetProjectPushRulesOutput) CommitCommitterCheck() pulumi.BoolOutput {
	return o.ApplyT(func(v GetProjectPushRules) bool { return v.CommitCommitterCheck }).(pulumi.BoolOutput)
}

// No commit message is allowed to match this regex, for example `ssh\:\/\/`.
func (o GetProjectPushRulesOutput) CommitMessageNegativeRegex() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectPushRules) string { return v.CommitMessageNegativeRegex }).(pulumi.StringOutput)
}

// All commit messages must match this regex, e.g. `Fixed \d+\..*`.
func (o GetProjectPushRulesOutput) CommitMessageRegex() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectPushRules) string { return v.CommitMessageRegex }).(pulumi.StringOutput)
}

// Deny deleting a tag.
func (o GetProjectPushRulesOutput) DenyDeleteTag() pulumi.BoolOutput {
	return o.ApplyT(func(v GetProjectPushRules) bool { return v.DenyDeleteTag }).(pulumi.BoolOutput)
}

// All commited filenames must not match this regex, e.g. `(jar|exe)$`.
func (o GetProjectPushRulesOutput) FileNameRegex() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectPushRules) string { return v.FileNameRegex }).(pulumi.StringOutput)
}

// Maximum file size (MB).
func (o GetProjectPushRulesOutput) MaxFileSize() pulumi.IntOutput {
	return o.ApplyT(func(v GetProjectPushRules) int { return v.MaxFileSize }).(pulumi.IntOutput)
}

// Restrict commits by author (email) to existing GitLab users.
func (o GetProjectPushRulesOutput) MemberCheck() pulumi.BoolOutput {
	return o.ApplyT(func(v GetProjectPushRules) bool { return v.MemberCheck }).(pulumi.BoolOutput)
}

// GitLab will reject any files that are likely to contain secrets.
func (o GetProjectPushRulesOutput) PreventSecrets() pulumi.BoolOutput {
	return o.ApplyT(func(v GetProjectPushRules) bool { return v.PreventSecrets }).(pulumi.BoolOutput)
}

// Reject commit when it’s not signed through GPG.
func (o GetProjectPushRulesOutput) RejectUnsignedCommits() pulumi.BoolOutput {
	return o.ApplyT(func(v GetProjectPushRules) bool { return v.RejectUnsignedCommits }).(pulumi.BoolOutput)
}

type GetProjectsProject struct {
	_links                      map[string]string `pulumi:"_links"`
	AllowMergeOnSkippedPipeline bool              `pulumi:"allowMergeOnSkippedPipeline"`
	// The numbers of approvals needed in a merge requests.
	ApprovalsBeforeMerge int `pulumi:"approvalsBeforeMerge"`
	// Limit by archived status.
	Archived                 bool                                `pulumi:"archived"`
	AvatarUrl                string                              `pulumi:"avatarUrl"`
	BuildCoverageRegex       string                              `pulumi:"buildCoverageRegex"`
	CiConfigPath             string                              `pulumi:"ciConfigPath"`
	ContainerRegistryEnabled bool                                `pulumi:"containerRegistryEnabled"`
	CreatedAt                string                              `pulumi:"createdAt"`
	CreatorId                int                                 `pulumi:"creatorId"`
	CustomAttributes         []map[string]interface{}            `pulumi:"customAttributes"`
	DefaultBranch            string                              `pulumi:"defaultBranch"`
	Description              string                              `pulumi:"description"`
	ForkedFromProject        GetProjectsProjectForkedFromProject `pulumi:"forkedFromProject"`
	ForksCount               int                                 `pulumi:"forksCount"`
	// The HTTP clone URL of the project.
	HttpUrlToRepo string `pulumi:"httpUrlToRepo"`
	// The ID of the project.
	Id            int    `pulumi:"id"`
	ImportError   string `pulumi:"importError"`
	ImportStatus  string `pulumi:"importStatus"`
	IssuesEnabled bool   `pulumi:"issuesEnabled"`
	// Whether pipelines are enabled for the project.
	JobsEnabled                      bool   `pulumi:"jobsEnabled"`
	LastActivityAt                   string `pulumi:"lastActivityAt"`
	LfsEnabled                       bool   `pulumi:"lfsEnabled"`
	MergeMethod                      string `pulumi:"mergeMethod"`
	MergeRequestsEnabled             bool   `pulumi:"mergeRequestsEnabled"`
	Mirror                           bool   `pulumi:"mirror"`
	MirrorOverwritesDivergedBranches bool   `pulumi:"mirrorOverwritesDivergedBranches"`
	MirrorTriggerBuilds              bool   `pulumi:"mirrorTriggerBuilds"`
	MirrorUserId                     int    `pulumi:"mirrorUserId"`
	// The name of the project.
	Name string `pulumi:"name"`
	// In `group / subgroup / project` or `user / project` format.
	NameWithNamespace                         string                      `pulumi:"nameWithNamespace"`
	Namespace                                 GetProjectsProjectNamespace `pulumi:"namespace"`
	OnlyAllowMergeIfAllDiscussionsAreResolved bool                        `pulumi:"onlyAllowMergeIfAllDiscussionsAreResolved"`
	OnlyAllowMergeIfPipelineSucceeds          bool                        `pulumi:"onlyAllowMergeIfPipelineSucceeds"`
	OnlyMirrorProtectedBranches               bool                        `pulumi:"onlyMirrorProtectedBranches"`
	OpenIssuesCount                           int                         `pulumi:"openIssuesCount"`
	Owner                                     GetProjectsProjectOwner     `pulumi:"owner"`
	PackagesEnabled                           bool                        `pulumi:"packagesEnabled"`
	Path                                      string                      `pulumi:"path"`
	// In `group/subgroup/project` or `user/project` format.
	PathWithNamespace string                        `pulumi:"pathWithNamespace"`
	Permissions       GetProjectsProjectPermissions `pulumi:"permissions"`
	// Whether the project is public.
	Public                         bool                                `pulumi:"public"`
	PublicBuilds                   bool                                `pulumi:"publicBuilds"`
	ReadmeUrl                      string                              `pulumi:"readmeUrl"`
	RequestAccessEnabled           bool                                `pulumi:"requestAccessEnabled"`
	ResolveOutdatedDiffDiscussions bool                                `pulumi:"resolveOutdatedDiffDiscussions"`
	RunnersToken                   string                              `pulumi:"runnersToken"`
	SharedRunnersEnabled           bool                                `pulumi:"sharedRunnersEnabled"`
	SharedWithGroups               []GetProjectsProjectSharedWithGroup `pulumi:"sharedWithGroups"`
	SnippetsEnabled                bool                                `pulumi:"snippetsEnabled"`
	// The SSH clone URL of the project.
	SshUrlToRepo string `pulumi:"sshUrlToRepo"`
	StarCount    int    `pulumi:"starCount"`
	// Include project statistics. Cannot be used with `groupId`.
	Statistics map[string]int `pulumi:"statistics"`
	// A set of the project topics (formerly called "project tags").
	TagLists []string `pulumi:"tagLists"`
	// Limit by visibility `public`, `internal`, or `private`.
	Visibility  string `pulumi:"visibility"`
	WebUrl      string `pulumi:"webUrl"`
	WikiEnabled bool   `pulumi:"wikiEnabled"`
}

// GetProjectsProjectInput is an input type that accepts GetProjectsProjectArgs and GetProjectsProjectOutput values.
// You can construct a concrete instance of `GetProjectsProjectInput` via:
//
//          GetProjectsProjectArgs{...}
type GetProjectsProjectInput interface {
	pulumi.Input

	ToGetProjectsProjectOutput() GetProjectsProjectOutput
	ToGetProjectsProjectOutputWithContext(context.Context) GetProjectsProjectOutput
}

type GetProjectsProjectArgs struct {
	_links                      pulumi.StringMapInput `pulumi:"_links"`
	AllowMergeOnSkippedPipeline pulumi.BoolInput      `pulumi:"allowMergeOnSkippedPipeline"`
	// The numbers of approvals needed in a merge requests.
	ApprovalsBeforeMerge pulumi.IntInput `pulumi:"approvalsBeforeMerge"`
	// Limit by archived status.
	Archived                 pulumi.BoolInput                         `pulumi:"archived"`
	AvatarUrl                pulumi.StringInput                       `pulumi:"avatarUrl"`
	BuildCoverageRegex       pulumi.StringInput                       `pulumi:"buildCoverageRegex"`
	CiConfigPath             pulumi.StringInput                       `pulumi:"ciConfigPath"`
	ContainerRegistryEnabled pulumi.BoolInput                         `pulumi:"containerRegistryEnabled"`
	CreatedAt                pulumi.StringInput                       `pulumi:"createdAt"`
	CreatorId                pulumi.IntInput                          `pulumi:"creatorId"`
	CustomAttributes         pulumi.MapArrayInput                     `pulumi:"customAttributes"`
	DefaultBranch            pulumi.StringInput                       `pulumi:"defaultBranch"`
	Description              pulumi.StringInput                       `pulumi:"description"`
	ForkedFromProject        GetProjectsProjectForkedFromProjectInput `pulumi:"forkedFromProject"`
	ForksCount               pulumi.IntInput                          `pulumi:"forksCount"`
	// The HTTP clone URL of the project.
	HttpUrlToRepo pulumi.StringInput `pulumi:"httpUrlToRepo"`
	// The ID of the project.
	Id            pulumi.IntInput    `pulumi:"id"`
	ImportError   pulumi.StringInput `pulumi:"importError"`
	ImportStatus  pulumi.StringInput `pulumi:"importStatus"`
	IssuesEnabled pulumi.BoolInput   `pulumi:"issuesEnabled"`
	// Whether pipelines are enabled for the project.
	JobsEnabled                      pulumi.BoolInput   `pulumi:"jobsEnabled"`
	LastActivityAt                   pulumi.StringInput `pulumi:"lastActivityAt"`
	LfsEnabled                       pulumi.BoolInput   `pulumi:"lfsEnabled"`
	MergeMethod                      pulumi.StringInput `pulumi:"mergeMethod"`
	MergeRequestsEnabled             pulumi.BoolInput   `pulumi:"mergeRequestsEnabled"`
	Mirror                           pulumi.BoolInput   `pulumi:"mirror"`
	MirrorOverwritesDivergedBranches pulumi.BoolInput   `pulumi:"mirrorOverwritesDivergedBranches"`
	MirrorTriggerBuilds              pulumi.BoolInput   `pulumi:"mirrorTriggerBuilds"`
	MirrorUserId                     pulumi.IntInput    `pulumi:"mirrorUserId"`
	// The name of the project.
	Name pulumi.StringInput `pulumi:"name"`
	// In `group / subgroup / project` or `user / project` format.
	NameWithNamespace                         pulumi.StringInput               `pulumi:"nameWithNamespace"`
	Namespace                                 GetProjectsProjectNamespaceInput `pulumi:"namespace"`
	OnlyAllowMergeIfAllDiscussionsAreResolved pulumi.BoolInput                 `pulumi:"onlyAllowMergeIfAllDiscussionsAreResolved"`
	OnlyAllowMergeIfPipelineSucceeds          pulumi.BoolInput                 `pulumi:"onlyAllowMergeIfPipelineSucceeds"`
	OnlyMirrorProtectedBranches               pulumi.BoolInput                 `pulumi:"onlyMirrorProtectedBranches"`
	OpenIssuesCount                           pulumi.IntInput                  `pulumi:"openIssuesCount"`
	Owner                                     GetProjectsProjectOwnerInput     `pulumi:"owner"`
	PackagesEnabled                           pulumi.BoolInput                 `pulumi:"packagesEnabled"`
	Path                                      pulumi.StringInput               `pulumi:"path"`
	// In `group/subgroup/project` or `user/project` format.
	PathWithNamespace pulumi.StringInput                 `pulumi:"pathWithNamespace"`
	Permissions       GetProjectsProjectPermissionsInput `pulumi:"permissions"`
	// Whether the project is public.
	Public                         pulumi.BoolInput                            `pulumi:"public"`
	PublicBuilds                   pulumi.BoolInput                            `pulumi:"publicBuilds"`
	ReadmeUrl                      pulumi.StringInput                          `pulumi:"readmeUrl"`
	RequestAccessEnabled           pulumi.BoolInput                            `pulumi:"requestAccessEnabled"`
	ResolveOutdatedDiffDiscussions pulumi.BoolInput                            `pulumi:"resolveOutdatedDiffDiscussions"`
	RunnersToken                   pulumi.StringInput                          `pulumi:"runnersToken"`
	SharedRunnersEnabled           pulumi.BoolInput                            `pulumi:"sharedRunnersEnabled"`
	SharedWithGroups               GetProjectsProjectSharedWithGroupArrayInput `pulumi:"sharedWithGroups"`
	SnippetsEnabled                pulumi.BoolInput                            `pulumi:"snippetsEnabled"`
	// The SSH clone URL of the project.
	SshUrlToRepo pulumi.StringInput `pulumi:"sshUrlToRepo"`
	StarCount    pulumi.IntInput    `pulumi:"starCount"`
	// Include project statistics. Cannot be used with `groupId`.
	Statistics pulumi.IntMapInput `pulumi:"statistics"`
	// A set of the project topics (formerly called "project tags").
	TagLists pulumi.StringArrayInput `pulumi:"tagLists"`
	// Limit by visibility `public`, `internal`, or `private`.
	Visibility  pulumi.StringInput `pulumi:"visibility"`
	WebUrl      pulumi.StringInput `pulumi:"webUrl"`
	WikiEnabled pulumi.BoolInput   `pulumi:"wikiEnabled"`
}

func (GetProjectsProjectArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProjectsProject)(nil)).Elem()
}

func (i GetProjectsProjectArgs) ToGetProjectsProjectOutput() GetProjectsProjectOutput {
	return i.ToGetProjectsProjectOutputWithContext(context.Background())
}

func (i GetProjectsProjectArgs) ToGetProjectsProjectOutputWithContext(ctx context.Context) GetProjectsProjectOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetProjectsProjectOutput)
}

// GetProjectsProjectArrayInput is an input type that accepts GetProjectsProjectArray and GetProjectsProjectArrayOutput values.
// You can construct a concrete instance of `GetProjectsProjectArrayInput` via:
//
//          GetProjectsProjectArray{ GetProjectsProjectArgs{...} }
type GetProjectsProjectArrayInput interface {
	pulumi.Input

	ToGetProjectsProjectArrayOutput() GetProjectsProjectArrayOutput
	ToGetProjectsProjectArrayOutputWithContext(context.Context) GetProjectsProjectArrayOutput
}

type GetProjectsProjectArray []GetProjectsProjectInput

func (GetProjectsProjectArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetProjectsProject)(nil)).Elem()
}

func (i GetProjectsProjectArray) ToGetProjectsProjectArrayOutput() GetProjectsProjectArrayOutput {
	return i.ToGetProjectsProjectArrayOutputWithContext(context.Background())
}

func (i GetProjectsProjectArray) ToGetProjectsProjectArrayOutputWithContext(ctx context.Context) GetProjectsProjectArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetProjectsProjectArrayOutput)
}

type GetProjectsProjectOutput struct{ *pulumi.OutputState }

func (GetProjectsProjectOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProjectsProject)(nil)).Elem()
}

func (o GetProjectsProjectOutput) ToGetProjectsProjectOutput() GetProjectsProjectOutput {
	return o
}

func (o GetProjectsProjectOutput) ToGetProjectsProjectOutputWithContext(ctx context.Context) GetProjectsProjectOutput {
	return o
}

func (o GetProjectsProjectOutput) _links() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetProjectsProject) map[string]string { return v._links }).(pulumi.StringMapOutput)
}

func (o GetProjectsProjectOutput) AllowMergeOnSkippedPipeline() pulumi.BoolOutput {
	return o.ApplyT(func(v GetProjectsProject) bool { return v.AllowMergeOnSkippedPipeline }).(pulumi.BoolOutput)
}

// The numbers of approvals needed in a merge requests.
func (o GetProjectsProjectOutput) ApprovalsBeforeMerge() pulumi.IntOutput {
	return o.ApplyT(func(v GetProjectsProject) int { return v.ApprovalsBeforeMerge }).(pulumi.IntOutput)
}

// Limit by archived status.
func (o GetProjectsProjectOutput) Archived() pulumi.BoolOutput {
	return o.ApplyT(func(v GetProjectsProject) bool { return v.Archived }).(pulumi.BoolOutput)
}

func (o GetProjectsProjectOutput) AvatarUrl() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectsProject) string { return v.AvatarUrl }).(pulumi.StringOutput)
}

func (o GetProjectsProjectOutput) BuildCoverageRegex() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectsProject) string { return v.BuildCoverageRegex }).(pulumi.StringOutput)
}

func (o GetProjectsProjectOutput) CiConfigPath() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectsProject) string { return v.CiConfigPath }).(pulumi.StringOutput)
}

func (o GetProjectsProjectOutput) ContainerRegistryEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetProjectsProject) bool { return v.ContainerRegistryEnabled }).(pulumi.BoolOutput)
}

func (o GetProjectsProjectOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectsProject) string { return v.CreatedAt }).(pulumi.StringOutput)
}

func (o GetProjectsProjectOutput) CreatorId() pulumi.IntOutput {
	return o.ApplyT(func(v GetProjectsProject) int { return v.CreatorId }).(pulumi.IntOutput)
}

func (o GetProjectsProjectOutput) CustomAttributes() pulumi.MapArrayOutput {
	return o.ApplyT(func(v GetProjectsProject) []map[string]interface{} { return v.CustomAttributes }).(pulumi.MapArrayOutput)
}

func (o GetProjectsProjectOutput) DefaultBranch() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectsProject) string { return v.DefaultBranch }).(pulumi.StringOutput)
}

func (o GetProjectsProjectOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectsProject) string { return v.Description }).(pulumi.StringOutput)
}

func (o GetProjectsProjectOutput) ForkedFromProject() GetProjectsProjectForkedFromProjectOutput {
	return o.ApplyT(func(v GetProjectsProject) GetProjectsProjectForkedFromProject { return v.ForkedFromProject }).(GetProjectsProjectForkedFromProjectOutput)
}

func (o GetProjectsProjectOutput) ForksCount() pulumi.IntOutput {
	return o.ApplyT(func(v GetProjectsProject) int { return v.ForksCount }).(pulumi.IntOutput)
}

// The HTTP clone URL of the project.
func (o GetProjectsProjectOutput) HttpUrlToRepo() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectsProject) string { return v.HttpUrlToRepo }).(pulumi.StringOutput)
}

// The ID of the project.
func (o GetProjectsProjectOutput) Id() pulumi.IntOutput {
	return o.ApplyT(func(v GetProjectsProject) int { return v.Id }).(pulumi.IntOutput)
}

func (o GetProjectsProjectOutput) ImportError() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectsProject) string { return v.ImportError }).(pulumi.StringOutput)
}

func (o GetProjectsProjectOutput) ImportStatus() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectsProject) string { return v.ImportStatus }).(pulumi.StringOutput)
}

func (o GetProjectsProjectOutput) IssuesEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetProjectsProject) bool { return v.IssuesEnabled }).(pulumi.BoolOutput)
}

// Whether pipelines are enabled for the project.
func (o GetProjectsProjectOutput) JobsEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetProjectsProject) bool { return v.JobsEnabled }).(pulumi.BoolOutput)
}

func (o GetProjectsProjectOutput) LastActivityAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectsProject) string { return v.LastActivityAt }).(pulumi.StringOutput)
}

func (o GetProjectsProjectOutput) LfsEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetProjectsProject) bool { return v.LfsEnabled }).(pulumi.BoolOutput)
}

func (o GetProjectsProjectOutput) MergeMethod() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectsProject) string { return v.MergeMethod }).(pulumi.StringOutput)
}

func (o GetProjectsProjectOutput) MergeRequestsEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetProjectsProject) bool { return v.MergeRequestsEnabled }).(pulumi.BoolOutput)
}

func (o GetProjectsProjectOutput) Mirror() pulumi.BoolOutput {
	return o.ApplyT(func(v GetProjectsProject) bool { return v.Mirror }).(pulumi.BoolOutput)
}

func (o GetProjectsProjectOutput) MirrorOverwritesDivergedBranches() pulumi.BoolOutput {
	return o.ApplyT(func(v GetProjectsProject) bool { return v.MirrorOverwritesDivergedBranches }).(pulumi.BoolOutput)
}

func (o GetProjectsProjectOutput) MirrorTriggerBuilds() pulumi.BoolOutput {
	return o.ApplyT(func(v GetProjectsProject) bool { return v.MirrorTriggerBuilds }).(pulumi.BoolOutput)
}

func (o GetProjectsProjectOutput) MirrorUserId() pulumi.IntOutput {
	return o.ApplyT(func(v GetProjectsProject) int { return v.MirrorUserId }).(pulumi.IntOutput)
}

// The name of the project.
func (o GetProjectsProjectOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectsProject) string { return v.Name }).(pulumi.StringOutput)
}

// In `group / subgroup / project` or `user / project` format.
func (o GetProjectsProjectOutput) NameWithNamespace() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectsProject) string { return v.NameWithNamespace }).(pulumi.StringOutput)
}

func (o GetProjectsProjectOutput) Namespace() GetProjectsProjectNamespaceOutput {
	return o.ApplyT(func(v GetProjectsProject) GetProjectsProjectNamespace { return v.Namespace }).(GetProjectsProjectNamespaceOutput)
}

func (o GetProjectsProjectOutput) OnlyAllowMergeIfAllDiscussionsAreResolved() pulumi.BoolOutput {
	return o.ApplyT(func(v GetProjectsProject) bool { return v.OnlyAllowMergeIfAllDiscussionsAreResolved }).(pulumi.BoolOutput)
}

func (o GetProjectsProjectOutput) OnlyAllowMergeIfPipelineSucceeds() pulumi.BoolOutput {
	return o.ApplyT(func(v GetProjectsProject) bool { return v.OnlyAllowMergeIfPipelineSucceeds }).(pulumi.BoolOutput)
}

func (o GetProjectsProjectOutput) OnlyMirrorProtectedBranches() pulumi.BoolOutput {
	return o.ApplyT(func(v GetProjectsProject) bool { return v.OnlyMirrorProtectedBranches }).(pulumi.BoolOutput)
}

func (o GetProjectsProjectOutput) OpenIssuesCount() pulumi.IntOutput {
	return o.ApplyT(func(v GetProjectsProject) int { return v.OpenIssuesCount }).(pulumi.IntOutput)
}

func (o GetProjectsProjectOutput) Owner() GetProjectsProjectOwnerOutput {
	return o.ApplyT(func(v GetProjectsProject) GetProjectsProjectOwner { return v.Owner }).(GetProjectsProjectOwnerOutput)
}

func (o GetProjectsProjectOutput) PackagesEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetProjectsProject) bool { return v.PackagesEnabled }).(pulumi.BoolOutput)
}

func (o GetProjectsProjectOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectsProject) string { return v.Path }).(pulumi.StringOutput)
}

// In `group/subgroup/project` or `user/project` format.
func (o GetProjectsProjectOutput) PathWithNamespace() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectsProject) string { return v.PathWithNamespace }).(pulumi.StringOutput)
}

func (o GetProjectsProjectOutput) Permissions() GetProjectsProjectPermissionsOutput {
	return o.ApplyT(func(v GetProjectsProject) GetProjectsProjectPermissions { return v.Permissions }).(GetProjectsProjectPermissionsOutput)
}

// Whether the project is public.
func (o GetProjectsProjectOutput) Public() pulumi.BoolOutput {
	return o.ApplyT(func(v GetProjectsProject) bool { return v.Public }).(pulumi.BoolOutput)
}

func (o GetProjectsProjectOutput) PublicBuilds() pulumi.BoolOutput {
	return o.ApplyT(func(v GetProjectsProject) bool { return v.PublicBuilds }).(pulumi.BoolOutput)
}

func (o GetProjectsProjectOutput) ReadmeUrl() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectsProject) string { return v.ReadmeUrl }).(pulumi.StringOutput)
}

func (o GetProjectsProjectOutput) RequestAccessEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetProjectsProject) bool { return v.RequestAccessEnabled }).(pulumi.BoolOutput)
}

func (o GetProjectsProjectOutput) ResolveOutdatedDiffDiscussions() pulumi.BoolOutput {
	return o.ApplyT(func(v GetProjectsProject) bool { return v.ResolveOutdatedDiffDiscussions }).(pulumi.BoolOutput)
}

func (o GetProjectsProjectOutput) RunnersToken() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectsProject) string { return v.RunnersToken }).(pulumi.StringOutput)
}

func (o GetProjectsProjectOutput) SharedRunnersEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetProjectsProject) bool { return v.SharedRunnersEnabled }).(pulumi.BoolOutput)
}

func (o GetProjectsProjectOutput) SharedWithGroups() GetProjectsProjectSharedWithGroupArrayOutput {
	return o.ApplyT(func(v GetProjectsProject) []GetProjectsProjectSharedWithGroup { return v.SharedWithGroups }).(GetProjectsProjectSharedWithGroupArrayOutput)
}

func (o GetProjectsProjectOutput) SnippetsEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetProjectsProject) bool { return v.SnippetsEnabled }).(pulumi.BoolOutput)
}

// The SSH clone URL of the project.
func (o GetProjectsProjectOutput) SshUrlToRepo() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectsProject) string { return v.SshUrlToRepo }).(pulumi.StringOutput)
}

func (o GetProjectsProjectOutput) StarCount() pulumi.IntOutput {
	return o.ApplyT(func(v GetProjectsProject) int { return v.StarCount }).(pulumi.IntOutput)
}

// Include project statistics. Cannot be used with `groupId`.
func (o GetProjectsProjectOutput) Statistics() pulumi.IntMapOutput {
	return o.ApplyT(func(v GetProjectsProject) map[string]int { return v.Statistics }).(pulumi.IntMapOutput)
}

// A set of the project topics (formerly called "project tags").
func (o GetProjectsProjectOutput) TagLists() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetProjectsProject) []string { return v.TagLists }).(pulumi.StringArrayOutput)
}

// Limit by visibility `public`, `internal`, or `private`.
func (o GetProjectsProjectOutput) Visibility() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectsProject) string { return v.Visibility }).(pulumi.StringOutput)
}

func (o GetProjectsProjectOutput) WebUrl() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectsProject) string { return v.WebUrl }).(pulumi.StringOutput)
}

func (o GetProjectsProjectOutput) WikiEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetProjectsProject) bool { return v.WikiEnabled }).(pulumi.BoolOutput)
}

type GetProjectsProjectArrayOutput struct{ *pulumi.OutputState }

func (GetProjectsProjectArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetProjectsProject)(nil)).Elem()
}

func (o GetProjectsProjectArrayOutput) ToGetProjectsProjectArrayOutput() GetProjectsProjectArrayOutput {
	return o
}

func (o GetProjectsProjectArrayOutput) ToGetProjectsProjectArrayOutputWithContext(ctx context.Context) GetProjectsProjectArrayOutput {
	return o
}

func (o GetProjectsProjectArrayOutput) Index(i pulumi.IntInput) GetProjectsProjectOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetProjectsProject {
		return vs[0].([]GetProjectsProject)[vs[1].(int)]
	}).(GetProjectsProjectOutput)
}

type GetProjectsProjectForkedFromProject struct {
	// The HTTP clone URL of the project.
	HttpUrlToRepo string `pulumi:"httpUrlToRepo"`
	// The ID of the project.
	Id int `pulumi:"id"`
	// The name of the project.
	Name string `pulumi:"name"`
	// In `group / subgroup / project` or `user / project` format.
	NameWithNamespace string `pulumi:"nameWithNamespace"`
	Path              string `pulumi:"path"`
	// In `group/subgroup/project` or `user/project` format.
	PathWithNamespace string `pulumi:"pathWithNamespace"`
	WebUrl            string `pulumi:"webUrl"`
}

// GetProjectsProjectForkedFromProjectInput is an input type that accepts GetProjectsProjectForkedFromProjectArgs and GetProjectsProjectForkedFromProjectOutput values.
// You can construct a concrete instance of `GetProjectsProjectForkedFromProjectInput` via:
//
//          GetProjectsProjectForkedFromProjectArgs{...}
type GetProjectsProjectForkedFromProjectInput interface {
	pulumi.Input

	ToGetProjectsProjectForkedFromProjectOutput() GetProjectsProjectForkedFromProjectOutput
	ToGetProjectsProjectForkedFromProjectOutputWithContext(context.Context) GetProjectsProjectForkedFromProjectOutput
}

type GetProjectsProjectForkedFromProjectArgs struct {
	// The HTTP clone URL of the project.
	HttpUrlToRepo pulumi.StringInput `pulumi:"httpUrlToRepo"`
	// The ID of the project.
	Id pulumi.IntInput `pulumi:"id"`
	// The name of the project.
	Name pulumi.StringInput `pulumi:"name"`
	// In `group / subgroup / project` or `user / project` format.
	NameWithNamespace pulumi.StringInput `pulumi:"nameWithNamespace"`
	Path              pulumi.StringInput `pulumi:"path"`
	// In `group/subgroup/project` or `user/project` format.
	PathWithNamespace pulumi.StringInput `pulumi:"pathWithNamespace"`
	WebUrl            pulumi.StringInput `pulumi:"webUrl"`
}

func (GetProjectsProjectForkedFromProjectArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProjectsProjectForkedFromProject)(nil)).Elem()
}

func (i GetProjectsProjectForkedFromProjectArgs) ToGetProjectsProjectForkedFromProjectOutput() GetProjectsProjectForkedFromProjectOutput {
	return i.ToGetProjectsProjectForkedFromProjectOutputWithContext(context.Background())
}

func (i GetProjectsProjectForkedFromProjectArgs) ToGetProjectsProjectForkedFromProjectOutputWithContext(ctx context.Context) GetProjectsProjectForkedFromProjectOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetProjectsProjectForkedFromProjectOutput)
}

type GetProjectsProjectForkedFromProjectOutput struct{ *pulumi.OutputState }

func (GetProjectsProjectForkedFromProjectOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProjectsProjectForkedFromProject)(nil)).Elem()
}

func (o GetProjectsProjectForkedFromProjectOutput) ToGetProjectsProjectForkedFromProjectOutput() GetProjectsProjectForkedFromProjectOutput {
	return o
}

func (o GetProjectsProjectForkedFromProjectOutput) ToGetProjectsProjectForkedFromProjectOutputWithContext(ctx context.Context) GetProjectsProjectForkedFromProjectOutput {
	return o
}

// The HTTP clone URL of the project.
func (o GetProjectsProjectForkedFromProjectOutput) HttpUrlToRepo() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectsProjectForkedFromProject) string { return v.HttpUrlToRepo }).(pulumi.StringOutput)
}

// The ID of the project.
func (o GetProjectsProjectForkedFromProjectOutput) Id() pulumi.IntOutput {
	return o.ApplyT(func(v GetProjectsProjectForkedFromProject) int { return v.Id }).(pulumi.IntOutput)
}

// The name of the project.
func (o GetProjectsProjectForkedFromProjectOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectsProjectForkedFromProject) string { return v.Name }).(pulumi.StringOutput)
}

// In `group / subgroup / project` or `user / project` format.
func (o GetProjectsProjectForkedFromProjectOutput) NameWithNamespace() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectsProjectForkedFromProject) string { return v.NameWithNamespace }).(pulumi.StringOutput)
}

func (o GetProjectsProjectForkedFromProjectOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectsProjectForkedFromProject) string { return v.Path }).(pulumi.StringOutput)
}

// In `group/subgroup/project` or `user/project` format.
func (o GetProjectsProjectForkedFromProjectOutput) PathWithNamespace() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectsProjectForkedFromProject) string { return v.PathWithNamespace }).(pulumi.StringOutput)
}

func (o GetProjectsProjectForkedFromProjectOutput) WebUrl() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectsProjectForkedFromProject) string { return v.WebUrl }).(pulumi.StringOutput)
}

type GetProjectsProjectNamespace struct {
	FullPath string `pulumi:"fullPath"`
	// The ID of the project.
	Id   int    `pulumi:"id"`
	Kind string `pulumi:"kind"`
	// The name of the project.
	Name string `pulumi:"name"`
	Path string `pulumi:"path"`
}

// GetProjectsProjectNamespaceInput is an input type that accepts GetProjectsProjectNamespaceArgs and GetProjectsProjectNamespaceOutput values.
// You can construct a concrete instance of `GetProjectsProjectNamespaceInput` via:
//
//          GetProjectsProjectNamespaceArgs{...}
type GetProjectsProjectNamespaceInput interface {
	pulumi.Input

	ToGetProjectsProjectNamespaceOutput() GetProjectsProjectNamespaceOutput
	ToGetProjectsProjectNamespaceOutputWithContext(context.Context) GetProjectsProjectNamespaceOutput
}

type GetProjectsProjectNamespaceArgs struct {
	FullPath pulumi.StringInput `pulumi:"fullPath"`
	// The ID of the project.
	Id   pulumi.IntInput    `pulumi:"id"`
	Kind pulumi.StringInput `pulumi:"kind"`
	// The name of the project.
	Name pulumi.StringInput `pulumi:"name"`
	Path pulumi.StringInput `pulumi:"path"`
}

func (GetProjectsProjectNamespaceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProjectsProjectNamespace)(nil)).Elem()
}

func (i GetProjectsProjectNamespaceArgs) ToGetProjectsProjectNamespaceOutput() GetProjectsProjectNamespaceOutput {
	return i.ToGetProjectsProjectNamespaceOutputWithContext(context.Background())
}

func (i GetProjectsProjectNamespaceArgs) ToGetProjectsProjectNamespaceOutputWithContext(ctx context.Context) GetProjectsProjectNamespaceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetProjectsProjectNamespaceOutput)
}

type GetProjectsProjectNamespaceOutput struct{ *pulumi.OutputState }

func (GetProjectsProjectNamespaceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProjectsProjectNamespace)(nil)).Elem()
}

func (o GetProjectsProjectNamespaceOutput) ToGetProjectsProjectNamespaceOutput() GetProjectsProjectNamespaceOutput {
	return o
}

func (o GetProjectsProjectNamespaceOutput) ToGetProjectsProjectNamespaceOutputWithContext(ctx context.Context) GetProjectsProjectNamespaceOutput {
	return o
}

func (o GetProjectsProjectNamespaceOutput) FullPath() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectsProjectNamespace) string { return v.FullPath }).(pulumi.StringOutput)
}

// The ID of the project.
func (o GetProjectsProjectNamespaceOutput) Id() pulumi.IntOutput {
	return o.ApplyT(func(v GetProjectsProjectNamespace) int { return v.Id }).(pulumi.IntOutput)
}

func (o GetProjectsProjectNamespaceOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectsProjectNamespace) string { return v.Kind }).(pulumi.StringOutput)
}

// The name of the project.
func (o GetProjectsProjectNamespaceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectsProjectNamespace) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetProjectsProjectNamespaceOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectsProjectNamespace) string { return v.Path }).(pulumi.StringOutput)
}

type GetProjectsProjectOwner struct {
	AvatarUrl string `pulumi:"avatarUrl"`
	// The ID of the project.
	Id int `pulumi:"id"`
	// The name of the project.
	Name       string `pulumi:"name"`
	State      string `pulumi:"state"`
	Username   string `pulumi:"username"`
	WebsiteUrl string `pulumi:"websiteUrl"`
}

// GetProjectsProjectOwnerInput is an input type that accepts GetProjectsProjectOwnerArgs and GetProjectsProjectOwnerOutput values.
// You can construct a concrete instance of `GetProjectsProjectOwnerInput` via:
//
//          GetProjectsProjectOwnerArgs{...}
type GetProjectsProjectOwnerInput interface {
	pulumi.Input

	ToGetProjectsProjectOwnerOutput() GetProjectsProjectOwnerOutput
	ToGetProjectsProjectOwnerOutputWithContext(context.Context) GetProjectsProjectOwnerOutput
}

type GetProjectsProjectOwnerArgs struct {
	AvatarUrl pulumi.StringInput `pulumi:"avatarUrl"`
	// The ID of the project.
	Id pulumi.IntInput `pulumi:"id"`
	// The name of the project.
	Name       pulumi.StringInput `pulumi:"name"`
	State      pulumi.StringInput `pulumi:"state"`
	Username   pulumi.StringInput `pulumi:"username"`
	WebsiteUrl pulumi.StringInput `pulumi:"websiteUrl"`
}

func (GetProjectsProjectOwnerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProjectsProjectOwner)(nil)).Elem()
}

func (i GetProjectsProjectOwnerArgs) ToGetProjectsProjectOwnerOutput() GetProjectsProjectOwnerOutput {
	return i.ToGetProjectsProjectOwnerOutputWithContext(context.Background())
}

func (i GetProjectsProjectOwnerArgs) ToGetProjectsProjectOwnerOutputWithContext(ctx context.Context) GetProjectsProjectOwnerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetProjectsProjectOwnerOutput)
}

type GetProjectsProjectOwnerOutput struct{ *pulumi.OutputState }

func (GetProjectsProjectOwnerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProjectsProjectOwner)(nil)).Elem()
}

func (o GetProjectsProjectOwnerOutput) ToGetProjectsProjectOwnerOutput() GetProjectsProjectOwnerOutput {
	return o
}

func (o GetProjectsProjectOwnerOutput) ToGetProjectsProjectOwnerOutputWithContext(ctx context.Context) GetProjectsProjectOwnerOutput {
	return o
}

func (o GetProjectsProjectOwnerOutput) AvatarUrl() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectsProjectOwner) string { return v.AvatarUrl }).(pulumi.StringOutput)
}

// The ID of the project.
func (o GetProjectsProjectOwnerOutput) Id() pulumi.IntOutput {
	return o.ApplyT(func(v GetProjectsProjectOwner) int { return v.Id }).(pulumi.IntOutput)
}

// The name of the project.
func (o GetProjectsProjectOwnerOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectsProjectOwner) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetProjectsProjectOwnerOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectsProjectOwner) string { return v.State }).(pulumi.StringOutput)
}

func (o GetProjectsProjectOwnerOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectsProjectOwner) string { return v.Username }).(pulumi.StringOutput)
}

func (o GetProjectsProjectOwnerOutput) WebsiteUrl() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectsProjectOwner) string { return v.WebsiteUrl }).(pulumi.StringOutput)
}

type GetProjectsProjectPermissions struct {
	GroupAccess   map[string]int `pulumi:"groupAccess"`
	ProjectAccess map[string]int `pulumi:"projectAccess"`
}

// GetProjectsProjectPermissionsInput is an input type that accepts GetProjectsProjectPermissionsArgs and GetProjectsProjectPermissionsOutput values.
// You can construct a concrete instance of `GetProjectsProjectPermissionsInput` via:
//
//          GetProjectsProjectPermissionsArgs{...}
type GetProjectsProjectPermissionsInput interface {
	pulumi.Input

	ToGetProjectsProjectPermissionsOutput() GetProjectsProjectPermissionsOutput
	ToGetProjectsProjectPermissionsOutputWithContext(context.Context) GetProjectsProjectPermissionsOutput
}

type GetProjectsProjectPermissionsArgs struct {
	GroupAccess   pulumi.IntMapInput `pulumi:"groupAccess"`
	ProjectAccess pulumi.IntMapInput `pulumi:"projectAccess"`
}

func (GetProjectsProjectPermissionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProjectsProjectPermissions)(nil)).Elem()
}

func (i GetProjectsProjectPermissionsArgs) ToGetProjectsProjectPermissionsOutput() GetProjectsProjectPermissionsOutput {
	return i.ToGetProjectsProjectPermissionsOutputWithContext(context.Background())
}

func (i GetProjectsProjectPermissionsArgs) ToGetProjectsProjectPermissionsOutputWithContext(ctx context.Context) GetProjectsProjectPermissionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetProjectsProjectPermissionsOutput)
}

type GetProjectsProjectPermissionsOutput struct{ *pulumi.OutputState }

func (GetProjectsProjectPermissionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProjectsProjectPermissions)(nil)).Elem()
}

func (o GetProjectsProjectPermissionsOutput) ToGetProjectsProjectPermissionsOutput() GetProjectsProjectPermissionsOutput {
	return o
}

func (o GetProjectsProjectPermissionsOutput) ToGetProjectsProjectPermissionsOutputWithContext(ctx context.Context) GetProjectsProjectPermissionsOutput {
	return o
}

func (o GetProjectsProjectPermissionsOutput) GroupAccess() pulumi.IntMapOutput {
	return o.ApplyT(func(v GetProjectsProjectPermissions) map[string]int { return v.GroupAccess }).(pulumi.IntMapOutput)
}

func (o GetProjectsProjectPermissionsOutput) ProjectAccess() pulumi.IntMapOutput {
	return o.ApplyT(func(v GetProjectsProjectPermissions) map[string]int { return v.ProjectAccess }).(pulumi.IntMapOutput)
}

type GetProjectsProjectSharedWithGroup struct {
	GroupAccessLevel string `pulumi:"groupAccessLevel"`
	// The ID of the group owned by the authenticated user to look projects for within. Cannot be used with `minAccessLevel`, `withProgrammingLanguage` or `statistics`.
	GroupId   int    `pulumi:"groupId"`
	GroupName string `pulumi:"groupName"`
}

// GetProjectsProjectSharedWithGroupInput is an input type that accepts GetProjectsProjectSharedWithGroupArgs and GetProjectsProjectSharedWithGroupOutput values.
// You can construct a concrete instance of `GetProjectsProjectSharedWithGroupInput` via:
//
//          GetProjectsProjectSharedWithGroupArgs{...}
type GetProjectsProjectSharedWithGroupInput interface {
	pulumi.Input

	ToGetProjectsProjectSharedWithGroupOutput() GetProjectsProjectSharedWithGroupOutput
	ToGetProjectsProjectSharedWithGroupOutputWithContext(context.Context) GetProjectsProjectSharedWithGroupOutput
}

type GetProjectsProjectSharedWithGroupArgs struct {
	GroupAccessLevel pulumi.StringInput `pulumi:"groupAccessLevel"`
	// The ID of the group owned by the authenticated user to look projects for within. Cannot be used with `minAccessLevel`, `withProgrammingLanguage` or `statistics`.
	GroupId   pulumi.IntInput    `pulumi:"groupId"`
	GroupName pulumi.StringInput `pulumi:"groupName"`
}

func (GetProjectsProjectSharedWithGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProjectsProjectSharedWithGroup)(nil)).Elem()
}

func (i GetProjectsProjectSharedWithGroupArgs) ToGetProjectsProjectSharedWithGroupOutput() GetProjectsProjectSharedWithGroupOutput {
	return i.ToGetProjectsProjectSharedWithGroupOutputWithContext(context.Background())
}

func (i GetProjectsProjectSharedWithGroupArgs) ToGetProjectsProjectSharedWithGroupOutputWithContext(ctx context.Context) GetProjectsProjectSharedWithGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetProjectsProjectSharedWithGroupOutput)
}

// GetProjectsProjectSharedWithGroupArrayInput is an input type that accepts GetProjectsProjectSharedWithGroupArray and GetProjectsProjectSharedWithGroupArrayOutput values.
// You can construct a concrete instance of `GetProjectsProjectSharedWithGroupArrayInput` via:
//
//          GetProjectsProjectSharedWithGroupArray{ GetProjectsProjectSharedWithGroupArgs{...} }
type GetProjectsProjectSharedWithGroupArrayInput interface {
	pulumi.Input

	ToGetProjectsProjectSharedWithGroupArrayOutput() GetProjectsProjectSharedWithGroupArrayOutput
	ToGetProjectsProjectSharedWithGroupArrayOutputWithContext(context.Context) GetProjectsProjectSharedWithGroupArrayOutput
}

type GetProjectsProjectSharedWithGroupArray []GetProjectsProjectSharedWithGroupInput

func (GetProjectsProjectSharedWithGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetProjectsProjectSharedWithGroup)(nil)).Elem()
}

func (i GetProjectsProjectSharedWithGroupArray) ToGetProjectsProjectSharedWithGroupArrayOutput() GetProjectsProjectSharedWithGroupArrayOutput {
	return i.ToGetProjectsProjectSharedWithGroupArrayOutputWithContext(context.Background())
}

func (i GetProjectsProjectSharedWithGroupArray) ToGetProjectsProjectSharedWithGroupArrayOutputWithContext(ctx context.Context) GetProjectsProjectSharedWithGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetProjectsProjectSharedWithGroupArrayOutput)
}

type GetProjectsProjectSharedWithGroupOutput struct{ *pulumi.OutputState }

func (GetProjectsProjectSharedWithGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProjectsProjectSharedWithGroup)(nil)).Elem()
}

func (o GetProjectsProjectSharedWithGroupOutput) ToGetProjectsProjectSharedWithGroupOutput() GetProjectsProjectSharedWithGroupOutput {
	return o
}

func (o GetProjectsProjectSharedWithGroupOutput) ToGetProjectsProjectSharedWithGroupOutputWithContext(ctx context.Context) GetProjectsProjectSharedWithGroupOutput {
	return o
}

func (o GetProjectsProjectSharedWithGroupOutput) GroupAccessLevel() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectsProjectSharedWithGroup) string { return v.GroupAccessLevel }).(pulumi.StringOutput)
}

// The ID of the group owned by the authenticated user to look projects for within. Cannot be used with `minAccessLevel`, `withProgrammingLanguage` or `statistics`.
func (o GetProjectsProjectSharedWithGroupOutput) GroupId() pulumi.IntOutput {
	return o.ApplyT(func(v GetProjectsProjectSharedWithGroup) int { return v.GroupId }).(pulumi.IntOutput)
}

func (o GetProjectsProjectSharedWithGroupOutput) GroupName() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectsProjectSharedWithGroup) string { return v.GroupName }).(pulumi.StringOutput)
}

type GetProjectsProjectSharedWithGroupArrayOutput struct{ *pulumi.OutputState }

func (GetProjectsProjectSharedWithGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetProjectsProjectSharedWithGroup)(nil)).Elem()
}

func (o GetProjectsProjectSharedWithGroupArrayOutput) ToGetProjectsProjectSharedWithGroupArrayOutput() GetProjectsProjectSharedWithGroupArrayOutput {
	return o
}

func (o GetProjectsProjectSharedWithGroupArrayOutput) ToGetProjectsProjectSharedWithGroupArrayOutputWithContext(ctx context.Context) GetProjectsProjectSharedWithGroupArrayOutput {
	return o
}

func (o GetProjectsProjectSharedWithGroupArrayOutput) Index(i pulumi.IntInput) GetProjectsProjectSharedWithGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetProjectsProjectSharedWithGroup {
		return vs[0].([]GetProjectsProjectSharedWithGroup)[vs[1].(int)]
	}).(GetProjectsProjectSharedWithGroupOutput)
}

type GetUsersUser struct {
	// The avatar URL of the user.
	AvatarUrl string `pulumi:"avatarUrl"`
	// The bio of the user.
	Bio string `pulumi:"bio"`
	// Whether the user can create groups.
	CanCreateGroup bool `pulumi:"canCreateGroup"`
	// Whether the user can create projects.
	CanCreateProject bool `pulumi:"canCreateProject"`
	// User's color scheme ID.
	ColorSchemeId int `pulumi:"colorSchemeId"`
	// Date the user was created at.
	CreatedAt string `pulumi:"createdAt"`
	// Current user's sign-in date.
	CurrentSignInAt string `pulumi:"currentSignInAt"`
	// The e-mail address of the user.
	Email string `pulumi:"email"`
	// Lookup users by external UID. (Requires administrator privileges)
	ExternUid string `pulumi:"externUid"`
	// Whether the user is external.
	External bool `pulumi:"external"`
	// The unique id assigned to the user by the gitlab server.
	Id int `pulumi:"id"`
	// Whether the user is an admin.
	IsAdmin bool `pulumi:"isAdmin"`
	// Last user's sign-in date.
	LastSignInAt string `pulumi:"lastSignInAt"`
	// LinkedIn profile of the user.
	Linkedin string `pulumi:"linkedin"`
	// The location of the user.
	Location string `pulumi:"location"`
	// The name of the user.
	Name string `pulumi:"name"`
	// The organization of the user.
	Organization string `pulumi:"organization"`
	// Number of projects the user can create.
	ProjectsLimit int `pulumi:"projectsLimit"`
	// The UID provider of the user.
	Provider string `pulumi:"provider"`
	// Skype username of the user.
	Skype string `pulumi:"skype"`
	// Whether the user is active or blocked.
	State string `pulumi:"state"`
	// User's theme ID.
	ThemeId int `pulumi:"themeId"`
	// Twitter username of the user.
	Twitter string `pulumi:"twitter"`
	// Whether user's two-factor auth is enabled.
	TwoFactorEnabled bool `pulumi:"twoFactorEnabled"`
	// The username of the user.
	Username string `pulumi:"username"`
	// User's website URL.
	WebsiteUrl string `pulumi:"websiteUrl"`
}

// GetUsersUserInput is an input type that accepts GetUsersUserArgs and GetUsersUserOutput values.
// You can construct a concrete instance of `GetUsersUserInput` via:
//
//          GetUsersUserArgs{...}
type GetUsersUserInput interface {
	pulumi.Input

	ToGetUsersUserOutput() GetUsersUserOutput
	ToGetUsersUserOutputWithContext(context.Context) GetUsersUserOutput
}

type GetUsersUserArgs struct {
	// The avatar URL of the user.
	AvatarUrl pulumi.StringInput `pulumi:"avatarUrl"`
	// The bio of the user.
	Bio pulumi.StringInput `pulumi:"bio"`
	// Whether the user can create groups.
	CanCreateGroup pulumi.BoolInput `pulumi:"canCreateGroup"`
	// Whether the user can create projects.
	CanCreateProject pulumi.BoolInput `pulumi:"canCreateProject"`
	// User's color scheme ID.
	ColorSchemeId pulumi.IntInput `pulumi:"colorSchemeId"`
	// Date the user was created at.
	CreatedAt pulumi.StringInput `pulumi:"createdAt"`
	// Current user's sign-in date.
	CurrentSignInAt pulumi.StringInput `pulumi:"currentSignInAt"`
	// The e-mail address of the user.
	Email pulumi.StringInput `pulumi:"email"`
	// Lookup users by external UID. (Requires administrator privileges)
	ExternUid pulumi.StringInput `pulumi:"externUid"`
	// Whether the user is external.
	External pulumi.BoolInput `pulumi:"external"`
	// The unique id assigned to the user by the gitlab server.
	Id pulumi.IntInput `pulumi:"id"`
	// Whether the user is an admin.
	IsAdmin pulumi.BoolInput `pulumi:"isAdmin"`
	// Last user's sign-in date.
	LastSignInAt pulumi.StringInput `pulumi:"lastSignInAt"`
	// LinkedIn profile of the user.
	Linkedin pulumi.StringInput `pulumi:"linkedin"`
	// The location of the user.
	Location pulumi.StringInput `pulumi:"location"`
	// The name of the user.
	Name pulumi.StringInput `pulumi:"name"`
	// The organization of the user.
	Organization pulumi.StringInput `pulumi:"organization"`
	// Number of projects the user can create.
	ProjectsLimit pulumi.IntInput `pulumi:"projectsLimit"`
	// The UID provider of the user.
	Provider pulumi.StringInput `pulumi:"provider"`
	// Skype username of the user.
	Skype pulumi.StringInput `pulumi:"skype"`
	// Whether the user is active or blocked.
	State pulumi.StringInput `pulumi:"state"`
	// User's theme ID.
	ThemeId pulumi.IntInput `pulumi:"themeId"`
	// Twitter username of the user.
	Twitter pulumi.StringInput `pulumi:"twitter"`
	// Whether user's two-factor auth is enabled.
	TwoFactorEnabled pulumi.BoolInput `pulumi:"twoFactorEnabled"`
	// The username of the user.
	Username pulumi.StringInput `pulumi:"username"`
	// User's website URL.
	WebsiteUrl pulumi.StringInput `pulumi:"websiteUrl"`
}

func (GetUsersUserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUsersUser)(nil)).Elem()
}

func (i GetUsersUserArgs) ToGetUsersUserOutput() GetUsersUserOutput {
	return i.ToGetUsersUserOutputWithContext(context.Background())
}

func (i GetUsersUserArgs) ToGetUsersUserOutputWithContext(ctx context.Context) GetUsersUserOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUsersUserOutput)
}

// GetUsersUserArrayInput is an input type that accepts GetUsersUserArray and GetUsersUserArrayOutput values.
// You can construct a concrete instance of `GetUsersUserArrayInput` via:
//
//          GetUsersUserArray{ GetUsersUserArgs{...} }
type GetUsersUserArrayInput interface {
	pulumi.Input

	ToGetUsersUserArrayOutput() GetUsersUserArrayOutput
	ToGetUsersUserArrayOutputWithContext(context.Context) GetUsersUserArrayOutput
}

type GetUsersUserArray []GetUsersUserInput

func (GetUsersUserArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetUsersUser)(nil)).Elem()
}

func (i GetUsersUserArray) ToGetUsersUserArrayOutput() GetUsersUserArrayOutput {
	return i.ToGetUsersUserArrayOutputWithContext(context.Background())
}

func (i GetUsersUserArray) ToGetUsersUserArrayOutputWithContext(ctx context.Context) GetUsersUserArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUsersUserArrayOutput)
}

type GetUsersUserOutput struct{ *pulumi.OutputState }

func (GetUsersUserOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUsersUser)(nil)).Elem()
}

func (o GetUsersUserOutput) ToGetUsersUserOutput() GetUsersUserOutput {
	return o
}

func (o GetUsersUserOutput) ToGetUsersUserOutputWithContext(ctx context.Context) GetUsersUserOutput {
	return o
}

// The avatar URL of the user.
func (o GetUsersUserOutput) AvatarUrl() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUser) string { return v.AvatarUrl }).(pulumi.StringOutput)
}

// The bio of the user.
func (o GetUsersUserOutput) Bio() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUser) string { return v.Bio }).(pulumi.StringOutput)
}

// Whether the user can create groups.
func (o GetUsersUserOutput) CanCreateGroup() pulumi.BoolOutput {
	return o.ApplyT(func(v GetUsersUser) bool { return v.CanCreateGroup }).(pulumi.BoolOutput)
}

// Whether the user can create projects.
func (o GetUsersUserOutput) CanCreateProject() pulumi.BoolOutput {
	return o.ApplyT(func(v GetUsersUser) bool { return v.CanCreateProject }).(pulumi.BoolOutput)
}

// User's color scheme ID.
func (o GetUsersUserOutput) ColorSchemeId() pulumi.IntOutput {
	return o.ApplyT(func(v GetUsersUser) int { return v.ColorSchemeId }).(pulumi.IntOutput)
}

// Date the user was created at.
func (o GetUsersUserOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUser) string { return v.CreatedAt }).(pulumi.StringOutput)
}

// Current user's sign-in date.
func (o GetUsersUserOutput) CurrentSignInAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUser) string { return v.CurrentSignInAt }).(pulumi.StringOutput)
}

// The e-mail address of the user.
func (o GetUsersUserOutput) Email() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUser) string { return v.Email }).(pulumi.StringOutput)
}

// Lookup users by external UID. (Requires administrator privileges)
func (o GetUsersUserOutput) ExternUid() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUser) string { return v.ExternUid }).(pulumi.StringOutput)
}

// Whether the user is external.
func (o GetUsersUserOutput) External() pulumi.BoolOutput {
	return o.ApplyT(func(v GetUsersUser) bool { return v.External }).(pulumi.BoolOutput)
}

// The unique id assigned to the user by the gitlab server.
func (o GetUsersUserOutput) Id() pulumi.IntOutput {
	return o.ApplyT(func(v GetUsersUser) int { return v.Id }).(pulumi.IntOutput)
}

// Whether the user is an admin.
func (o GetUsersUserOutput) IsAdmin() pulumi.BoolOutput {
	return o.ApplyT(func(v GetUsersUser) bool { return v.IsAdmin }).(pulumi.BoolOutput)
}

// Last user's sign-in date.
func (o GetUsersUserOutput) LastSignInAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUser) string { return v.LastSignInAt }).(pulumi.StringOutput)
}

// LinkedIn profile of the user.
func (o GetUsersUserOutput) Linkedin() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUser) string { return v.Linkedin }).(pulumi.StringOutput)
}

// The location of the user.
func (o GetUsersUserOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUser) string { return v.Location }).(pulumi.StringOutput)
}

// The name of the user.
func (o GetUsersUserOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUser) string { return v.Name }).(pulumi.StringOutput)
}

// The organization of the user.
func (o GetUsersUserOutput) Organization() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUser) string { return v.Organization }).(pulumi.StringOutput)
}

// Number of projects the user can create.
func (o GetUsersUserOutput) ProjectsLimit() pulumi.IntOutput {
	return o.ApplyT(func(v GetUsersUser) int { return v.ProjectsLimit }).(pulumi.IntOutput)
}

// The UID provider of the user.
func (o GetUsersUserOutput) Provider() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUser) string { return v.Provider }).(pulumi.StringOutput)
}

// Skype username of the user.
func (o GetUsersUserOutput) Skype() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUser) string { return v.Skype }).(pulumi.StringOutput)
}

// Whether the user is active or blocked.
func (o GetUsersUserOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUser) string { return v.State }).(pulumi.StringOutput)
}

// User's theme ID.
func (o GetUsersUserOutput) ThemeId() pulumi.IntOutput {
	return o.ApplyT(func(v GetUsersUser) int { return v.ThemeId }).(pulumi.IntOutput)
}

// Twitter username of the user.
func (o GetUsersUserOutput) Twitter() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUser) string { return v.Twitter }).(pulumi.StringOutput)
}

// Whether user's two-factor auth is enabled.
func (o GetUsersUserOutput) TwoFactorEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetUsersUser) bool { return v.TwoFactorEnabled }).(pulumi.BoolOutput)
}

// The username of the user.
func (o GetUsersUserOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUser) string { return v.Username }).(pulumi.StringOutput)
}

// User's website URL.
func (o GetUsersUserOutput) WebsiteUrl() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUser) string { return v.WebsiteUrl }).(pulumi.StringOutput)
}

type GetUsersUserArrayOutput struct{ *pulumi.OutputState }

func (GetUsersUserArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetUsersUser)(nil)).Elem()
}

func (o GetUsersUserArrayOutput) ToGetUsersUserArrayOutput() GetUsersUserArrayOutput {
	return o
}

func (o GetUsersUserArrayOutput) ToGetUsersUserArrayOutputWithContext(ctx context.Context) GetUsersUserArrayOutput {
	return o
}

func (o GetUsersUserArrayOutput) Index(i pulumi.IntInput) GetUsersUserOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetUsersUser {
		return vs[0].([]GetUsersUser)[vs[1].(int)]
	}).(GetUsersUserOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BranchProtectionAllowedToMergeInput)(nil)).Elem(), BranchProtectionAllowedToMergeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BranchProtectionAllowedToMergeArrayInput)(nil)).Elem(), BranchProtectionAllowedToMergeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BranchProtectionAllowedToPushInput)(nil)).Elem(), BranchProtectionAllowedToPushArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BranchProtectionAllowedToPushArrayInput)(nil)).Elem(), BranchProtectionAllowedToPushArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectPushRulesInput)(nil)).Elem(), ProjectPushRulesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectPushRulesPtrInput)(nil)).Elem(), ProjectPushRulesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetGroupMembershipMemberInput)(nil)).Elem(), GetGroupMembershipMemberArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetGroupMembershipMemberArrayInput)(nil)).Elem(), GetGroupMembershipMemberArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetProjectPushRulesInput)(nil)).Elem(), GetProjectPushRulesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetProjectsProjectInput)(nil)).Elem(), GetProjectsProjectArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetProjectsProjectArrayInput)(nil)).Elem(), GetProjectsProjectArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetProjectsProjectForkedFromProjectInput)(nil)).Elem(), GetProjectsProjectForkedFromProjectArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetProjectsProjectNamespaceInput)(nil)).Elem(), GetProjectsProjectNamespaceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetProjectsProjectOwnerInput)(nil)).Elem(), GetProjectsProjectOwnerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetProjectsProjectPermissionsInput)(nil)).Elem(), GetProjectsProjectPermissionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetProjectsProjectSharedWithGroupInput)(nil)).Elem(), GetProjectsProjectSharedWithGroupArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetProjectsProjectSharedWithGroupArrayInput)(nil)).Elem(), GetProjectsProjectSharedWithGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetUsersUserInput)(nil)).Elem(), GetUsersUserArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetUsersUserArrayInput)(nil)).Elem(), GetUsersUserArray{})
	pulumi.RegisterOutputType(BranchProtectionAllowedToMergeOutput{})
	pulumi.RegisterOutputType(BranchProtectionAllowedToMergeArrayOutput{})
	pulumi.RegisterOutputType(BranchProtectionAllowedToPushOutput{})
	pulumi.RegisterOutputType(BranchProtectionAllowedToPushArrayOutput{})
	pulumi.RegisterOutputType(ProjectPushRulesOutput{})
	pulumi.RegisterOutputType(ProjectPushRulesPtrOutput{})
	pulumi.RegisterOutputType(GetGroupMembershipMemberOutput{})
	pulumi.RegisterOutputType(GetGroupMembershipMemberArrayOutput{})
	pulumi.RegisterOutputType(GetProjectPushRulesOutput{})
	pulumi.RegisterOutputType(GetProjectsProjectOutput{})
	pulumi.RegisterOutputType(GetProjectsProjectArrayOutput{})
	pulumi.RegisterOutputType(GetProjectsProjectForkedFromProjectOutput{})
	pulumi.RegisterOutputType(GetProjectsProjectNamespaceOutput{})
	pulumi.RegisterOutputType(GetProjectsProjectOwnerOutput{})
	pulumi.RegisterOutputType(GetProjectsProjectPermissionsOutput{})
	pulumi.RegisterOutputType(GetProjectsProjectSharedWithGroupOutput{})
	pulumi.RegisterOutputType(GetProjectsProjectSharedWithGroupArrayOutput{})
	pulumi.RegisterOutputType(GetUsersUserOutput{})
	pulumi.RegisterOutputType(GetUsersUserArrayOutput{})
}
