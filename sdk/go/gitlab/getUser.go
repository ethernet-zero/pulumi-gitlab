// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package gitlab

import (
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides details about a specific user in the gitlab provider. Especially the ability to lookup the id for linking to other resources.
func LookupUser(ctx *pulumi.Context, args *GetUserArgs) (*GetUserResult, error) {
	inputs := make(map[string]interface{})
	if args != nil {
		inputs["email"] = args.Email
		inputs["userId"] = args.UserId
		inputs["username"] = args.Username
	}
	outputs, err := ctx.Invoke("gitlab:index/getUser:getUser", inputs)
	if err != nil {
		return nil, err
	}
	return &GetUserResult{
		AvatarUrl: outputs["avatarUrl"],
		Bio: outputs["bio"],
		CanCreateGroup: outputs["canCreateGroup"],
		CanCreateProject: outputs["canCreateProject"],
		ColorSchemeId: outputs["colorSchemeId"],
		CreatedAt: outputs["createdAt"],
		CurrentSignInAt: outputs["currentSignInAt"],
		Email: outputs["email"],
		ExternUid: outputs["externUid"],
		External: outputs["external"],
		IsAdmin: outputs["isAdmin"],
		LastSignInAt: outputs["lastSignInAt"],
		Linkedin: outputs["linkedin"],
		Location: outputs["location"],
		Name: outputs["name"],
		Organization: outputs["organization"],
		ProjectsLimit: outputs["projectsLimit"],
		Skype: outputs["skype"],
		State: outputs["state"],
		ThemeId: outputs["themeId"],
		Twitter: outputs["twitter"],
		TwoFactorEnabled: outputs["twoFactorEnabled"],
		UserId: outputs["userId"],
		UserProvider: outputs["userProvider"],
		Username: outputs["username"],
		WebsiteUrl: outputs["websiteUrl"],
		Id: outputs["id"],
	}, nil
}

// A collection of arguments for invoking getUser.
type GetUserArgs struct {
	// The e-mail address of the user. (Requires administrator privileges)
	Email interface{}
	// The ID of the user.
	UserId interface{}
	// The username of the user.
	Username interface{}
}

// A collection of values returned by getUser.
type GetUserResult struct {
	// The avatar URL of the user.
	AvatarUrl interface{}
	// The bio of the user.
	Bio interface{}
	// Whether the user can create groups.
	CanCreateGroup interface{}
	// Whether the user can create projects.
	CanCreateProject interface{}
	// User's color scheme ID.
	ColorSchemeId interface{}
	// Date the user was created at.
	CreatedAt interface{}
	// Current user's sign-in date.
	CurrentSignInAt interface{}
	// The e-mail address of the user.
	Email interface{}
	// The external UID of the user.
	ExternUid interface{}
	// Whether the user is external.
	External interface{}
	// Whether the user is an admin.
	IsAdmin interface{}
	// Last user's sign-in date.
	LastSignInAt interface{}
	// Linkedin profile of the user.
	Linkedin interface{}
	// The location of the user.
	Location interface{}
	// The name of the user.
	Name interface{}
	// The organization of the user.
	Organization interface{}
	// Number of projects the user can create.
	ProjectsLimit interface{}
	// Skype username of the user.
	Skype interface{}
	// Whether the user is active or blocked.
	State interface{}
	// User's theme ID.
	ThemeId interface{}
	// Twitter username of the user.
	Twitter interface{}
	// Whether user's two factor auth is enabled.
	TwoFactorEnabled interface{}
	UserId interface{}
	// The UID provider of the user.
	UserProvider interface{}
	// The username of the user.
	Username interface{}
	// User's website URL.
	WebsiteUrl interface{}
	// id is the provider-assigned unique ID for this managed resource.
	Id interface{}
}
