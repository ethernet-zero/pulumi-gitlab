// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package gitlab

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// This resource allows you to create and manage pipeline triggers
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-gitlab/blob/master/website/docs/r/pipeline_trigger.html.markdown.
type PipelineTrigger struct {
	s *pulumi.ResourceState
}

// NewPipelineTrigger registers a new resource with the given unique name, arguments, and options.
func NewPipelineTrigger(ctx *pulumi.Context,
	name string, args *PipelineTriggerArgs, opts ...pulumi.ResourceOpt) (*PipelineTrigger, error) {
	if args == nil || args.Description == nil {
		return nil, errors.New("missing required argument 'Description'")
	}
	if args == nil || args.Project == nil {
		return nil, errors.New("missing required argument 'Project'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["description"] = nil
		inputs["project"] = nil
	} else {
		inputs["description"] = args.Description
		inputs["project"] = args.Project
	}
	inputs["token"] = nil
	s, err := ctx.RegisterResource("gitlab:index/pipelineTrigger:PipelineTrigger", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &PipelineTrigger{s: s}, nil
}

// GetPipelineTrigger gets an existing PipelineTrigger resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPipelineTrigger(ctx *pulumi.Context,
	name string, id pulumi.ID, state *PipelineTriggerState, opts ...pulumi.ResourceOpt) (*PipelineTrigger, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["description"] = state.Description
		inputs["project"] = state.Project
		inputs["token"] = state.Token
	}
	s, err := ctx.ReadResource("gitlab:index/pipelineTrigger:PipelineTrigger", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &PipelineTrigger{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *PipelineTrigger) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *PipelineTrigger) ID() pulumi.IDOutput {
	return r.s.ID()
}

// The description of the pipeline trigger.
func (r *PipelineTrigger) Description() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["description"])
}

// The name or id of the project to add the trigger to.
func (r *PipelineTrigger) Project() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["project"])
}

func (r *PipelineTrigger) Token() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["token"])
}

// Input properties used for looking up and filtering PipelineTrigger resources.
type PipelineTriggerState struct {
	// The description of the pipeline trigger.
	Description interface{}
	// The name or id of the project to add the trigger to.
	Project interface{}
	Token interface{}
}

// The set of arguments for constructing a PipelineTrigger resource.
type PipelineTriggerArgs struct {
	// The description of the pipeline trigger.
	Description interface{}
	// The name or id of the project to add the trigger to.
	Project interface{}
}
