// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package gitlab

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// This resource allows you to protect a specific tag or wildcard by an access level so that the user with less access level cannot Create the tags.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-gitlab/blob/master/website/docs/r/tag_protection.html.markdown.
type TagProtection struct {
	s *pulumi.ResourceState
}

// NewTagProtection registers a new resource with the given unique name, arguments, and options.
func NewTagProtection(ctx *pulumi.Context,
	name string, args *TagProtectionArgs, opts ...pulumi.ResourceOpt) (*TagProtection, error) {
	if args == nil || args.CreateAccessLevel == nil {
		return nil, errors.New("missing required argument 'CreateAccessLevel'")
	}
	if args == nil || args.Project == nil {
		return nil, errors.New("missing required argument 'Project'")
	}
	if args == nil || args.Tag == nil {
		return nil, errors.New("missing required argument 'Tag'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["createAccessLevel"] = nil
		inputs["project"] = nil
		inputs["tag"] = nil
	} else {
		inputs["createAccessLevel"] = args.CreateAccessLevel
		inputs["project"] = args.Project
		inputs["tag"] = args.Tag
	}
	s, err := ctx.RegisterResource("gitlab:index/tagProtection:TagProtection", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &TagProtection{s: s}, nil
}

// GetTagProtection gets an existing TagProtection resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTagProtection(ctx *pulumi.Context,
	name string, id pulumi.ID, state *TagProtectionState, opts ...pulumi.ResourceOpt) (*TagProtection, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["createAccessLevel"] = state.CreateAccessLevel
		inputs["project"] = state.Project
		inputs["tag"] = state.Tag
	}
	s, err := ctx.ReadResource("gitlab:index/tagProtection:TagProtection", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &TagProtection{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *TagProtection) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *TagProtection) ID() pulumi.IDOutput {
	return r.s.ID()
}

// One of five levels of access to the project.
func (r *TagProtection) CreateAccessLevel() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["createAccessLevel"])
}

// The id of the project.
func (r *TagProtection) Project() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["project"])
}

// Name of the tag or wildcard.
func (r *TagProtection) Tag() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["tag"])
}

// Input properties used for looking up and filtering TagProtection resources.
type TagProtectionState struct {
	// One of five levels of access to the project.
	CreateAccessLevel interface{}
	// The id of the project.
	Project interface{}
	// Name of the tag or wildcard.
	Tag interface{}
}

// The set of arguments for constructing a TagProtection resource.
type TagProtectionArgs struct {
	// One of five levels of access to the project.
	CreateAccessLevel interface{}
	// The id of the project.
	Project interface{}
	// Name of the tag or wildcard.
	Tag interface{}
}
