// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package gitlab

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// This resource allows you to manage Slack notifications integration.
type ServiceSlack struct {
	s *pulumi.ResourceState
}

// NewServiceSlack registers a new resource with the given unique name, arguments, and options.
func NewServiceSlack(ctx *pulumi.Context,
	name string, args *ServiceSlackArgs, opts ...pulumi.ResourceOpt) (*ServiceSlack, error) {
	if args == nil || args.Project == nil {
		return nil, errors.New("missing required argument 'Project'")
	}
	if args == nil || args.Webhook == nil {
		return nil, errors.New("missing required argument 'Webhook'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["confidentialIssueChannel"] = nil
		inputs["confidentialIssuesEvents"] = nil
		inputs["confidentialNoteEvents"] = nil
		inputs["issueChannel"] = nil
		inputs["issuesEvents"] = nil
		inputs["mergeRequestChannel"] = nil
		inputs["mergeRequestsEvents"] = nil
		inputs["noteChannel"] = nil
		inputs["noteEvents"] = nil
		inputs["notifyOnlyBrokenPipelines"] = nil
		inputs["notifyOnlyDefaultBranch"] = nil
		inputs["pipelineChannel"] = nil
		inputs["pipelineEvents"] = nil
		inputs["project"] = nil
		inputs["pushChannel"] = nil
		inputs["pushEvents"] = nil
		inputs["tagPushChannel"] = nil
		inputs["tagPushEvents"] = nil
		inputs["username"] = nil
		inputs["webhook"] = nil
		inputs["wikiPageChannel"] = nil
		inputs["wikiPageEvents"] = nil
	} else {
		inputs["confidentialIssueChannel"] = args.ConfidentialIssueChannel
		inputs["confidentialIssuesEvents"] = args.ConfidentialIssuesEvents
		inputs["confidentialNoteEvents"] = args.ConfidentialNoteEvents
		inputs["issueChannel"] = args.IssueChannel
		inputs["issuesEvents"] = args.IssuesEvents
		inputs["mergeRequestChannel"] = args.MergeRequestChannel
		inputs["mergeRequestsEvents"] = args.MergeRequestsEvents
		inputs["noteChannel"] = args.NoteChannel
		inputs["noteEvents"] = args.NoteEvents
		inputs["notifyOnlyBrokenPipelines"] = args.NotifyOnlyBrokenPipelines
		inputs["notifyOnlyDefaultBranch"] = args.NotifyOnlyDefaultBranch
		inputs["pipelineChannel"] = args.PipelineChannel
		inputs["pipelineEvents"] = args.PipelineEvents
		inputs["project"] = args.Project
		inputs["pushChannel"] = args.PushChannel
		inputs["pushEvents"] = args.PushEvents
		inputs["tagPushChannel"] = args.TagPushChannel
		inputs["tagPushEvents"] = args.TagPushEvents
		inputs["username"] = args.Username
		inputs["webhook"] = args.Webhook
		inputs["wikiPageChannel"] = args.WikiPageChannel
		inputs["wikiPageEvents"] = args.WikiPageEvents
	}
	inputs["jobEvents"] = nil
	s, err := ctx.RegisterResource("gitlab:index/serviceSlack:ServiceSlack", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &ServiceSlack{s: s}, nil
}

// GetServiceSlack gets an existing ServiceSlack resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetServiceSlack(ctx *pulumi.Context,
	name string, id pulumi.ID, state *ServiceSlackState, opts ...pulumi.ResourceOpt) (*ServiceSlack, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["confidentialIssueChannel"] = state.ConfidentialIssueChannel
		inputs["confidentialIssuesEvents"] = state.ConfidentialIssuesEvents
		inputs["confidentialNoteEvents"] = state.ConfidentialNoteEvents
		inputs["issueChannel"] = state.IssueChannel
		inputs["issuesEvents"] = state.IssuesEvents
		inputs["jobEvents"] = state.JobEvents
		inputs["mergeRequestChannel"] = state.MergeRequestChannel
		inputs["mergeRequestsEvents"] = state.MergeRequestsEvents
		inputs["noteChannel"] = state.NoteChannel
		inputs["noteEvents"] = state.NoteEvents
		inputs["notifyOnlyBrokenPipelines"] = state.NotifyOnlyBrokenPipelines
		inputs["notifyOnlyDefaultBranch"] = state.NotifyOnlyDefaultBranch
		inputs["pipelineChannel"] = state.PipelineChannel
		inputs["pipelineEvents"] = state.PipelineEvents
		inputs["project"] = state.Project
		inputs["pushChannel"] = state.PushChannel
		inputs["pushEvents"] = state.PushEvents
		inputs["tagPushChannel"] = state.TagPushChannel
		inputs["tagPushEvents"] = state.TagPushEvents
		inputs["username"] = state.Username
		inputs["webhook"] = state.Webhook
		inputs["wikiPageChannel"] = state.WikiPageChannel
		inputs["wikiPageEvents"] = state.WikiPageEvents
	}
	s, err := ctx.ReadResource("gitlab:index/serviceSlack:ServiceSlack", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &ServiceSlack{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *ServiceSlack) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *ServiceSlack) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// The name of the channel to receive confidential issue events notifications.
func (r *ServiceSlack) ConfidentialIssueChannel() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["confidentialIssueChannel"])
}

// Enable notifications for confidential issues events.
func (r *ServiceSlack) ConfidentialIssuesEvents() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["confidentialIssuesEvents"])
}

// Enable notifications for confidential note events.
func (r *ServiceSlack) ConfidentialNoteEvents() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["confidentialNoteEvents"])
}

// The name of the channel to receive issue events notifications.
func (r *ServiceSlack) IssueChannel() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["issueChannel"])
}

// Enable notifications for issues events.
func (r *ServiceSlack) IssuesEvents() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["issuesEvents"])
}

func (r *ServiceSlack) JobEvents() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["jobEvents"])
}

// The name of the channel to receive merge request events notifications.
func (r *ServiceSlack) MergeRequestChannel() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["mergeRequestChannel"])
}

// Enable notifications for merge requests events.
func (r *ServiceSlack) MergeRequestsEvents() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["mergeRequestsEvents"])
}

// The name of the channel to receive note events notifications.
func (r *ServiceSlack) NoteChannel() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["noteChannel"])
}

// Enable notifications for note events.
func (r *ServiceSlack) NoteEvents() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["noteEvents"])
}

// Send notifications for broken pipelines.
func (r *ServiceSlack) NotifyOnlyBrokenPipelines() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["notifyOnlyBrokenPipelines"])
}

// Send notifications only for the default branch.
func (r *ServiceSlack) NotifyOnlyDefaultBranch() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["notifyOnlyDefaultBranch"])
}

// The name of the channel to receive pipeline events notifications.
func (r *ServiceSlack) PipelineChannel() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["pipelineChannel"])
}

// Enable notifications for pipeline events.
func (r *ServiceSlack) PipelineEvents() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["pipelineEvents"])
}

// ID of the project you want to activate integration on.
func (r *ServiceSlack) Project() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["project"])
}

// The name of the channel to receive push events notifications.
func (r *ServiceSlack) PushChannel() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["pushChannel"])
}

// Enable notifications for push events.
func (r *ServiceSlack) PushEvents() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["pushEvents"])
}

// The name of the channel to receive tag push events notifications.
func (r *ServiceSlack) TagPushChannel() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["tagPushChannel"])
}

// Enable notifications for tag push events.
func (r *ServiceSlack) TagPushEvents() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["tagPushEvents"])
}

// Username to use.
func (r *ServiceSlack) Username() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["username"])
}

// Webhook URL (ex.: https://hooks.slack.com/services/...)
func (r *ServiceSlack) Webhook() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["webhook"])
}

// The name of the channel to receive wiki page events notifications.
func (r *ServiceSlack) WikiPageChannel() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["wikiPageChannel"])
}

// Enable notifications for wiki page events.
func (r *ServiceSlack) WikiPageEvents() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["wikiPageEvents"])
}

// Input properties used for looking up and filtering ServiceSlack resources.
type ServiceSlackState struct {
	// The name of the channel to receive confidential issue events notifications.
	ConfidentialIssueChannel interface{}
	// Enable notifications for confidential issues events.
	ConfidentialIssuesEvents interface{}
	// Enable notifications for confidential note events.
	ConfidentialNoteEvents interface{}
	// The name of the channel to receive issue events notifications.
	IssueChannel interface{}
	// Enable notifications for issues events.
	IssuesEvents interface{}
	JobEvents interface{}
	// The name of the channel to receive merge request events notifications.
	MergeRequestChannel interface{}
	// Enable notifications for merge requests events.
	MergeRequestsEvents interface{}
	// The name of the channel to receive note events notifications.
	NoteChannel interface{}
	// Enable notifications for note events.
	NoteEvents interface{}
	// Send notifications for broken pipelines.
	NotifyOnlyBrokenPipelines interface{}
	// Send notifications only for the default branch.
	NotifyOnlyDefaultBranch interface{}
	// The name of the channel to receive pipeline events notifications.
	PipelineChannel interface{}
	// Enable notifications for pipeline events.
	PipelineEvents interface{}
	// ID of the project you want to activate integration on.
	Project interface{}
	// The name of the channel to receive push events notifications.
	PushChannel interface{}
	// Enable notifications for push events.
	PushEvents interface{}
	// The name of the channel to receive tag push events notifications.
	TagPushChannel interface{}
	// Enable notifications for tag push events.
	TagPushEvents interface{}
	// Username to use.
	Username interface{}
	// Webhook URL (ex.: https://hooks.slack.com/services/...)
	Webhook interface{}
	// The name of the channel to receive wiki page events notifications.
	WikiPageChannel interface{}
	// Enable notifications for wiki page events.
	WikiPageEvents interface{}
}

// The set of arguments for constructing a ServiceSlack resource.
type ServiceSlackArgs struct {
	// The name of the channel to receive confidential issue events notifications.
	ConfidentialIssueChannel interface{}
	// Enable notifications for confidential issues events.
	ConfidentialIssuesEvents interface{}
	// Enable notifications for confidential note events.
	ConfidentialNoteEvents interface{}
	// The name of the channel to receive issue events notifications.
	IssueChannel interface{}
	// Enable notifications for issues events.
	IssuesEvents interface{}
	// The name of the channel to receive merge request events notifications.
	MergeRequestChannel interface{}
	// Enable notifications for merge requests events.
	MergeRequestsEvents interface{}
	// The name of the channel to receive note events notifications.
	NoteChannel interface{}
	// Enable notifications for note events.
	NoteEvents interface{}
	// Send notifications for broken pipelines.
	NotifyOnlyBrokenPipelines interface{}
	// Send notifications only for the default branch.
	NotifyOnlyDefaultBranch interface{}
	// The name of the channel to receive pipeline events notifications.
	PipelineChannel interface{}
	// Enable notifications for pipeline events.
	PipelineEvents interface{}
	// ID of the project you want to activate integration on.
	Project interface{}
	// The name of the channel to receive push events notifications.
	PushChannel interface{}
	// Enable notifications for push events.
	PushEvents interface{}
	// The name of the channel to receive tag push events notifications.
	TagPushChannel interface{}
	// Enable notifications for tag push events.
	TagPushEvents interface{}
	// Username to use.
	Username interface{}
	// Webhook URL (ex.: https://hooks.slack.com/services/...)
	Webhook interface{}
	// The name of the channel to receive wiki page events notifications.
	WikiPageChannel interface{}
	// Enable notifications for wiki page events.
	WikiPageEvents interface{}
}
