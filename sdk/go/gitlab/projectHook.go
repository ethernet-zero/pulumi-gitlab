// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package gitlab

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// This resource allows you to create and manage hooks for your GitLab projects.
// For further information on hooks, consult the [gitlab
// documentation](https://docs.gitlab.com/ce/user/project/integrations/webhooks.html).
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-gitlab/blob/master/website/docs/r/project_hook.html.markdown.
type ProjectHook struct {
	s *pulumi.ResourceState
}

// NewProjectHook registers a new resource with the given unique name, arguments, and options.
func NewProjectHook(ctx *pulumi.Context,
	name string, args *ProjectHookArgs, opts ...pulumi.ResourceOpt) (*ProjectHook, error) {
	if args == nil || args.Project == nil {
		return nil, errors.New("missing required argument 'Project'")
	}
	if args == nil || args.Url == nil {
		return nil, errors.New("missing required argument 'Url'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["enableSslVerification"] = nil
		inputs["issuesEvents"] = nil
		inputs["jobEvents"] = nil
		inputs["mergeRequestsEvents"] = nil
		inputs["noteEvents"] = nil
		inputs["pipelineEvents"] = nil
		inputs["project"] = nil
		inputs["pushEvents"] = nil
		inputs["tagPushEvents"] = nil
		inputs["token"] = nil
		inputs["url"] = nil
		inputs["wikiPageEvents"] = nil
	} else {
		inputs["enableSslVerification"] = args.EnableSslVerification
		inputs["issuesEvents"] = args.IssuesEvents
		inputs["jobEvents"] = args.JobEvents
		inputs["mergeRequestsEvents"] = args.MergeRequestsEvents
		inputs["noteEvents"] = args.NoteEvents
		inputs["pipelineEvents"] = args.PipelineEvents
		inputs["project"] = args.Project
		inputs["pushEvents"] = args.PushEvents
		inputs["tagPushEvents"] = args.TagPushEvents
		inputs["token"] = args.Token
		inputs["url"] = args.Url
		inputs["wikiPageEvents"] = args.WikiPageEvents
	}
	s, err := ctx.RegisterResource("gitlab:index/projectHook:ProjectHook", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &ProjectHook{s: s}, nil
}

// GetProjectHook gets an existing ProjectHook resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetProjectHook(ctx *pulumi.Context,
	name string, id pulumi.ID, state *ProjectHookState, opts ...pulumi.ResourceOpt) (*ProjectHook, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["enableSslVerification"] = state.EnableSslVerification
		inputs["issuesEvents"] = state.IssuesEvents
		inputs["jobEvents"] = state.JobEvents
		inputs["mergeRequestsEvents"] = state.MergeRequestsEvents
		inputs["noteEvents"] = state.NoteEvents
		inputs["pipelineEvents"] = state.PipelineEvents
		inputs["project"] = state.Project
		inputs["pushEvents"] = state.PushEvents
		inputs["tagPushEvents"] = state.TagPushEvents
		inputs["token"] = state.Token
		inputs["url"] = state.Url
		inputs["wikiPageEvents"] = state.WikiPageEvents
	}
	s, err := ctx.ReadResource("gitlab:index/projectHook:ProjectHook", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &ProjectHook{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *ProjectHook) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *ProjectHook) ID() pulumi.IDOutput {
	return r.s.ID()
}

// Enable ssl verification when invoking
// the hook.
func (r *ProjectHook) EnableSslVerification() pulumi.BoolOutput {
	return (pulumi.BoolOutput)(r.s.State["enableSslVerification"])
}

// Invoke the hook for issues events.
func (r *ProjectHook) IssuesEvents() pulumi.BoolOutput {
	return (pulumi.BoolOutput)(r.s.State["issuesEvents"])
}

// Invoke the hook for job events.
func (r *ProjectHook) JobEvents() pulumi.BoolOutput {
	return (pulumi.BoolOutput)(r.s.State["jobEvents"])
}

// Invoke the hook for merge requests.
func (r *ProjectHook) MergeRequestsEvents() pulumi.BoolOutput {
	return (pulumi.BoolOutput)(r.s.State["mergeRequestsEvents"])
}

// Invoke the hook for notes events.
func (r *ProjectHook) NoteEvents() pulumi.BoolOutput {
	return (pulumi.BoolOutput)(r.s.State["noteEvents"])
}

// Invoke the hook for pipeline events.
func (r *ProjectHook) PipelineEvents() pulumi.BoolOutput {
	return (pulumi.BoolOutput)(r.s.State["pipelineEvents"])
}

// The name or id of the project to add the hook to.
func (r *ProjectHook) Project() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["project"])
}

// Invoke the hook for push events.
func (r *ProjectHook) PushEvents() pulumi.BoolOutput {
	return (pulumi.BoolOutput)(r.s.State["pushEvents"])
}

// Invoke the hook for tag push events.
func (r *ProjectHook) TagPushEvents() pulumi.BoolOutput {
	return (pulumi.BoolOutput)(r.s.State["tagPushEvents"])
}

// A token to present when invoking the hook.
func (r *ProjectHook) Token() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["token"])
}

// The url of the hook to invoke.
func (r *ProjectHook) Url() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["url"])
}

// Invoke the hook for wiki page events.
func (r *ProjectHook) WikiPageEvents() pulumi.BoolOutput {
	return (pulumi.BoolOutput)(r.s.State["wikiPageEvents"])
}

// Input properties used for looking up and filtering ProjectHook resources.
type ProjectHookState struct {
	// Enable ssl verification when invoking
	// the hook.
	EnableSslVerification interface{}
	// Invoke the hook for issues events.
	IssuesEvents interface{}
	// Invoke the hook for job events.
	JobEvents interface{}
	// Invoke the hook for merge requests.
	MergeRequestsEvents interface{}
	// Invoke the hook for notes events.
	NoteEvents interface{}
	// Invoke the hook for pipeline events.
	PipelineEvents interface{}
	// The name or id of the project to add the hook to.
	Project interface{}
	// Invoke the hook for push events.
	PushEvents interface{}
	// Invoke the hook for tag push events.
	TagPushEvents interface{}
	// A token to present when invoking the hook.
	Token interface{}
	// The url of the hook to invoke.
	Url interface{}
	// Invoke the hook for wiki page events.
	WikiPageEvents interface{}
}

// The set of arguments for constructing a ProjectHook resource.
type ProjectHookArgs struct {
	// Enable ssl verification when invoking
	// the hook.
	EnableSslVerification interface{}
	// Invoke the hook for issues events.
	IssuesEvents interface{}
	// Invoke the hook for job events.
	JobEvents interface{}
	// Invoke the hook for merge requests.
	MergeRequestsEvents interface{}
	// Invoke the hook for notes events.
	NoteEvents interface{}
	// Invoke the hook for pipeline events.
	PipelineEvents interface{}
	// The name or id of the project to add the hook to.
	Project interface{}
	// Invoke the hook for push events.
	PushEvents interface{}
	// Invoke the hook for tag push events.
	TagPushEvents interface{}
	// A token to present when invoking the hook.
	Token interface{}
	// The url of the hook to invoke.
	Url interface{}
	// Invoke the hook for wiki page events.
	WikiPageEvents interface{}
}
