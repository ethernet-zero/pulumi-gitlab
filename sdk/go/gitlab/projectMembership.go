// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package gitlab

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// This resource allows you to add a current user to an existing project with a set access level.
type ProjectMembership struct {
	s *pulumi.ResourceState
}

// NewProjectMembership registers a new resource with the given unique name, arguments, and options.
func NewProjectMembership(ctx *pulumi.Context,
	name string, args *ProjectMembershipArgs, opts ...pulumi.ResourceOpt) (*ProjectMembership, error) {
	if args == nil || args.AccessLevel == nil {
		return nil, errors.New("missing required argument 'AccessLevel'")
	}
	if args == nil || args.ProjectId == nil {
		return nil, errors.New("missing required argument 'ProjectId'")
	}
	if args == nil || args.UserId == nil {
		return nil, errors.New("missing required argument 'UserId'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["accessLevel"] = nil
		inputs["projectId"] = nil
		inputs["userId"] = nil
	} else {
		inputs["accessLevel"] = args.AccessLevel
		inputs["projectId"] = args.ProjectId
		inputs["userId"] = args.UserId
	}
	s, err := ctx.RegisterResource("gitlab:index/projectMembership:ProjectMembership", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &ProjectMembership{s: s}, nil
}

// GetProjectMembership gets an existing ProjectMembership resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetProjectMembership(ctx *pulumi.Context,
	name string, id pulumi.ID, state *ProjectMembershipState, opts ...pulumi.ResourceOpt) (*ProjectMembership, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["accessLevel"] = state.AccessLevel
		inputs["projectId"] = state.ProjectId
		inputs["userId"] = state.UserId
	}
	s, err := ctx.ReadResource("gitlab:index/projectMembership:ProjectMembership", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &ProjectMembership{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *ProjectMembership) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *ProjectMembership) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// One of five levels of access to the project.
func (r *ProjectMembership) AccessLevel() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["accessLevel"])
}

// The id of the project.
func (r *ProjectMembership) ProjectId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["projectId"])
}

// The id of the user.
func (r *ProjectMembership) UserId() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["userId"])
}

// Input properties used for looking up and filtering ProjectMembership resources.
type ProjectMembershipState struct {
	// One of five levels of access to the project.
	AccessLevel interface{}
	// The id of the project.
	ProjectId interface{}
	// The id of the user.
	UserId interface{}
}

// The set of arguments for constructing a ProjectMembership resource.
type ProjectMembershipArgs struct {
	// One of five levels of access to the project.
	AccessLevel interface{}
	// The id of the project.
	ProjectId interface{}
	// The id of the user.
	UserId interface{}
}
