// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package gitlab

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// This resource allows you to create and manage pipeline schedules.
// For further information on clusters, consult the [gitlab
// documentation](https://docs.gitlab.com/ce/user/project/pipelines/schedules.html).
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-gitlab/blob/master/website/docs/r/pipeline_schedule.html.markdown.
type PipelineSchedule struct {
	s *pulumi.ResourceState
}

// NewPipelineSchedule registers a new resource with the given unique name, arguments, and options.
func NewPipelineSchedule(ctx *pulumi.Context,
	name string, args *PipelineScheduleArgs, opts ...pulumi.ResourceOpt) (*PipelineSchedule, error) {
	if args == nil || args.Cron == nil {
		return nil, errors.New("missing required argument 'Cron'")
	}
	if args == nil || args.Description == nil {
		return nil, errors.New("missing required argument 'Description'")
	}
	if args == nil || args.Project == nil {
		return nil, errors.New("missing required argument 'Project'")
	}
	if args == nil || args.Ref == nil {
		return nil, errors.New("missing required argument 'Ref'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["active"] = nil
		inputs["cron"] = nil
		inputs["cronTimezone"] = nil
		inputs["description"] = nil
		inputs["project"] = nil
		inputs["ref"] = nil
	} else {
		inputs["active"] = args.Active
		inputs["cron"] = args.Cron
		inputs["cronTimezone"] = args.CronTimezone
		inputs["description"] = args.Description
		inputs["project"] = args.Project
		inputs["ref"] = args.Ref
	}
	s, err := ctx.RegisterResource("gitlab:index/pipelineSchedule:PipelineSchedule", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &PipelineSchedule{s: s}, nil
}

// GetPipelineSchedule gets an existing PipelineSchedule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPipelineSchedule(ctx *pulumi.Context,
	name string, id pulumi.ID, state *PipelineScheduleState, opts ...pulumi.ResourceOpt) (*PipelineSchedule, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["active"] = state.Active
		inputs["cron"] = state.Cron
		inputs["cronTimezone"] = state.CronTimezone
		inputs["description"] = state.Description
		inputs["project"] = state.Project
		inputs["ref"] = state.Ref
	}
	s, err := ctx.ReadResource("gitlab:index/pipelineSchedule:PipelineSchedule", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &PipelineSchedule{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *PipelineSchedule) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *PipelineSchedule) ID() pulumi.IDOutput {
	return r.s.ID()
}

// The activation of pipeline schedule. If false is set, the pipeline schedule will deactivated initially.
func (r *PipelineSchedule) Active() pulumi.BoolOutput {
	return (pulumi.BoolOutput)(r.s.State["active"])
}

// The cron (e.g. `0 1 * * *`).
func (r *PipelineSchedule) Cron() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["cron"])
}

// The timezone.
func (r *PipelineSchedule) CronTimezone() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["cronTimezone"])
}

// The description of the pipeline schedule.
func (r *PipelineSchedule) Description() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["description"])
}

// The name or id of the project to add the schedule to.
func (r *PipelineSchedule) Project() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["project"])
}

// The branch/tag name to be triggered.
func (r *PipelineSchedule) Ref() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["ref"])
}

// Input properties used for looking up and filtering PipelineSchedule resources.
type PipelineScheduleState struct {
	// The activation of pipeline schedule. If false is set, the pipeline schedule will deactivated initially.
	Active interface{}
	// The cron (e.g. `0 1 * * *`).
	Cron interface{}
	// The timezone.
	CronTimezone interface{}
	// The description of the pipeline schedule.
	Description interface{}
	// The name or id of the project to add the schedule to.
	Project interface{}
	// The branch/tag name to be triggered.
	Ref interface{}
}

// The set of arguments for constructing a PipelineSchedule resource.
type PipelineScheduleArgs struct {
	// The activation of pipeline schedule. If false is set, the pipeline schedule will deactivated initially.
	Active interface{}
	// The cron (e.g. `0 1 * * *`).
	Cron interface{}
	// The timezone.
	CronTimezone interface{}
	// The description of the pipeline schedule.
	Description interface{}
	// The name or id of the project to add the schedule to.
	Project interface{}
	// The branch/tag name to be triggered.
	Ref interface{}
}
