// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package gitlab

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The `ProjectVariable` data source allows to retrieve details about a project-level CI/CD variable.
//
// **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/project_level_variables.html)
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-gitlab/sdk/v4/go/gitlab"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := gitlab.LookupProjectVariable(ctx, &GetProjectVariableArgs{
// 			Key:     "foo",
// 			Project: "my/example/project",
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		_, err = gitlab.LookupProjectVariable(ctx, &GetProjectVariableArgs{
// 			EnvironmentScope: pulumi.StringRef("staging/*"),
// 			Key:              "bar",
// 			Project:          "my/example/project",
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
func LookupProjectVariable(ctx *pulumi.Context, args *LookupProjectVariableArgs, opts ...pulumi.InvokeOption) (*LookupProjectVariableResult, error) {
	var rv LookupProjectVariableResult
	err := ctx.Invoke("gitlab:index/getProjectVariable:getProjectVariable", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getProjectVariable.
type LookupProjectVariableArgs struct {
	EnvironmentScope *string `pulumi:"environmentScope"`
	Key              string  `pulumi:"key"`
	Project          string  `pulumi:"project"`
}

// A collection of values returned by getProjectVariable.
type LookupProjectVariableResult struct {
	EnvironmentScope string `pulumi:"environmentScope"`
	// The provider-assigned unique ID for this managed resource.
	Id           string `pulumi:"id"`
	Key          string `pulumi:"key"`
	Masked       bool   `pulumi:"masked"`
	Project      string `pulumi:"project"`
	Protected    bool   `pulumi:"protected"`
	Value        string `pulumi:"value"`
	VariableType string `pulumi:"variableType"`
}

func LookupProjectVariableOutput(ctx *pulumi.Context, args LookupProjectVariableOutputArgs, opts ...pulumi.InvokeOption) LookupProjectVariableResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupProjectVariableResult, error) {
			args := v.(LookupProjectVariableArgs)
			r, err := LookupProjectVariable(ctx, &args, opts...)
			var s LookupProjectVariableResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupProjectVariableResultOutput)
}

// A collection of arguments for invoking getProjectVariable.
type LookupProjectVariableOutputArgs struct {
	EnvironmentScope pulumi.StringPtrInput `pulumi:"environmentScope"`
	Key              pulumi.StringInput    `pulumi:"key"`
	Project          pulumi.StringInput    `pulumi:"project"`
}

func (LookupProjectVariableOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupProjectVariableArgs)(nil)).Elem()
}

// A collection of values returned by getProjectVariable.
type LookupProjectVariableResultOutput struct{ *pulumi.OutputState }

func (LookupProjectVariableResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupProjectVariableResult)(nil)).Elem()
}

func (o LookupProjectVariableResultOutput) ToLookupProjectVariableResultOutput() LookupProjectVariableResultOutput {
	return o
}

func (o LookupProjectVariableResultOutput) ToLookupProjectVariableResultOutputWithContext(ctx context.Context) LookupProjectVariableResultOutput {
	return o
}

func (o LookupProjectVariableResultOutput) EnvironmentScope() pulumi.StringOutput {
	return o.ApplyT(func(v LookupProjectVariableResult) string { return v.EnvironmentScope }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupProjectVariableResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupProjectVariableResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupProjectVariableResultOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v LookupProjectVariableResult) string { return v.Key }).(pulumi.StringOutput)
}

func (o LookupProjectVariableResultOutput) Masked() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupProjectVariableResult) bool { return v.Masked }).(pulumi.BoolOutput)
}

func (o LookupProjectVariableResultOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v LookupProjectVariableResult) string { return v.Project }).(pulumi.StringOutput)
}

func (o LookupProjectVariableResultOutput) Protected() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupProjectVariableResult) bool { return v.Protected }).(pulumi.BoolOutput)
}

func (o LookupProjectVariableResultOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v LookupProjectVariableResult) string { return v.Value }).(pulumi.StringOutput)
}

func (o LookupProjectVariableResultOutput) VariableType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupProjectVariableResult) string { return v.VariableType }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupProjectVariableResultOutput{})
}
