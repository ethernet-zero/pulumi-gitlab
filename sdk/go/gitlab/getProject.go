// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package gitlab

import (
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides details about a specific project in the gitlab provider. The results include the name of the project, path, description, default branch, etc.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-gitlab/blob/master/website/docs/d/project.html.markdown.
func LookupProject(ctx *pulumi.Context, args *GetProjectArgs) (*GetProjectResult, error) {
	inputs := make(map[string]interface{})
	if args != nil {
		inputs["archived"] = args.Archived
		inputs["defaultBranch"] = args.DefaultBranch
		inputs["description"] = args.Description
		inputs["httpUrlToRepo"] = args.HttpUrlToRepo
		inputs["id"] = args.Id
		inputs["issuesEnabled"] = args.IssuesEnabled
		inputs["mergeRequestsEnabled"] = args.MergeRequestsEnabled
		inputs["name"] = args.Name
		inputs["namespaceId"] = args.NamespaceId
		inputs["path"] = args.Path
		inputs["runnersToken"] = args.RunnersToken
		inputs["snippetsEnabled"] = args.SnippetsEnabled
		inputs["sshUrlToRepo"] = args.SshUrlToRepo
		inputs["visibilityLevel"] = args.VisibilityLevel
		inputs["webUrl"] = args.WebUrl
		inputs["wikiEnabled"] = args.WikiEnabled
	}
	outputs, err := ctx.Invoke("gitlab:index/getProject:getProject", inputs)
	if err != nil {
		return nil, err
	}
	return &GetProjectResult{
		Archived: outputs["archived"],
		DefaultBranch: outputs["defaultBranch"],
		Description: outputs["description"],
		HttpUrlToRepo: outputs["httpUrlToRepo"],
		Id: outputs["id"],
		IssuesEnabled: outputs["issuesEnabled"],
		MergeRequestsEnabled: outputs["mergeRequestsEnabled"],
		Name: outputs["name"],
		NamespaceId: outputs["namespaceId"],
		Path: outputs["path"],
		RunnersToken: outputs["runnersToken"],
		SnippetsEnabled: outputs["snippetsEnabled"],
		SshUrlToRepo: outputs["sshUrlToRepo"],
		VisibilityLevel: outputs["visibilityLevel"],
		WebUrl: outputs["webUrl"],
		WikiEnabled: outputs["wikiEnabled"],
	}, nil
}

// A collection of arguments for invoking getProject.
type GetProjectArgs struct {
	Archived interface{}
	DefaultBranch interface{}
	Description interface{}
	HttpUrlToRepo interface{}
	// The integer that uniquely identifies the project within the gitlab install.
	Id interface{}
	IssuesEnabled interface{}
	MergeRequestsEnabled interface{}
	Name interface{}
	NamespaceId interface{}
	Path interface{}
	RunnersToken interface{}
	SnippetsEnabled interface{}
	SshUrlToRepo interface{}
	VisibilityLevel interface{}
	WebUrl interface{}
	WikiEnabled interface{}
}

// A collection of values returned by getProject.
type GetProjectResult struct {
	// Whether the project is in read-only mode (archived).
	Archived interface{}
	// The default branch for the project.
	DefaultBranch interface{}
	// A description of the project.
	Description interface{}
	// URL that can be provided to `git clone` to clone the
	// repository via HTTP.
	HttpUrlToRepo interface{}
	// Integer that uniquely identifies the project within the gitlab install.
	Id interface{}
	// Enable issue tracking for the project.
	IssuesEnabled interface{}
	// Enable merge requests for the project.
	MergeRequestsEnabled interface{}
	Name interface{}
	// The namespace (group or user) of the project. Defaults to your user.
	// See `.Group` for an example.
	NamespaceId interface{}
	// The path of the repository.
	Path interface{}
	// Registration token to use during runner setup.
	RunnersToken interface{}
	// Enable snippets for the project.
	SnippetsEnabled interface{}
	// URL that can be provided to `git clone` to clone the
	// repository via SSH.
	SshUrlToRepo interface{}
	// Repositories are created as private by default.
	VisibilityLevel interface{}
	// URL that can be used to find the project in a browser.
	WebUrl interface{}
	// Enable wiki for the project.
	WikiEnabled interface{}
}
