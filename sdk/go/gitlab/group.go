// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package gitlab

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

type Group struct {
	s *pulumi.ResourceState
}

// NewGroup registers a new resource with the given unique name, arguments, and options.
func NewGroup(ctx *pulumi.Context,
	name string, args *GroupArgs, opts ...pulumi.ResourceOpt) (*Group, error) {
	if args == nil || args.Path == nil {
		return nil, errors.New("missing required argument 'Path'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["description"] = nil
		inputs["lfsEnabled"] = nil
		inputs["name"] = nil
		inputs["parentId"] = nil
		inputs["path"] = nil
		inputs["requestAccessEnabled"] = nil
		inputs["visibilityLevel"] = nil
	} else {
		inputs["description"] = args.Description
		inputs["lfsEnabled"] = args.LfsEnabled
		inputs["name"] = args.Name
		inputs["parentId"] = args.ParentId
		inputs["path"] = args.Path
		inputs["requestAccessEnabled"] = args.RequestAccessEnabled
		inputs["visibilityLevel"] = args.VisibilityLevel
	}
	inputs["fullName"] = nil
	inputs["fullPath"] = nil
	inputs["webUrl"] = nil
	s, err := ctx.RegisterResource("gitlab:index/group:Group", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Group{s: s}, nil
}

// GetGroup gets an existing Group resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGroup(ctx *pulumi.Context,
	name string, id pulumi.ID, state *GroupState, opts ...pulumi.ResourceOpt) (*Group, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["description"] = state.Description
		inputs["fullName"] = state.FullName
		inputs["fullPath"] = state.FullPath
		inputs["lfsEnabled"] = state.LfsEnabled
		inputs["name"] = state.Name
		inputs["parentId"] = state.ParentId
		inputs["path"] = state.Path
		inputs["requestAccessEnabled"] = state.RequestAccessEnabled
		inputs["visibilityLevel"] = state.VisibilityLevel
		inputs["webUrl"] = state.WebUrl
	}
	s, err := ctx.ReadResource("gitlab:index/group:Group", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Group{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *Group) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *Group) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// The description of the group.
func (r *Group) Description() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["description"])
}

// The full name of the group.
func (r *Group) FullName() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["fullName"])
}

// The full path of the group.
func (r *Group) FullPath() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["fullPath"])
}

// Boolean, defaults to true.  Whether to enable LFS
// support for projects in this group.
func (r *Group) LfsEnabled() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["lfsEnabled"])
}

// The name of this group.
func (r *Group) Name() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["name"])
}

// Integer, id of the parent group (creates a nested group).
func (r *Group) ParentId() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["parentId"])
}

// The path of the group.
func (r *Group) Path() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["path"])
}

// Boolean, defaults to false.  Whether to
// enable users to request access to the group.
func (r *Group) RequestAccessEnabled() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["requestAccessEnabled"])
}

// Set to `public` to create a public group.
// Valid values are `private`, `internal`, `public`.
// Groups are created as private by default.
func (r *Group) VisibilityLevel() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["visibilityLevel"])
}

// Web URL of the group.
func (r *Group) WebUrl() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["webUrl"])
}

// Input properties used for looking up and filtering Group resources.
type GroupState struct {
	// The description of the group.
	Description interface{}
	// The full name of the group.
	FullName interface{}
	// The full path of the group.
	FullPath interface{}
	// Boolean, defaults to true.  Whether to enable LFS
	// support for projects in this group.
	LfsEnabled interface{}
	// The name of this group.
	Name interface{}
	// Integer, id of the parent group (creates a nested group).
	ParentId interface{}
	// The path of the group.
	Path interface{}
	// Boolean, defaults to false.  Whether to
	// enable users to request access to the group.
	RequestAccessEnabled interface{}
	// Set to `public` to create a public group.
	// Valid values are `private`, `internal`, `public`.
	// Groups are created as private by default.
	VisibilityLevel interface{}
	// Web URL of the group.
	WebUrl interface{}
}

// The set of arguments for constructing a Group resource.
type GroupArgs struct {
	// The description of the group.
	Description interface{}
	// Boolean, defaults to true.  Whether to enable LFS
	// support for projects in this group.
	LfsEnabled interface{}
	// The name of this group.
	Name interface{}
	// Integer, id of the parent group (creates a nested group).
	ParentId interface{}
	// The path of the group.
	Path interface{}
	// Boolean, defaults to false.  Whether to
	// enable users to request access to the group.
	RequestAccessEnabled interface{}
	// Set to `public` to create a public group.
	// Valid values are `private`, `internal`, `public`.
	// Groups are created as private by default.
	VisibilityLevel interface{}
}
