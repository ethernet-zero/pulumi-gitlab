// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gitlab;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ProjectFreezePeriodArgs extends com.pulumi.resources.ResourceArgs {

    public static final ProjectFreezePeriodArgs Empty = new ProjectFreezePeriodArgs();

    /**
     * The timezone.
     * 
     */
    @Import(name="cronTimezone")
    private @Nullable Output<String> cronTimezone;

    /**
     * @return The timezone.
     * 
     */
    public Optional<Output<String>> cronTimezone() {
        return Optional.ofNullable(this.cronTimezone);
    }

    /**
     * End of the Freeze Period in cron format (e.g. `0 2 * * *`).
     * 
     */
    @Import(name="freezeEnd", required=true)
    private Output<String> freezeEnd;

    /**
     * @return End of the Freeze Period in cron format (e.g. `0 2 * * *`).
     * 
     */
    public Output<String> freezeEnd() {
        return this.freezeEnd;
    }

    /**
     * Start of the Freeze Period in cron format (e.g. `0 1 * * *`).
     * 
     */
    @Import(name="freezeStart", required=true)
    private Output<String> freezeStart;

    /**
     * @return Start of the Freeze Period in cron format (e.g. `0 1 * * *`).
     * 
     */
    public Output<String> freezeStart() {
        return this.freezeStart;
    }

    /**
     * The id of the project to add the schedule to.
     * 
     */
    @Import(name="projectId", required=true)
    private Output<String> projectId;

    /**
     * @return The id of the project to add the schedule to.
     * 
     */
    public Output<String> projectId() {
        return this.projectId;
    }

    private ProjectFreezePeriodArgs() {}

    private ProjectFreezePeriodArgs(ProjectFreezePeriodArgs $) {
        this.cronTimezone = $.cronTimezone;
        this.freezeEnd = $.freezeEnd;
        this.freezeStart = $.freezeStart;
        this.projectId = $.projectId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ProjectFreezePeriodArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ProjectFreezePeriodArgs $;

        public Builder() {
            $ = new ProjectFreezePeriodArgs();
        }

        public Builder(ProjectFreezePeriodArgs defaults) {
            $ = new ProjectFreezePeriodArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param cronTimezone The timezone.
         * 
         * @return builder
         * 
         */
        public Builder cronTimezone(@Nullable Output<String> cronTimezone) {
            $.cronTimezone = cronTimezone;
            return this;
        }

        /**
         * @param cronTimezone The timezone.
         * 
         * @return builder
         * 
         */
        public Builder cronTimezone(String cronTimezone) {
            return cronTimezone(Output.of(cronTimezone));
        }

        /**
         * @param freezeEnd End of the Freeze Period in cron format (e.g. `0 2 * * *`).
         * 
         * @return builder
         * 
         */
        public Builder freezeEnd(Output<String> freezeEnd) {
            $.freezeEnd = freezeEnd;
            return this;
        }

        /**
         * @param freezeEnd End of the Freeze Period in cron format (e.g. `0 2 * * *`).
         * 
         * @return builder
         * 
         */
        public Builder freezeEnd(String freezeEnd) {
            return freezeEnd(Output.of(freezeEnd));
        }

        /**
         * @param freezeStart Start of the Freeze Period in cron format (e.g. `0 1 * * *`).
         * 
         * @return builder
         * 
         */
        public Builder freezeStart(Output<String> freezeStart) {
            $.freezeStart = freezeStart;
            return this;
        }

        /**
         * @param freezeStart Start of the Freeze Period in cron format (e.g. `0 1 * * *`).
         * 
         * @return builder
         * 
         */
        public Builder freezeStart(String freezeStart) {
            return freezeStart(Output.of(freezeStart));
        }

        /**
         * @param projectId The id of the project to add the schedule to.
         * 
         * @return builder
         * 
         */
        public Builder projectId(Output<String> projectId) {
            $.projectId = projectId;
            return this;
        }

        /**
         * @param projectId The id of the project to add the schedule to.
         * 
         * @return builder
         * 
         */
        public Builder projectId(String projectId) {
            return projectId(Output.of(projectId));
        }

        public ProjectFreezePeriodArgs build() {
            $.freezeEnd = Objects.requireNonNull($.freezeEnd, "expected parameter 'freezeEnd' to be non-null");
            $.freezeStart = Objects.requireNonNull($.freezeStart, "expected parameter 'freezeStart' to be non-null");
            $.projectId = Objects.requireNonNull($.projectId, "expected parameter 'projectId' to be non-null");
            return $;
        }
    }

}
