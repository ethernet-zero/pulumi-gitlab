// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";

export interface BranchProtectionAllowedToMerge {
    /**
     * Level of access.
     */
    accessLevel: string;
    /**
     * Readable description of level of access.
     */
    accessLevelDescription: string;
    /**
     * The ID of a GitLab group allowed to perform the relevant action. Mutually exclusive with `userId`.
     */
    groupId?: number;
    /**
     * The ID of a GitLab user allowed to perform the relevant action. Mutually exclusive with `groupId`.
     */
    userId?: number;
}

export interface BranchProtectionAllowedToPush {
    /**
     * Level of access.
     */
    accessLevel: string;
    /**
     * Readable description of level of access.
     */
    accessLevelDescription: string;
    /**
     * The ID of a GitLab group allowed to perform the relevant action. Mutually exclusive with `userId`.
     */
    groupId?: number;
    /**
     * The ID of a GitLab user allowed to perform the relevant action. Mutually exclusive with `groupId`.
     */
    userId?: number;
}

export interface GetGroupMembershipMember {
    /**
     * Only return members with the desired access level. Acceptable values are: `guest`, `reporter`, `developer`, `maintainer`, `owner`.
     */
    accessLevel: string;
    avatarUrl: string;
    expiresAt: string;
    /**
     * The ID of this resource.
     */
    id: number;
    name: string;
    state: string;
    username: string;
    webUrl: string;
}

export interface GetProjectProtectedBranchMergeAccessLevel {
    accessLevel: string;
    accessLevelDescription: string;
    groupId: number;
    userId: number;
}

export interface GetProjectProtectedBranchPushAccessLevel {
    accessLevel: string;
    accessLevelDescription: string;
    groupId: number;
    userId: number;
}

export interface GetProjectProtectedBranchesProtectedBranch {
    allowForcePush: boolean;
    codeOwnerApprovalRequired: boolean;
    /**
     * The ID of this resource.
     */
    id: number;
    mergeAccessLevels: outputs.GetProjectProtectedBranchesProtectedBranchMergeAccessLevel[];
    name: string;
    pushAccessLevels: outputs.GetProjectProtectedBranchesProtectedBranchPushAccessLevel[];
}

export interface GetProjectProtectedBranchesProtectedBranchMergeAccessLevel {
    accessLevel: string;
    accessLevelDescription: string;
    groupId: number;
    userId: number;
}

export interface GetProjectProtectedBranchesProtectedBranchPushAccessLevel {
    accessLevel: string;
    accessLevelDescription: string;
    groupId: number;
    userId: number;
}

export interface GetProjectPushRule {
    authorEmailRegex: string;
    branchNameRegex: string;
    commitCommitterCheck: boolean;
    commitMessageNegativeRegex: string;
    commitMessageRegex: string;
    denyDeleteTag: boolean;
    fileNameRegex: string;
    maxFileSize: number;
    memberCheck: boolean;
    preventSecrets: boolean;
    rejectUnsignedCommits: boolean;
}

export interface GetProjectsProject {
    _links: {[key: string]: string};
    allowMergeOnSkippedPipeline: boolean;
    approvalsBeforeMerge: number;
    /**
     * Limit by archived status.
     */
    archived: boolean;
    avatarUrl: string;
    buildCoverageRegex: string;
    ciConfigPath: string;
    containerRegistryEnabled: boolean;
    createdAt: string;
    creatorId: number;
    customAttributes: {[key: string]: any}[];
    defaultBranch: string;
    description: string;
    forkedFromProjects: outputs.GetProjectsProjectForkedFromProject[];
    forksCount: number;
    httpUrlToRepo: string;
    /**
     * The ID of this resource.
     */
    id: number;
    importError: string;
    importStatus: string;
    issuesEnabled: boolean;
    jobsEnabled: boolean;
    lastActivityAt: string;
    lfsEnabled: boolean;
    mergeMethod: string;
    mergeRequestsEnabled: boolean;
    mirror: boolean;
    mirrorOverwritesDivergedBranches: boolean;
    mirrorTriggerBuilds: boolean;
    mirrorUserId: number;
    name: string;
    nameWithNamespace: string;
    namespaces: outputs.GetProjectsProjectNamespace[];
    onlyAllowMergeIfAllDiscussionsAreResolved: boolean;
    onlyAllowMergeIfPipelineSucceeds: boolean;
    onlyMirrorProtectedBranches: boolean;
    openIssuesCount: number;
    owners: outputs.GetProjectsProjectOwner[];
    packagesEnabled: boolean;
    path: string;
    pathWithNamespace: string;
    permissions: outputs.GetProjectsProjectPermission[];
    public: boolean;
    publicBuilds: boolean;
    readmeUrl: string;
    requestAccessEnabled: boolean;
    resolveOutdatedDiffDiscussions: boolean;
    runnersToken: string;
    sharedRunnersEnabled: boolean;
    sharedWithGroups: outputs.GetProjectsProjectSharedWithGroup[];
    snippetsEnabled: boolean;
    sshUrlToRepo: string;
    starCount: number;
    /**
     * Include project statistics. Cannot be used with `groupId`.
     */
    statistics: {[key: string]: number};
    tagLists: string[];
    /**
     * Limit by visibility `public`, `internal`, or `private`.
     */
    visibility: string;
    webUrl: string;
    wikiEnabled: boolean;
}

export interface GetProjectsProjectForkedFromProject {
    httpUrlToRepo: string;
    /**
     * The ID of this resource.
     */
    id: number;
    name: string;
    nameWithNamespace: string;
    path: string;
    pathWithNamespace: string;
    webUrl: string;
}

export interface GetProjectsProjectNamespace {
    fullPath: string;
    /**
     * The ID of this resource.
     */
    id: number;
    kind: string;
    name: string;
    path: string;
}

export interface GetProjectsProjectOwner {
    avatarUrl: string;
    /**
     * The ID of this resource.
     */
    id: number;
    name: string;
    state: string;
    username: string;
    websiteUrl: string;
}

export interface GetProjectsProjectPermission {
    groupAccess: {[key: string]: number};
    projectAccess: {[key: string]: number};
}

export interface GetProjectsProjectSharedWithGroup {
    groupAccessLevel: string;
    /**
     * The ID of the group owned by the authenticated user to look projects for within. Cannot be used with `minAccessLevel`, `withProgrammingLanguage` or `statistics`.
     */
    groupId: number;
    groupName: string;
}

export interface GetUsersUser {
    avatarUrl: string;
    bio: string;
    canCreateGroup: boolean;
    canCreateProject: boolean;
    colorSchemeId: number;
    createdAt: string;
    currentSignInAt: string;
    email: string;
    /**
     * Lookup users by external UID. (Requires administrator privileges)
     */
    externUid: string;
    external: boolean;
    /**
     * The ID of this resource.
     */
    id: number;
    isAdmin: boolean;
    lastSignInAt: string;
    linkedin: string;
    location: string;
    name: string;
    organization: string;
    projectsLimit: number;
    provider: string;
    skype: string;
    state: string;
    themeId: number;
    twitter: string;
    twoFactorEnabled: boolean;
    username: string;
    websiteUrl: string;
}

export interface ProjectPushRules {
    /**
     * All commit author emails must match this regex, e.g. `@my-company.com$`.
     */
    authorEmailRegex?: string;
    /**
     * All branch names must match this regex, e.g. `(feature|hotfix)\/*`.
     */
    branchNameRegex?: string;
    /**
     * Users can only push commits to this repository that were committed with one of their own verified emails.
     */
    commitCommitterCheck?: boolean;
    /**
     * No commit message is allowed to match this regex, for example `ssh\:\/\/`.
     */
    commitMessageNegativeRegex?: string;
    /**
     * All commit messages must match this regex, e.g. `Fixed \d+\..*`.
     */
    commitMessageRegex?: string;
    /**
     * Deny deleting a tag.
     */
    denyDeleteTag?: boolean;
    /**
     * All commited filenames must not match this regex, e.g. `(jar|exe)$`.
     */
    fileNameRegex?: string;
    /**
     * Maximum file size (MB).
     */
    maxFileSize?: number;
    /**
     * Restrict commits by author (email) to existing GitLab users.
     */
    memberCheck?: boolean;
    /**
     * GitLab will reject any files that are likely to contain secrets.
     */
    preventSecrets?: boolean;
    /**
     * Reject commit when itâ€™s not signed through GPG.
     */
    rejectUnsignedCommits?: boolean;
}

