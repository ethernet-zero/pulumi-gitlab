// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * This resource allows you to create and manage topics that are then assignable to projects. Topics are the successors for project tags. Aside from avoiding terminology collisions with Git tags, they are more descriptive and better searchable.
 *
 * For assigning topics, use the project resource.
 *
 * > Deleting a resource doesn't delete the corresponding topic as the GitLab API doesn't support deleting topics yet. You can set softDestroy to true if you want the topics description to be emptied instead.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gitlab from "@pulumi/gitlab";
 *
 * const functionalProgramming = new gitlab.Topic("functional_programming", {
 *     description: "In computer science, functional programming is a programming paradigm where programs are constructed by applying and composing functions.",
 * });
 * ```
 *
 * ## Import
 *
 * ```sh
 *  $ pulumi import gitlab:index/topic:Topic # You can import a topic to terraform state using `<resource> <id>`.
 * ```
 *
 * # The `id` must be an integer for the id of the topic you want to import, # for example
 *
 * ```sh
 *  $ pulumi import gitlab:index/topic:Topic functional_programming 1
 * ```
 */
export class Topic extends pulumi.CustomResource {
    /**
     * Get an existing Topic resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: TopicState, opts?: pulumi.CustomResourceOptions): Topic {
        return new Topic(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gitlab:index/topic:Topic';

    /**
     * Returns true if the given object is an instance of Topic.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Topic {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Topic.__pulumiType;
    }

    /**
     * A text describing the topic
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The topic's name
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Empty the topics fields instead of deleting it
     */
    public readonly softDestroy!: pulumi.Output<boolean>;

    /**
     * Create a Topic resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: TopicArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: TopicArgs | TopicState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as TopicState | undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["softDestroy"] = state ? state.softDestroy : undefined;
        } else {
            const args = argsOrState as TopicArgs | undefined;
            if ((!args || args.softDestroy === undefined) && !opts.urn) {
                throw new Error("Missing required property 'softDestroy'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["softDestroy"] = args ? args.softDestroy : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Topic.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Topic resources.
 */
export interface TopicState {
    /**
     * A text describing the topic
     */
    description?: pulumi.Input<string>;
    /**
     * The topic's name
     */
    name?: pulumi.Input<string>;
    /**
     * Empty the topics fields instead of deleting it
     */
    softDestroy?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a Topic resource.
 */
export interface TopicArgs {
    /**
     * A text describing the topic
     */
    description?: pulumi.Input<string>;
    /**
     * The topic's name
     */
    name?: pulumi.Input<string>;
    /**
     * Empty the topics fields instead of deleting it
     */
    softDestroy: pulumi.Input<boolean>;
}
