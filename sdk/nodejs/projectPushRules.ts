// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * This resource allows you to create and manage push rules for your GitLab projects.
 * For further information on push rules, consult the [gitlab
 * documentation](https://docs.gitlab.com/ce/push_rules/push_rules.html#push-rules).
 *
 */
export class ProjectPushRules extends pulumi.CustomResource {
    /**
     * Get an existing ProjectPushRules resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ProjectPushRulesState, opts?: pulumi.CustomResourceOptions): ProjectPushRules {
        return new ProjectPushRules(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gitlab:index/projectPushRules:ProjectPushRules';

    /**
     * Returns true if the given object is an instance of ProjectPushRules.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ProjectPushRules {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ProjectPushRules.__pulumiType;
    }

    /**
     * All commit author emails must match this regex, e.g. "@my-company.com$"
     */
    public readonly authorEmailRegex!: pulumi.Output<string | undefined>;
    /**
     * All branch names must match this regex, e.g. "(feature|hotfix)\/*"
     */
    public readonly branchNameRegex!: pulumi.Output<string | undefined>;
    /**
     * All commit messages must match this regex, e.g. "Fixed \d+\..*"
     */
    public readonly commitMessageRegex!: pulumi.Output<string | undefined>;
    /**
     * Deny deleting a tag
     */
    public readonly denyDeleteTag!: pulumi.Output<boolean | undefined>;
    /**
     * All commited filenames must not match this regex, e.g. "(jar|exe)$"
     */
    public readonly fileNameRegex!: pulumi.Output<string | undefined>;
    /**
     * Maximum file size (MB)
     */
    public readonly maxFileSize!: pulumi.Output<number | undefined>;
    /**
     * Restrict commits by author (email) to existing GitLab users
     */
    public readonly memberCheck!: pulumi.Output<boolean | undefined>;
    /**
     * GitLab will reject any files that are likely to contain secrets
     */
    public readonly preventSecrets!: pulumi.Output<boolean | undefined>;
    /**
     * The name or id of the project to add the push rules to.
     */
    public readonly project!: pulumi.Output<string>;

    /**
     * Create a ProjectPushRules resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ProjectPushRulesArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ProjectPushRulesArgs | ProjectPushRulesState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state = argsOrState as ProjectPushRulesState | undefined;
            inputs["authorEmailRegex"] = state ? state.authorEmailRegex : undefined;
            inputs["branchNameRegex"] = state ? state.branchNameRegex : undefined;
            inputs["commitMessageRegex"] = state ? state.commitMessageRegex : undefined;
            inputs["denyDeleteTag"] = state ? state.denyDeleteTag : undefined;
            inputs["fileNameRegex"] = state ? state.fileNameRegex : undefined;
            inputs["maxFileSize"] = state ? state.maxFileSize : undefined;
            inputs["memberCheck"] = state ? state.memberCheck : undefined;
            inputs["preventSecrets"] = state ? state.preventSecrets : undefined;
            inputs["project"] = state ? state.project : undefined;
        } else {
            const args = argsOrState as ProjectPushRulesArgs | undefined;
            if (!args || args.project === undefined) {
                throw new Error("Missing required property 'project'");
            }
            inputs["authorEmailRegex"] = args ? args.authorEmailRegex : undefined;
            inputs["branchNameRegex"] = args ? args.branchNameRegex : undefined;
            inputs["commitMessageRegex"] = args ? args.commitMessageRegex : undefined;
            inputs["denyDeleteTag"] = args ? args.denyDeleteTag : undefined;
            inputs["fileNameRegex"] = args ? args.fileNameRegex : undefined;
            inputs["maxFileSize"] = args ? args.maxFileSize : undefined;
            inputs["memberCheck"] = args ? args.memberCheck : undefined;
            inputs["preventSecrets"] = args ? args.preventSecrets : undefined;
            inputs["project"] = args ? args.project : undefined;
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(ProjectPushRules.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ProjectPushRules resources.
 */
export interface ProjectPushRulesState {
    /**
     * All commit author emails must match this regex, e.g. "@my-company.com$"
     */
    readonly authorEmailRegex?: pulumi.Input<string>;
    /**
     * All branch names must match this regex, e.g. "(feature|hotfix)\/*"
     */
    readonly branchNameRegex?: pulumi.Input<string>;
    /**
     * All commit messages must match this regex, e.g. "Fixed \d+\..*"
     */
    readonly commitMessageRegex?: pulumi.Input<string>;
    /**
     * Deny deleting a tag
     */
    readonly denyDeleteTag?: pulumi.Input<boolean>;
    /**
     * All commited filenames must not match this regex, e.g. "(jar|exe)$"
     */
    readonly fileNameRegex?: pulumi.Input<string>;
    /**
     * Maximum file size (MB)
     */
    readonly maxFileSize?: pulumi.Input<number>;
    /**
     * Restrict commits by author (email) to existing GitLab users
     */
    readonly memberCheck?: pulumi.Input<boolean>;
    /**
     * GitLab will reject any files that are likely to contain secrets
     */
    readonly preventSecrets?: pulumi.Input<boolean>;
    /**
     * The name or id of the project to add the push rules to.
     */
    readonly project?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ProjectPushRules resource.
 */
export interface ProjectPushRulesArgs {
    /**
     * All commit author emails must match this regex, e.g. "@my-company.com$"
     */
    readonly authorEmailRegex?: pulumi.Input<string>;
    /**
     * All branch names must match this regex, e.g. "(feature|hotfix)\/*"
     */
    readonly branchNameRegex?: pulumi.Input<string>;
    /**
     * All commit messages must match this regex, e.g. "Fixed \d+\..*"
     */
    readonly commitMessageRegex?: pulumi.Input<string>;
    /**
     * Deny deleting a tag
     */
    readonly denyDeleteTag?: pulumi.Input<boolean>;
    /**
     * All commited filenames must not match this regex, e.g. "(jar|exe)$"
     */
    readonly fileNameRegex?: pulumi.Input<string>;
    /**
     * Maximum file size (MB)
     */
    readonly maxFileSize?: pulumi.Input<number>;
    /**
     * Restrict commits by author (email) to existing GitLab users
     */
    readonly memberCheck?: pulumi.Input<boolean>;
    /**
     * GitLab will reject any files that are likely to contain secrets
     */
    readonly preventSecrets?: pulumi.Input<boolean>;
    /**
     * The name or id of the project to add the push rules to.
     */
    readonly project: pulumi.Input<string>;
}
