// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GitLab
{
    public static class GetReleaseLink
    {
        /// <summary>
        /// The `gitlab.ReleaseLink` data source allows get details of a release link.
        /// 
        /// **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/releases/links.html)
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using GitLab = Pulumi.GitLab;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var example = Output.Create(GitLab.GetReleaseLink.InvokeAsync(new GitLab.GetReleaseLinkArgs
        ///         {
        ///             LinkId = 11,
        ///             Project = "foo/bar",
        ///             TagName = "v1.0.1",
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetReleaseLinkResult> InvokeAsync(GetReleaseLinkArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetReleaseLinkResult>("gitlab:index/getReleaseLink:getReleaseLink", args ?? new GetReleaseLinkArgs(), options.WithDefaults());

        /// <summary>
        /// The `gitlab.ReleaseLink` data source allows get details of a release link.
        /// 
        /// **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/releases/links.html)
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using GitLab = Pulumi.GitLab;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var example = Output.Create(GitLab.GetReleaseLink.InvokeAsync(new GitLab.GetReleaseLinkArgs
        ///         {
        ///             LinkId = 11,
        ///             Project = "foo/bar",
        ///             TagName = "v1.0.1",
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetReleaseLinkResult> Invoke(GetReleaseLinkInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetReleaseLinkResult>("gitlab:index/getReleaseLink:getReleaseLink", args ?? new GetReleaseLinkInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetReleaseLinkArgs : Pulumi.InvokeArgs
    {
        [Input("linkId", required: true)]
        public int LinkId { get; set; }

        [Input("project", required: true)]
        public string Project { get; set; } = null!;

        [Input("tagName", required: true)]
        public string TagName { get; set; } = null!;

        public GetReleaseLinkArgs()
        {
        }
    }

    public sealed class GetReleaseLinkInvokeArgs : Pulumi.InvokeArgs
    {
        [Input("linkId", required: true)]
        public Input<int> LinkId { get; set; } = null!;

        [Input("project", required: true)]
        public Input<string> Project { get; set; } = null!;

        [Input("tagName", required: true)]
        public Input<string> TagName { get; set; } = null!;

        public GetReleaseLinkInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetReleaseLinkResult
    {
        public readonly string DirectAssetUrl;
        public readonly bool External;
        public readonly string Filepath;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly int LinkId;
        public readonly string LinkType;
        public readonly string Name;
        public readonly string Project;
        public readonly string TagName;
        public readonly string Url;

        [OutputConstructor]
        private GetReleaseLinkResult(
            string directAssetUrl,

            bool external,

            string filepath,

            string id,

            int linkId,

            string linkType,

            string name,

            string project,

            string tagName,

            string url)
        {
            DirectAssetUrl = directAssetUrl;
            External = external;
            Filepath = filepath;
            Id = id;
            LinkId = linkId;
            LinkType = linkType;
            Name = name;
            Project = project;
            TagName = tagName;
            Url = url;
        }
    }
}
