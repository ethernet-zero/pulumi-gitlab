// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GitLab
{
    public static class GetInstanceVariable
    {
        /// <summary>
        /// The `gitlab.InstanceVariable` data source allows to retrieve details about an instance-level CI/CD variable.
        /// 
        /// **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/instance_level_ci_variables.html)
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using GitLab = Pulumi.GitLab;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var foo = Output.Create(GitLab.GetInstanceVariable.InvokeAsync(new GitLab.GetInstanceVariableArgs
        ///         {
        ///             Key = "foo",
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetInstanceVariableResult> InvokeAsync(GetInstanceVariableArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetInstanceVariableResult>("gitlab:index/getInstanceVariable:getInstanceVariable", args ?? new GetInstanceVariableArgs(), options.WithDefaults());

        /// <summary>
        /// The `gitlab.InstanceVariable` data source allows to retrieve details about an instance-level CI/CD variable.
        /// 
        /// **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/instance_level_ci_variables.html)
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using GitLab = Pulumi.GitLab;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var foo = Output.Create(GitLab.GetInstanceVariable.InvokeAsync(new GitLab.GetInstanceVariableArgs
        ///         {
        ///             Key = "foo",
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetInstanceVariableResult> Invoke(GetInstanceVariableInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetInstanceVariableResult>("gitlab:index/getInstanceVariable:getInstanceVariable", args ?? new GetInstanceVariableInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetInstanceVariableArgs : Pulumi.InvokeArgs
    {
        [Input("key", required: true)]
        public string Key { get; set; } = null!;

        public GetInstanceVariableArgs()
        {
        }
    }

    public sealed class GetInstanceVariableInvokeArgs : Pulumi.InvokeArgs
    {
        [Input("key", required: true)]
        public Input<string> Key { get; set; } = null!;

        public GetInstanceVariableInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetInstanceVariableResult
    {
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string Key;
        public readonly bool Masked;
        public readonly bool Protected;
        public readonly string Value;
        public readonly string VariableType;

        [OutputConstructor]
        private GetInstanceVariableResult(
            string id,

            string key,

            bool masked,

            bool @protected,

            string value,

            string variableType)
        {
            Id = id;
            Key = key;
            Masked = masked;
            Protected = @protected;
            Value = value;
            VariableType = variableType;
        }
    }
}
