// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GitLab
{
    public static class GetCurrentUser
    {
        /// <summary>
        /// The `gitlab.getCurrentUser` data source allows details of the current user (determined by `token` provider attribute) to be retrieved.
        /// 
        /// **Upstream API**: [GitLab GraphQL API docs](https://docs.gitlab.com/ee/api/graphql/reference/index.html#querycurrentuser)
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using GitLab = Pulumi.GitLab;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var example = Output.Create(GitLab.GetCurrentUser.InvokeAsync());
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetCurrentUserResult> InvokeAsync(InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetCurrentUserResult>("gitlab:index/getCurrentUser:getCurrentUser", InvokeArgs.Empty, options.WithDefaults());
    }


    [OutputType]
    public sealed class GetCurrentUserResult
    {
        public readonly bool Bot;
        public readonly string GlobalId;
        public readonly string GlobalNamespaceId;
        public readonly int GroupCount;
        public readonly string Id;
        public readonly string Name;
        public readonly string NamespaceId;
        public readonly string PublicEmail;
        public readonly string Username;

        [OutputConstructor]
        private GetCurrentUserResult(
            bool bot,

            string globalId,

            string globalNamespaceId,

            int groupCount,

            string id,

            string name,

            string namespaceId,

            string publicEmail,

            string username)
        {
            Bot = bot;
            GlobalId = globalId;
            GlobalNamespaceId = globalNamespaceId;
            GroupCount = groupCount;
            Id = id;
            Name = name;
            NamespaceId = namespaceId;
            PublicEmail = publicEmail;
            Username = username;
        }
    }
}
