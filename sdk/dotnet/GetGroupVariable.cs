// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GitLab
{
    public static class GetGroupVariable
    {
        /// <summary>
        /// The `gitlab.GroupVariable` data source allows to retrieve details about a group-level CI/CD variable.
        /// 
        /// **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/group_level_variables.html)
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using GitLab = Pulumi.GitLab;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var foo = Output.Create(GitLab.GetGroupVariable.InvokeAsync(new GitLab.GetGroupVariableArgs
        ///         {
        ///             Group = "my/example/group",
        ///             Key = "foo",
        ///         }));
        ///         var bar = Output.Create(GitLab.GetGroupVariable.InvokeAsync(new GitLab.GetGroupVariableArgs
        ///         {
        ///             EnvironmentScope = "staging/*",
        ///             Group = "my/example/group",
        ///             Key = "bar",
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetGroupVariableResult> InvokeAsync(GetGroupVariableArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetGroupVariableResult>("gitlab:index/getGroupVariable:getGroupVariable", args ?? new GetGroupVariableArgs(), options.WithDefaults());

        /// <summary>
        /// The `gitlab.GroupVariable` data source allows to retrieve details about a group-level CI/CD variable.
        /// 
        /// **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/group_level_variables.html)
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using GitLab = Pulumi.GitLab;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var foo = Output.Create(GitLab.GetGroupVariable.InvokeAsync(new GitLab.GetGroupVariableArgs
        ///         {
        ///             Group = "my/example/group",
        ///             Key = "foo",
        ///         }));
        ///         var bar = Output.Create(GitLab.GetGroupVariable.InvokeAsync(new GitLab.GetGroupVariableArgs
        ///         {
        ///             EnvironmentScope = "staging/*",
        ///             Group = "my/example/group",
        ///             Key = "bar",
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetGroupVariableResult> Invoke(GetGroupVariableInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetGroupVariableResult>("gitlab:index/getGroupVariable:getGroupVariable", args ?? new GetGroupVariableInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetGroupVariableArgs : Pulumi.InvokeArgs
    {
        [Input("environmentScope")]
        public string? EnvironmentScope { get; set; }

        [Input("group", required: true)]
        public string Group { get; set; } = null!;

        [Input("key", required: true)]
        public string Key { get; set; } = null!;

        public GetGroupVariableArgs()
        {
        }
    }

    public sealed class GetGroupVariableInvokeArgs : Pulumi.InvokeArgs
    {
        [Input("environmentScope")]
        public Input<string>? EnvironmentScope { get; set; }

        [Input("group", required: true)]
        public Input<string> Group { get; set; } = null!;

        [Input("key", required: true)]
        public Input<string> Key { get; set; } = null!;

        public GetGroupVariableInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetGroupVariableResult
    {
        public readonly string EnvironmentScope;
        public readonly string Group;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string Key;
        public readonly bool Masked;
        public readonly bool Protected;
        public readonly string Value;
        public readonly string VariableType;

        [OutputConstructor]
        private GetGroupVariableResult(
            string environmentScope,

            string group,

            string id,

            string key,

            bool masked,

            bool @protected,

            string value,

            string variableType)
        {
            EnvironmentScope = environmentScope;
            Group = group;
            Id = id;
            Key = key;
            Masked = masked;
            Protected = @protected;
            Value = value;
            VariableType = variableType;
        }
    }
}
