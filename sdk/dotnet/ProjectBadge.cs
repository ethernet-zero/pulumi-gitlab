// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GitLab
{
    /// <summary>
    /// This resource allows you to create and manage badges for your GitLab projects.
    /// For further information consult the [gitlab
    /// documentation](https://docs.gitlab.com/ce/user/project/badges.html).
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using GitLab = Pulumi.GitLab;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var foo = new GitLab.Project("foo", new GitLab.ProjectArgs
    ///         {
    ///         });
    ///         var example = new GitLab.ProjectBadge("example", new GitLab.ProjectBadgeArgs
    ///         {
    ///             Project = foo.Id,
    ///             LinkUrl = "https://example.com/badge-123",
    ///             ImageUrl = "https://example.com/badge-123.svg",
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// 
    /// ## Import
    /// 
    /// # GitLab project badges can be imported using an id made up of `{project_id}:{badge_id}`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import gitlab:index/projectBadge:ProjectBadge foo 1:3
    /// ```
    /// </summary>
    [GitLabResourceType("gitlab:index/projectBadge:ProjectBadge")]
    public partial class ProjectBadge : Pulumi.CustomResource
    {
        /// <summary>
        /// The image url which will be presented on project overview.
        /// </summary>
        [Output("imageUrl")]
        public Output<string> ImageUrl { get; private set; } = null!;

        /// <summary>
        /// The url linked with the badge.
        /// </summary>
        [Output("linkUrl")]
        public Output<string> LinkUrl { get; private set; } = null!;

        /// <summary>
        /// The id of the project to add the badge to.
        /// </summary>
        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// The image_url argument rendered (in case of use of placeholders).
        /// </summary>
        [Output("renderedImageUrl")]
        public Output<string> RenderedImageUrl { get; private set; } = null!;

        /// <summary>
        /// The link_url argument rendered (in case of use of placeholders).
        /// </summary>
        [Output("renderedLinkUrl")]
        public Output<string> RenderedLinkUrl { get; private set; } = null!;


        /// <summary>
        /// Create a ProjectBadge resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ProjectBadge(string name, ProjectBadgeArgs args, CustomResourceOptions? options = null)
            : base("gitlab:index/projectBadge:ProjectBadge", name, args ?? new ProjectBadgeArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ProjectBadge(string name, Input<string> id, ProjectBadgeState? state = null, CustomResourceOptions? options = null)
            : base("gitlab:index/projectBadge:ProjectBadge", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ProjectBadge resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ProjectBadge Get(string name, Input<string> id, ProjectBadgeState? state = null, CustomResourceOptions? options = null)
        {
            return new ProjectBadge(name, id, state, options);
        }
    }

    public sealed class ProjectBadgeArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The image url which will be presented on project overview.
        /// </summary>
        [Input("imageUrl", required: true)]
        public Input<string> ImageUrl { get; set; } = null!;

        /// <summary>
        /// The url linked with the badge.
        /// </summary>
        [Input("linkUrl", required: true)]
        public Input<string> LinkUrl { get; set; } = null!;

        /// <summary>
        /// The id of the project to add the badge to.
        /// </summary>
        [Input("project", required: true)]
        public Input<string> Project { get; set; } = null!;

        public ProjectBadgeArgs()
        {
        }
    }

    public sealed class ProjectBadgeState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The image url which will be presented on project overview.
        /// </summary>
        [Input("imageUrl")]
        public Input<string>? ImageUrl { get; set; }

        /// <summary>
        /// The url linked with the badge.
        /// </summary>
        [Input("linkUrl")]
        public Input<string>? LinkUrl { get; set; }

        /// <summary>
        /// The id of the project to add the badge to.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// The image_url argument rendered (in case of use of placeholders).
        /// </summary>
        [Input("renderedImageUrl")]
        public Input<string>? RenderedImageUrl { get; set; }

        /// <summary>
        /// The link_url argument rendered (in case of use of placeholders).
        /// </summary>
        [Input("renderedLinkUrl")]
        public Input<string>? RenderedLinkUrl { get; set; }

        public ProjectBadgeState()
        {
        }
    }
}
